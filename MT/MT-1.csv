HITId,AssignmentId,WorkerId,WorkTimeInSeconds,Input.Id,Input.Venue,Input.Title,Input.Authors,Input.Cites,Input.Abstract,Answer.DOI,Answer.Methods?,Answer.Primary?,Answer.Quant?,Answer.Read?,Answer.Suggestion,Answer.citation,Answer.paper-link
30F94FBDNR8BT8OW1J7AVD3MNPOBTE,3FPRZHYEPZVNPPM2HNXK2WOIB9S3V5,A3F9JBVNMQ4ZUV,134,14345,15,Test input generation with java PathFinder,"willem visser,corina s. pasareanu,sarfraz khurshid","69","We show how model checking and symbolic execution can be used to generate test inputs to achieve structural coverage of code that manipulates complex data structures. We focus on obtaining branch-coverage during unit testing of some of the core methods of the red-black tree implementation in the Java TreeMap library, using the Java PathFinder model checker. Three different test generation techniques will be introduced and compared, namely, straight model checking of the code, model checking used in a black-box fashion to generate all inputs up to a fixed size, and lastly, model checking used during white-box test input generation. The main contribution of this work is to show how efficient white-box test input generation can be done for code manipulating complex data, taking into account complex method preconditions.",http://users.ece.utexas.edu/~khurshid/papers/JPF-issta04.pdf,1|4,1,1,1|2,{},486,http://dl.acm.org/citation.cfm?id=1007526
30F94FBDNR8BT8OW1J7AVD3MNPOBTE,3LEP4MGT3HO6Y3QT5VCWETGNZUNBDR,A1665VCUSZL9YT,312,14345,15,Test input generation with java PathFinder,"willem visser,corina s. pasareanu,sarfraz khurshid","69","We show how model checking and symbolic execution can be used to generate test inputs to achieve structural coverage of code that manipulates complex data structures. We focus on obtaining branch-coverage during unit testing of some of the core methods of the red-black tree implementation in the Java TreeMap library, using the Java PathFinder model checker. Three different test generation techniques will be introduced and compared, namely, straight model checking of the code, model checking used in a black-box fashion to generate all inputs up to a fixed size, and lastly, model checking used during white-box test input generation. The main contribution of this work is to show how efficient white-box test input generation can be done for code manipulating complex data, taking into account complex method preconditions.",https://doi.org/10.1145/1007512.1007526,1,1,1,1|2,{},173,http://dl.acm.org/citation.cfm?id=1007526
30F94FBDNR8BT8OW1J7AVD3MNPOBTE,3QECW5O0KIPBQC5HQBLYGBYHT565TR,AZ72Z7VU6TQCN,93,14345,15,Test input generation with java PathFinder,"willem visser,corina s. pasareanu,sarfraz khurshid","69","We show how model checking and symbolic execution can be used to generate test inputs to achieve structural coverage of code that manipulates complex data structures. We focus on obtaining branch-coverage during unit testing of some of the core methods of the red-black tree implementation in the Java TreeMap library, using the Java PathFinder model checker. Three different test generation techniques will be introduced and compared, namely, straight model checking of the code, model checking used in a black-box fashion to generate all inputs up to a fixed size, and lastly, model checking used during white-box test input generation. The main contribution of this work is to show how efficient white-box test input generation can be done for code manipulating complex data, taking into account complex method preconditions.",doi>10.1145/1007512.1007526,1|2,1,1,2|3,{},487,http://dl.acm.org/citation.cfm?id=1007526
30OITAWPBQR206I435CPQO58OVQ9HS,3NG53N1RLW7WL2VC7SJHNL7B57G8PE,A3F9JBVNMQ4ZUV,86,10319,9,Yesterday My Program Worked Today It Does Not Why,andreas zeller,"47","Imagine some program and a number of changes. If none of these changes is applied (yesterday), the program works. If all changes are applied (today), the program does not work. Which change is responsible for the failure? We present an efficient algorithm that determines the minimal set of failure-inducing changes. Our delta debugging prototype tracked down a single failure-inducing change from 178,000 changed GDB lines within a few hours.",https://pdfs.semanticscholar.org/1a11/995cca0eb239a7b95d23b4a42c6a634fcf41.pdf,1,1,1,2,{},344,https://link.springer.com/chapter/10.1007/3-540-48166-4_16
30OITAWPBQR206I435CPQO58OVQ9HS,3P529IW9KZ9F9WQ1NEWGGWFDN14LFM,A3KFX4FS1SANOS,443,10319,9,Yesterday My Program Worked Today It Does Not Why,andreas zeller,"47","Imagine some program and a number of changes. If none of these changes is applied (yesterday), the program works. If all changes are applied (today), the program does not work. Which change is responsible for the failure? We present an efficient algorithm that determines the minimal set of failure-inducing changes. Our delta debugging prototype tracked down a single failure-inducing change from 178,000 changed GDB lines within a few hours.",DOI: 10.1007/3-540-48166-4_16,4,1,3,2,NONE,344,https://link.springer.com/chapter/10.1007/3-540-48166-4_16
30OITAWPBQR206I435CPQO58OVQ9HS,3ZV9H2YQQEV04EM77X2GOY7WJ3XW3I,AZ72Z7VU6TQCN,92,10319,9,Yesterday My Program Worked Today It Does Not Why,andreas zeller,"47","Imagine some program and a number of changes. If none of these changes is applied (yesterday), the program works. If all changes are applied (today), the program does not work. Which change is responsible for the failure? We present an efficient algorithm that determines the minimal set of failure-inducing changes. Our delta debugging prototype tracked down a single failure-inducing change from 178,000 changed GDB lines within a few hours.",DOI: 10.1007/3-540-48166-4_16,1|2,1,1,2|3,{},345,https://link.springer.com/chapter/10.1007/3-540-48166-4_16
31HLTCK4BLJMXH0WM0Z3X6I40NWGVG,35USIKEBNS49E30BYY9RZI6PZ7XN63,AZ72Z7VU6TQCN,63,1809,1,Predicting defects using network analysis on dependency graphs,"thomas zimmermann,nachiappan nagappan","55","In software development, resources for quality assurance are limited by time and by cost. In order to allocate resources effectively, managers need to rely on their experience backed by code complexity metrics. But often dependencies exist between various pieces of code over which managers may have little knowledge. These dependencies can be construed as a low level graph of the entire system. In this paper, we propose to use network analysis on these dependency graphs. This allows managers to identify central program units that are more likely to face defects. In our evaluation on Windows Server 2003, we found that the recall for models built from network measures is by 10% points higher than for models built from complexity metrics. In addition, network measures could identify 60% of the binaries that the Windows developers considered as critical-twice as many as identified by complexity metrics.",DOI: 10.1145/1368088.1368161,1,1,,2|3,{},382,http://ieeexplore.ieee.org/abstract/document/4814164/
31HLTCK4BLJMXH0WM0Z3X6I40NWGVG,3A4NIXBJ77NLF6II910TBMZMK1EMLQ,A3F9JBVNMQ4ZUV,99,1809,1,Predicting defects using network analysis on dependency graphs,"thomas zimmermann,nachiappan nagappan","55","In software development, resources for quality assurance are limited by time and by cost. In order to allocate resources effectively, managers need to rely on their experience backed by code complexity metrics. But often dependencies exist between various pieces of code over which managers may have little knowledge. These dependencies can be construed as a low level graph of the entire system. In this paper, we propose to use network analysis on these dependency graphs. This allows managers to identify central program units that are more likely to face defects. In our evaluation on Windows Server 2003, we found that the recall for models built from network measures is by 10% points higher than for models built from complexity metrics. In addition, network measures could identify 60% of the binaries that the Windows developers considered as critical-twice as many as identified by complexity metrics.",http://thomas-zimmermann.com/publications/files/zimmermann-icse-2008.pdf,1,1,1,2,{},381,http://ieeexplore.ieee.org/abstract/document/4814164/
31HLTCK4BLJMXH0WM0Z3X6I40NWGVG,3X4MXAO0BHCSNG79IN3C6WACOXRRWQ,A1E9VI5RSZI31F,292,1809,1,Predicting defects using network analysis on dependency graphs,"thomas zimmermann,nachiappan nagappan","55","In software development, resources for quality assurance are limited by time and by cost. In order to allocate resources effectively, managers need to rely on their experience backed by code complexity metrics. But often dependencies exist between various pieces of code over which managers may have little knowledge. These dependencies can be construed as a low level graph of the entire system. In this paper, we propose to use network analysis on these dependency graphs. This allows managers to identify central program units that are more likely to face defects. In our evaluation on Windows Server 2003, we found that the recall for models built from network measures is by 10% points higher than for models built from complexity metrics. In addition, network measures could identify 60% of the binaries that the Windows developers considered as critical-twice as many as identified by complexity metrics.",10.1145/1368088.1368161,1,1,1,2,{},120,http://ieeexplore.ieee.org/abstract/document/4814164/
335VBRURDJOQGWR2D44J5L8VWFY9EC,3907X2AHF1TLZNTNRBAGDUU8JI62P9,AZ72Z7VU6TQCN,170,14374,15,Effectively prioritizing tests in development environment,"amitabh srivastava,jay thiagarajan","51","Software testing helps ensure not only that the software under development has been implemented correctly, but also that further development does not break it. If developers introduce new defects into the software, these should be detected as early and inexpensively as possible in the development cycle. To help optimize which tests are run at what points in the design cycle, we have built Echelon, a test prioritization system, which prioritizes the application's given set of tests, based on what changes have been made to the program.Echelon builds on the previous work on test prioritization and proposes a practical binary code based approach that scales well to large systems. Echelon utilizes a binary matching system that can accurately compute the differences at a basic block granularity between two versions of the program in binary form. Echelon utilizes a fast, simple and intuitive heuristic that works well in practice to compute what tests will cover the affected basic blocks in the program. Echelon orders the given tests to maximally cover the affected program so that defects are likely to be found quickly and inexpensively. Although the primary focus in Echelon is on program changes, other criteria can be added in computing the priorities.Echelon is part of a test effectiveness infrastructure that runs under the Windows environment. It is currently being integrated into the Microsoft software development process. Echelon has been tested on large Microsoft product binaries. The results show that Echelon is effective in ordering tests based on changes between two program versions.",doi>10.1145/566172.566187,1,1,1,2,{},330,http://dl.acm.org/citation.cfm?id=566187
335VBRURDJOQGWR2D44J5L8VWFY9EC,3EF8EXOTT2JIOR8TDU5IBFYRI1VJ1U,A3F9JBVNMQ4ZUV,189,14374,15,Effectively prioritizing tests in development environment,"amitabh srivastava,jay thiagarajan","51","Software testing helps ensure not only that the software under development has been implemented correctly, but also that further development does not break it. If developers introduce new defects into the software, these should be detected as early and inexpensively as possible in the development cycle. To help optimize which tests are run at what points in the design cycle, we have built Echelon, a test prioritization system, which prioritizes the application's given set of tests, based on what changes have been made to the program.Echelon builds on the previous work on test prioritization and proposes a practical binary code based approach that scales well to large systems. Echelon utilizes a binary matching system that can accurately compute the differences at a basic block granularity between two versions of the program in binary form. Echelon utilizes a fast, simple and intuitive heuristic that works well in practice to compute what tests will cover the affected basic blocks in the program. Echelon orders the given tests to maximally cover the affected program so that defects are likely to be found quickly and inexpensively. Although the primary focus in Echelon is on program changes, other criteria can be added in computing the priorities.Echelon is part of a test effectiveness infrastructure that runs under the Windows environment. It is currently being integrated into the Microsoft software development process. Echelon has been tested on large Microsoft product binaries. The results show that Echelon is effective in ordering tests based on changes between two program versions.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.526.8448&rep=rep1&type=pdf,1,1,1,2,{},330,http://dl.acm.org/citation.cfm?id=566187
335VBRURDJOQGWR2D44J5L8VWFYE9H,33UKMF931A8DBEG7R73WJR4V98OTT2,A2VO6V2FJEQZZ,149,20738,19,Analyzing Regression Test Selection Techniques,"gregg rothermel,mary jean harrold","67","Regression testing is a necessary but expensive maintenance activity aimed at showing that code has not been adversely affected by changes. Regression test selection techniques reuse tests from an existing test suite to test a modified program. Many regression test selection techniques have been proposed; however, it is difficult to compare and evaluate these techniques because they have different goals. This paper outlines the issues relevant to regression test selection techniques, and uses these issues as the basis for a framework within which to evaluate the techniques. We illustrate the application of our framework by using it to evaluate existing regression test selection techniques. The evaluation reveals the strengths and weaknesses of existing techniques, and highlights some problems that future work in this area should address.",http://digitalcommons.unl.edu/cgi/viewcontent.cgi?article=1013&context=csearticles,1,1,1,1|2|3|4,{},686,http://ieeexplore.ieee.org/abstract/document/536955/
335VBRURDJOQGWR2D44J5L8VWFYE9H,3G5F9DBFOQL2JXT1W8MM6QPSUEDHVT,A3F9JBVNMQ4ZUV,79,20738,19,Analyzing Regression Test Selection Techniques,"gregg rothermel,mary jean harrold","67","Regression testing is a necessary but expensive maintenance activity aimed at showing that code has not been adversely affected by changes. Regression test selection techniques reuse tests from an existing test suite to test a modified program. Many regression test selection techniques have been proposed; however, it is difficult to compare and evaluate these techniques because they have different goals. This paper outlines the issues relevant to regression test selection techniques, and uses these issues as the basis for a framework within which to evaluate the techniques. We illustrate the application of our framework by using it to evaluate existing regression test selection techniques. The evaluation reveals the strengths and weaknesses of existing techniques, and highlights some problems that future work in this area should address.",http://digitalcommons.unl.edu/cgi/viewcontent.cgi?article=1013&context=csearticles,,1,1,2,{},685,http://ieeexplore.ieee.org/abstract/document/536955/
335VBRURDJOQGWR2D44J5L8VWFYE9H,3O6CYIULEEPK38ZQMHYHB7XWVDQWUS,AZ72Z7VU6TQCN,65,20738,19,Analyzing Regression Test Selection Techniques,"gregg rothermel,mary jean harrold","67","Regression testing is a necessary but expensive maintenance activity aimed at showing that code has not been adversely affected by changes. Regression test selection techniques reuse tests from an existing test suite to test a modified program. Many regression test selection techniques have been proposed; however, it is difficult to compare and evaluate these techniques because they have different goals. This paper outlines the issues relevant to regression test selection techniques, and uses these issues as the basis for a framework within which to evaluate the techniques. We illustrate the application of our framework by using it to evaluate existing regression test selection techniques. The evaluation reveals the strengths and weaknesses of existing techniques, and highlights some problems that future work in this area should address.",DOI: 10.1109/32.536955,1,1,1,1|2,{},686,http://ieeexplore.ieee.org/abstract/document/536955/
33KGGVH24U5HXRFO4WFIE4BJE9KX1Z,3P529IW9KZ9F9WQ1NEWGGWFDN04FLE,A3F9JBVNMQ4ZUV,103,21185,19,Using Program Slicing in Software Maintenance,"keith gallagher,james r. lyle","62","Program slicing is applied to the software maintenance problem by extending the notion of a program slice (that originally required both a variable and line number) to a decomposition slice, one that captures all computation on a given variable, i.e., is independent of line numbers. Using the lattice of single variable decomposition slices ordered by set inclusion, it is shown how a slice-based decomposition for programs can be formed. One can then delineate the effects of a proposed change by isolating those effects in a single component of the decomposition. This gives maintainers a straightforward technique for determining those statements and variables which may be modified in a component and those which may not. Using the decomposition, a set of principles to prohibit changes which will interfere with unmodified components is provided. These semantically consistent changes can then be merged back into the original program in linear time.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.39.1532&rep=rep1&type=pdf,1,1,1,2,{},821,http://ieeexplore.ieee.org/abstract/document/83912/
33KGGVH24U5HXRFO4WFIE4BJE9KX1Z,3WETL7AQWUW6RV7NBWF7YYUJY3353D,AZ72Z7VU6TQCN,86,21185,19,Using Program Slicing in Software Maintenance,"keith gallagher,james r. lyle","62","Program slicing is applied to the software maintenance problem by extending the notion of a program slice (that originally required both a variable and line number) to a decomposition slice, one that captures all computation on a given variable, i.e., is independent of line numbers. Using the lattice of single variable decomposition slices ordered by set inclusion, it is shown how a slice-based decomposition for programs can be formed. One can then delineate the effects of a proposed change by isolating those effects in a single component of the decomposition. This gives maintainers a straightforward technique for determining those statements and variables which may be modified in a component and those which may not. Using the decomposition, a set of principles to prohibit changes which will interfere with unmodified components is provided. These semantically consistent changes can then be merged back into the original program in linear time.",DOI: 10.1109/32.83912,1,1,,1|2,{},821,http://ieeexplore.ieee.org/abstract/document/83912/
33KGGVH24U5HXRFO4WFIE4BJE9L1X4,3BXQMRHWK0MOYW5CIFSU29V5XT3MUI,A1665VCUSZL9YT,303,1866,1,FeedbackDirected Random Test Generation,"carlos pacheco,shuvendu k. lahiri,michael d. ernst,thomas a. ball","75","We present a technique that improves random test generation by incorporating feedback obtained from executing test inputs as they are created. Our technique builds inputs incrementally by randomly selecting a method call to apply and finding arguments from among previously-constructed inputs. As soon as an input is built, it is executed and checked against a set of contracts and filters. The result of the execution determines whether the input is redundant, illegal, contract-violating, or useful for generating more inputs. The technique outputs a test suite consisting of unit tests for the classes under test. Passing tests can be used to ensure that code contracts are preserved across program changes; failing tests (that violate one or more contract) point to potential errors that should be corrected. Our experimental results indicate that feedback-directed random test generation can outperform systematic and undirected random test generation, in terms of coverage and error detection. On four small but nontrivial data structures (used previously in the literature), our technique achieves higher or equal block and predicate coverage than model checking (with and without abstraction) and undirected random generation. On 14 large, widely-used libraries (comprising 780KLOC), feedback-directed random test generation finds many previously-unknown errors, not found by either model checking or undirected random generation.",https://doi.org/10.1109/ICSE.2007.37,1,1,1,1|2,{},193,http://dl.acm.org/citation.cfm?id=1248841
33KGGVH24U5HXRFO4WFIE4BJE9L1X4,3JPSL1DZ5TNA15CEOBQ3FN8BVQMANF,A314XJY8V1YL12,265,1866,1,FeedbackDirected Random Test Generation,"carlos pacheco,shuvendu k. lahiri,michael d. ernst,thomas a. ball","75","We present a technique that improves random test generation by incorporating feedback obtained from executing test inputs as they are created. Our technique builds inputs incrementally by randomly selecting a method call to apply and finding arguments from among previously-constructed inputs. As soon as an input is built, it is executed and checked against a set of contracts and filters. The result of the execution determines whether the input is redundant, illegal, contract-violating, or useful for generating more inputs. The technique outputs a test suite consisting of unit tests for the classes under test. Passing tests can be used to ensure that code contracts are preserved across program changes; failing tests (that violate one or more contract) point to potential errors that should be corrected. Our experimental results indicate that feedback-directed random test generation can outperform systematic and undirected random test generation, in terms of coverage and error detection. On four small but nontrivial data structures (used previously in the literature), our technique achieves higher or equal block and predicate coverage than model checking (with and without abstraction) and undirected random generation. On 14 large, widely-used libraries (comprising 780KLOC), feedback-directed random test generation finds many previously-unknown errors, not found by either model checking or undirected random generation.",https://doi.org/10.1109/ICSE.2007.37,1,1,1,1|2|3,{},545,http://dl.acm.org/citation.cfm?id=1248841
33KGGVH24U5HXRFO4WFIE4BJE9L1X4,3L0KT67Y8F48D02MCDL5H30OL5ASYA,A3F9JBVNMQ4ZUV,706,1866,1,FeedbackDirected Random Test Generation,"carlos pacheco,shuvendu k. lahiri,michael d. ernst,thomas a. ball","75","We present a technique that improves random test generation by incorporating feedback obtained from executing test inputs as they are created. Our technique builds inputs incrementally by randomly selecting a method call to apply and finding arguments from among previously-constructed inputs. As soon as an input is built, it is executed and checked against a set of contracts and filters. The result of the execution determines whether the input is redundant, illegal, contract-violating, or useful for generating more inputs. The technique outputs a test suite consisting of unit tests for the classes under test. Passing tests can be used to ensure that code contracts are preserved across program changes; failing tests (that violate one or more contract) point to potential errors that should be corrected. Our experimental results indicate that feedback-directed random test generation can outperform systematic and undirected random test generation, in terms of coverage and error detection. On four small but nontrivial data structures (used previously in the literature), our technique achieves higher or equal block and predicate coverage than model checking (with and without abstraction) and undirected random generation. On 14 large, widely-used libraries (comprising 780KLOC), feedback-directed random test generation finds many previously-unknown errors, not found by either model checking or undirected random generation.",10.1109/ICSE.2007.37,4,1,1,1|2,{},545,http://dl.acm.org/citation.cfm?id=1248841
33N1S8XHHM962MF35E33BPRUM9J1Z1,3HMVI3QICKG8JG3SZU6LL2DFVHZY1M,A2E8Q6UFDQLOJ3,313,9869,9,Fair and balanced bias in bugfix datasets,"christian bird,adrian bachmann,eirik aune,john duffy,abraham bernstein,vladimir filkov,premkumar t. devanbu","57","Software engineering researchers have long been interested in where and why bugs occur in code, and in predicting where they might turn up next. Historical bug-occurence data has been key to this research. Bug tracking systems, and code version histories, record when, how and by whom bugs were fixed; from these sources, datasets that relate file changes to bug fixes can be extracted. These historical datasets can be used to test hypotheses concerning processes of bug introduction, and also to build statistical bug prediction models. Unfortunately, processes and humans are imperfect, and only a fraction of bug fixes are actually labelled in source code version histories, and thus become available for study in the extracted datasets. The question naturally arises, are the bug fixes recorded in these historical datasets a fair representation of the full population of bug fixes? In this paper, we investigate historical data from several software projects, and find strong evidence of systematic bias. We then investigate the potential effects of ""unfair, imbalanced"" datasets on the performance of prediction techniques. We draw the lesson that bias is a critical problem that threatens both the effectiveness of processes that rely on biased datasets to build prediction models and the generalizability of hypotheses tested on biased data.",https://doi.org/10.1145/1595696.1595716,3,1,1,2,{},102,http://dl.acm.org/citation.cfm?id=1595716
33N1S8XHHM962MF35E33BPRUM9J1Z1,3MAOD8E57RYMXIK7ZLIHZVJ9W1MNX3,AAZGEO8M5ZYOB,250,9869,9,Fair and balanced bias in bugfix datasets,"christian bird,adrian bachmann,eirik aune,john duffy,abraham bernstein,vladimir filkov,premkumar t. devanbu","57","Software engineering researchers have long been interested in where and why bugs occur in code, and in predicting where they might turn up next. Historical bug-occurence data has been key to this research. Bug tracking systems, and code version histories, record when, how and by whom bugs were fixed; from these sources, datasets that relate file changes to bug fixes can be extracted. These historical datasets can be used to test hypotheses concerning processes of bug introduction, and also to build statistical bug prediction models. Unfortunately, processes and humans are imperfect, and only a fraction of bug fixes are actually labelled in source code version histories, and thus become available for study in the extracted datasets. The question naturally arises, are the bug fixes recorded in these historical datasets a fair representation of the full population of bug fixes? In this paper, we investigate historical data from several software projects, and find strong evidence of systematic bias. We then investigate the potential effects of ""unfair, imbalanced"" datasets on the performance of prediction techniques. We draw the lesson that bias is a critical problem that threatens both the effectiveness of processes that rely on biased datasets to build prediction models and the generalizability of hypotheses tested on biased data.",10.1145/1595696.1595716,3|4,2,3,1|2|3|4,{},102,http://dl.acm.org/citation.cfm?id=1595716
33N1S8XHHM962MF35E33BPRUM9J1Z1,3TY7ZAOG5G8DSMTTZW1UYPFUSY70KP,A3F9JBVNMQ4ZUV,86,9869,9,Fair and balanced bias in bugfix datasets,"christian bird,adrian bachmann,eirik aune,john duffy,abraham bernstein,vladimir filkov,premkumar t. devanbu","57","Software engineering researchers have long been interested in where and why bugs occur in code, and in predicting where they might turn up next. Historical bug-occurence data has been key to this research. Bug tracking systems, and code version histories, record when, how and by whom bugs were fixed; from these sources, datasets that relate file changes to bug fixes can be extracted. These historical datasets can be used to test hypotheses concerning processes of bug introduction, and also to build statistical bug prediction models. Unfortunately, processes and humans are imperfect, and only a fraction of bug fixes are actually labelled in source code version histories, and thus become available for study in the extracted datasets. The question naturally arises, are the bug fixes recorded in these historical datasets a fair representation of the full population of bug fixes? In this paper, we investigate historical data from several software projects, and find strong evidence of systematic bias. We then investigate the potential effects of ""unfair, imbalanced"" datasets on the performance of prediction techniques. We draw the lesson that bias is a critical problem that threatens both the effectiveness of processes that rely on biased datasets to build prediction models and the generalizability of hypotheses tested on biased data.",http://cabird.com/pubs/bird2009fbb.pdf,,1,2,1|2,{},260,http://dl.acm.org/citation.cfm?id=1595716
33W1NHWFYH97B6RC7XNDHVAPES9ZT7,39RP059MEIH92XW6IOBZXJ3H8PIBMA,AZ72Z7VU6TQCN,77,2178,1,Use of relative code churn measures to predict system defect density,"nachiappan nagappan,thomas a. ball","81","Software systems evolve over time due to changes in requirements, optimization of code, fixes for security and reliability bugs etc. Code churn, which measures the changes made to a component over a period of time, quantifies the extent of this change. We present a technique for early prediction of system defect density using a set of relative code churn measures that relate the amount of churn to other variables such as component size and the temporal extent of churn.Using statistical regression models, we show that while absolute measures of code churn are poor predictors of defect density, our set of relative measures of code churn is highly predictive of defect density. A case study performed on Windows Server 2003 indicates the validity of the relative code churn measures as early indicators of system defect density. Furthermore, our code churn metric suite is able to discriminate between fault and not fault-prone binaries with an accuracy of 89.0 percent.",DOI: 10.1109/ICSE.2005.1553571,1,1,1,2,{},545,http://ieeexplore.ieee.org/abstract/document/1553571/
33W1NHWFYH97B6RC7XNDHVAPES9ZT7,3E4GGUZ1T9FKOWW7EJ58HD89PXO2KA,A3F9JBVNMQ4ZUV,59,2178,1,Use of relative code churn measures to predict system defect density,"nachiappan nagappan,thomas a. ball","81","Software systems evolve over time due to changes in requirements, optimization of code, fixes for security and reliability bugs etc. Code churn, which measures the changes made to a component over a period of time, quantifies the extent of this change. We present a technique for early prediction of system defect density using a set of relative code churn measures that relate the amount of churn to other variables such as component size and the temporal extent of churn.Using statistical regression models, we show that while absolute measures of code churn are poor predictors of defect density, our set of relative measures of code churn is highly predictive of defect density. A case study performed on Windows Server 2003 indicates the validity of the relative code churn measures as early indicators of system defect density. Furthermore, our code churn metric suite is able to discriminate between fault and not fault-prone binaries with an accuracy of 89.0 percent.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.85.7712&rep=rep1&type=pdf,3,1,1,2,{},543,http://ieeexplore.ieee.org/abstract/document/1553571/
34KYK9TV2RWAE8BHCJ2KL870L6ABSP,3HVVDCPGTFG9S0F11DQVR8WANO4YTL,A3F9JBVNMQ4ZUV,117,2356,1,Mining Version Histories to Guide Software Changes,"thomas zimmermann,peter weissgerber,stephan diehl,andreas zeller","70","We apply data mining to version histories in order toguide programmers along related changes: ""Programmerswho changed these functions also changed. . . "". Given aset of existing changes, such rules (a) suggest and predictlikely further changes, (b) show up item coupling that is indetectableby program analysis, and (c) prevent errors dueto incomplete changes. After an initial change, our ROSEprototype can correctly predict 26% of further files to bechanged  and 15% of the precise functions or variables.The topmost three suggestions contain a correct locationwith a likelihood of 64%.",10.1109/TSE.2005.72,1,1,1,1|2,{},1110,http://ieeexplore.ieee.org/abstract/document/1463228/
34KYK9TV2RWAE8BHCJ2KL870L6ABSP,3QECW5O0KIPBQC5HQBLYGBYHT52T5B,A2VO6V2FJEQZZ,107,2356,1,Mining Version Histories to Guide Software Changes,"thomas zimmermann,peter weissgerber,stephan diehl,andreas zeller","70","We apply data mining to version histories in order toguide programmers along related changes: ""Programmerswho changed these functions also changed. . . "". Given aset of existing changes, such rules (a) suggest and predictlikely further changes, (b) show up item coupling that is indetectableby program analysis, and (c) prevent errors dueto incomplete changes. After an initial change, our ROSEprototype can correctly predict 26% of further files to bechanged  and 15% of the precise functions or variables.The topmost three suggestions contain a correct locationwith a likelihood of 64%.","http://222.252.30.203:8888/bitstream/123456789/10409/1/429-455..Software%20Engineering,%20IEEE%20Transactions.%20Vol.31.Iss.6.A.2.pdf",1,1,1,1|2|3,{},1110,http://ieeexplore.ieee.org/abstract/document/1463228/?reload=true
34O39PNDK6WYDTB4XU2FVY24Z4RBR1,3NAPMVF0ZX3WTHPNVPGZD83NJBS274,A2BQ3DT66XFZ2C,760,19048,18,Objectoriented metrics that predict maintainability,"wei li 0014,sallie m. henry","79",None,https://doi.org/10.1016/0164-1212(93)90077-B,3,1,1,1|5,{},1123,http://www.sciencedirect.com/science/article/pii/016412129390077B
34O39PNDK6WYDTB4XU2FVY24Z4RBR1,3WAKVUDHUX45DTYPE9Q5JRYF24DU7K,A3F9JBVNMQ4ZUV,51,19048,18,Objectoriented metrics that predict maintainability,"wei li 0014,sallie m. henry","79",None,http://eprints.cs.vt.edu/archive/00000347/01/TR-93-05.pdf,1|4,1,1,1|2,{},1123,http://www.sciencedirect.com/science/article/pii/016412129390077B
34O39PNDK6WYDTB4XU2FVY24Z4RBR1,3WZ36BJEV44DFSMQRLCBJXY92I8BTB,A1ODVXVCDHOVF1,166,19048,18,Objectoriented metrics that predict maintainability,"wei li 0014,sallie m. henry","79",None,10.1016/0164-1212(93)90077-B,3|4,1,1,2,"Need to re-do hit interface so hit cannot be submitted without ticking all Circle Boxes I think. Highly likely I've submitted a couple without Qualitative/Quantitative ticked.May also need way to hide instructions. Screenspace is precious for high volume turkers.",1123,http://www.sciencedirect.com/science/article/pii/016412129390077B?via%3Dihub
34OWYT6U3W52W1TO9NUAQ06NO859IL,3OF2M9AATHCAU7ZJ3QEM4OIGAN9KZK,AZ72Z7VU6TQCN,275,1907,1,Detection of Duplicate Defect Reports Using Natural Language Processing,"per runeson,magnus alexandersson,oskar nyholm","45","Defect reports are generated from various testing and development activities in software engineering. Sometimes two reports are submitted that describe the same problem, leading to duplicate reports. These reports are mostly written in structured natural language, and as such, it is hard to compare two reports for similarity with formal methods. In order to identify duplicates, we investigate using Natural Language Processing (NLP) techniques to support the identification. A prototype tool is developed and evaluated in a case study analyzing defect reports at Sony Ericsson Mobile Communications. The evaluation shows that about 2/3 of the duplicates can possibly be found using the NLP techniques. Different variants of the techniques provide only minor result differences, indicating a robust technology. User testing shows that the overall attitude towards the technique is positive and that it has a growth potential.",doi>10.1109/ICSE.2007.32,1,,1,2|3,{},360,http://dl.acm.org/citation.cfm?id=1248882
34OWYT6U3W52W1TO9NUAQ06NO859IL,3QXNC7EIPJJTBQA2VZA58G1EH4P90Y,A3F9JBVNMQ4ZUV,88,1907,1,Detection of Duplicate Defect Reports Using Natural Language Processing,"per runeson,magnus alexandersson,oskar nyholm","45","Defect reports are generated from various testing and development activities in software engineering. Sometimes two reports are submitted that describe the same problem, leading to duplicate reports. These reports are mostly written in structured natural language, and as such, it is hard to compare two reports for similarity with formal methods. In order to identify duplicates, we investigate using Natural Language Processing (NLP) techniques to support the identification. A prototype tool is developed and evaluated in a case study analyzing defect reports at Sony Ericsson Mobile Communications. The evaluation shows that about 2/3 of the duplicates can possibly be found using the NLP techniques. Different variants of the techniques provide only minor result differences, indicating a robust technology. User testing shows that the overall attitude towards the technique is positive and that it has a growth potential.",https://www.researchgate.net/profile/Per_Runeson/publication/4251355_Detection_of_Duplicate_Defect_Reports_Using_Natural_Language_Processing/links/5648d7ac08ae451880aea195.pdf,1|3,1,1,1|2,{},360,http://dl.acm.org/citation.cfm?id=1248882
34OWYT6U3W52W1TO9NUAQ06NO859IL,3Z3ZLGNNSJIVKHQLVO3AW9PAUIJQ36,AMGQ3YEAMC3Z2,309,1907,1,Detection of Duplicate Defect Reports Using Natural Language Processing,"per runeson,magnus alexandersson,oskar nyholm","45","Defect reports are generated from various testing and development activities in software engineering. Sometimes two reports are submitted that describe the same problem, leading to duplicate reports. These reports are mostly written in structured natural language, and as such, it is hard to compare two reports for similarity with formal methods. In order to identify duplicates, we investigate using Natural Language Processing (NLP) techniques to support the identification. A prototype tool is developed and evaluated in a case study analyzing defect reports at Sony Ericsson Mobile Communications. The evaluation shows that about 2/3 of the duplicates can possibly be found using the NLP techniques. Different variants of the techniques provide only minor result differences, indicating a robust technology. User testing shows that the overall attitude towards the technique is positive and that it has a growth potential.",https://doi.org/10.1109/ICSE.2007.32,3,1,1,2,{},96,http://dl.acm.org/citation.cfm?id=1248882
34R0BODSP1N7F9PQAER2T53TAJFE5Q,32Q90QCQ1T9CJC8N7309JEHYMZGKEU,A3F9JBVNMQ4ZUV,82,20409,19,Prioritizing Test Cases For Regression Testing,"gregg rothermel,roland h. untch,chengyun chu,mary jean harrold","92","Test case prioritization techniques schedule test cases for execution in an order that attempts to increase their effectiveness at meeting some performance goal. Various goals are possible; one involves rate of fault detectiona measure of how quickly faults are detected within the testing process. An improved rate of fault detection during testing can provide faster feedback on the system under test and let software engineers begin correcting faults earlier than might otherwise be possible. One application of prioritization techniques involves regression testingthe retesting of software following modifications; in this context, prioritization techniques can take advantage of information gathered about the previous execution of test cases to obtain test case orderings. In this paper, we describe several techniques for using test execution information to prioritize test cases for regression testing, including: 1) techniques that order test cases based on their total coverage of code components, 2) techniques that order test cases based on their coverage of code components not previously covered, and 3) techniques that order test cases based on their estimated ability to reveal faults in the code components that they cover. We report the results of several experiments in which we applied these techniques to various test suites for various programs and measured the rates of fault detection achieved by the prioritized test suites, comparing those rates to the rates achieved by untreated, randomly ordered, and optimally ordered suites. Analysis of the data shows that each of the prioritization techniques studied improved the rate of fault detection of test suites, and this improvement occurred even with the least expensive of those techniques. The data also shows, however, that considerable room remains for improvement. The studies highlight several cost-benefit trade-offs among the techniques studied, as well as several opportunities for future work.",http://digitalcommons.unl.edu/cgi/viewcontent.cgi?article=1017&context=csearticles,1,1,1,2,{},1076,http://ieeexplore.ieee.org/abstract/document/962562/
34R0BODSP1N7F9PQAER2T53TAJFE5Q,333U7HK6IA3CGMO5TNPDCHZ07APJDZ,AZ72Z7VU6TQCN,70,20409,19,Prioritizing Test Cases For Regression Testing,"gregg rothermel,roland h. untch,chengyun chu,mary jean harrold","92","Test case prioritization techniques schedule test cases for execution in an order that attempts to increase their effectiveness at meeting some performance goal. Various goals are possible; one involves rate of fault detectiona measure of how quickly faults are detected within the testing process. An improved rate of fault detection during testing can provide faster feedback on the system under test and let software engineers begin correcting faults earlier than might otherwise be possible. One application of prioritization techniques involves regression testingthe retesting of software following modifications; in this context, prioritization techniques can take advantage of information gathered about the previous execution of test cases to obtain test case orderings. In this paper, we describe several techniques for using test execution information to prioritize test cases for regression testing, including: 1) techniques that order test cases based on their total coverage of code components, 2) techniques that order test cases based on their coverage of code components not previously covered, and 3) techniques that order test cases based on their estimated ability to reveal faults in the code components that they cover. We report the results of several experiments in which we applied these techniques to various test suites for various programs and measured the rates of fault detection achieved by the prioritized test suites, comparing those rates to the rates achieved by untreated, randomly ordered, and optimally ordered suites. Analysis of the data shows that each of the prioritization techniques studied improved the rate of fault detection of test suites, and this improvement occurred even with the least expensive of those techniques. The data also shows, however, that considerable room remains for improvement. The studies highlight several cost-benefit trade-offs among the techniques studied, as well as several opportunities for future work.",DOI: 10.1109/32.962562,1,1,1,1|2,{},1076,http://ieeexplore.ieee.org/abstract/document/962562/
34R0BODSP1N7F9PQAER2T53TAJFE5Q,3DYGAII7PMW2R6V8TM0H9CSBZOIQP9,A314XJY8V1YL12,165,20409,19,Prioritizing Test Cases For Regression Testing,"gregg rothermel,roland h. untch,chengyun chu,mary jean harrold","92","Test case prioritization techniques schedule test cases for execution in an order that attempts to increase their effectiveness at meeting some performance goal. Various goals are possible; one involves rate of fault detectiona measure of how quickly faults are detected within the testing process. An improved rate of fault detection during testing can provide faster feedback on the system under test and let software engineers begin correcting faults earlier than might otherwise be possible. One application of prioritization techniques involves regression testingthe retesting of software following modifications; in this context, prioritization techniques can take advantage of information gathered about the previous execution of test cases to obtain test case orderings. In this paper, we describe several techniques for using test execution information to prioritize test cases for regression testing, including: 1) techniques that order test cases based on their total coverage of code components, 2) techniques that order test cases based on their coverage of code components not previously covered, and 3) techniques that order test cases based on their estimated ability to reveal faults in the code components that they cover. We report the results of several experiments in which we applied these techniques to various test suites for various programs and measured the rates of fault detection achieved by the prioritized test suites, comparing those rates to the rates achieved by untreated, randomly ordered, and optimally ordered suites. Analysis of the data shows that each of the prioritization techniques studied improved the rate of fault detection of test suites, and this improvement occurred even with the least expensive of those techniques. The data also shows, however, that considerable room remains for improvement. The studies highlight several cost-benefit trade-offs among the techniques studied, as well as several opportunities for future work.",https://doi.org/10.1109/32.962562,1,1,1,1|2,{},1076,http://ieeexplore.ieee.org/abstract/document/962562/
34YWR3PJ28YHQ2U68DBI0ZS99HEX0W,3570Y55XZQ75NVTVHDROSPHLXU1YGH,A3F9JBVNMQ4ZUV,185,3653,1,Software Processes Are Software Too,leon j. osterweil,"62",None,https://pdfs.semanticscholar.org/1bab/9183571e01e140d10b1c840d005d1c7ad872.pdf,3,1,2,1|2|4,{},1315,http://dl.acm.org/citation.cfm?id=41766
34YWR3PJ28YHQ2U68DBI0ZS99HEX0W,3B2X28YI3X37DUBEV84I8N6VIIKB63,AZ72Z7VU6TQCN,174,3653,1,Software Processes Are Software Too,leon j. osterweil,"62",None,no doi no,1,1,1,2,{},1315,http://dl.acm.org/citation.cfm?id=41766
359AP8GAGG875FJV2G0411HMGDX7C5,39PAAFCODNOSO6KWW23BK9SG558TV9,AA2O932UNAZA1,288,1985,1,Who should fix this bug,"john anvik,lyndon hiew,gail c. murphy","95","Open source development projects typically support an open bug repository to which both developers and users can report bugs. The reports that appear in this repository must be triaged to determine if the report is one which requires attention and if it is, which developer will be assigned the responsibility of resolving the report. Large open source developments are burdened by the rate at which new bug reports appear in the bug repository. In this paper, we present a semi-automated approach intended to ease one part of this process, the assignment of reports to a developer. Our approach applies a machine learning algorithm to the open bug repository to learn the kinds of reports each developer resolves. When a new report arrives, the classifier produced by the machine learning technique suggests a small number of developers suitable to resolve the report. With this approach, we have reached precision levels of 57% and 64% on the Eclipse and Firefox development projects respectively. We have also applied our approach to the gcc open source development with less positive results. We describe the conditions under which the approach is applicable and also report on the lessons we learned about applying machine learning to repositories used in open source development.",10.1145/1134285.1134336,1,1,1,2,{},205,http://dl.acm.org/citation.cfm?id=1134336
359AP8GAGG875FJV2G0411HMGDX7C5,3E4GGUZ1T9FKOWW7EJ58HD89PZ52KV,AVT70WXOWRHGI,332,1985,1,Who should fix this bug,"john anvik,lyndon hiew,gail c. murphy","95","Open source development projects typically support an open bug repository to which both developers and users can report bugs. The reports that appear in this repository must be triaged to determine if the report is one which requires attention and if it is, which developer will be assigned the responsibility of resolving the report. Large open source developments are burdened by the rate at which new bug reports appear in the bug repository. In this paper, we present a semi-automated approach intended to ease one part of this process, the assignment of reports to a developer. Our approach applies a machine learning algorithm to the open bug repository to learn the kinds of reports each developer resolves. When a new report arrives, the classifier produced by the machine learning technique suggests a small number of developers suitable to resolve the report. With this approach, we have reached precision levels of 57% and 64% on the Eclipse and Firefox development projects respectively. We have also applied our approach to the gcc open source development with less positive results. We describe the conditions under which the approach is applicable and also report on the lessons we learned about applying machine learning to repositories used in open source development.",10.1145/1134285.1134336,4,1,2,4,{},205,http://dl.acm.org/citation.cfm?id=1134336
359AP8GAGG875FJV2G0411HMGDX7C5,3WYP994K18F3Q24P50I2GY4W3HUY6D,A3F9JBVNMQ4ZUV,151,1985,1,Who should fix this bug,"john anvik,lyndon hiew,gail c. murphy","95","Open source development projects typically support an open bug repository to which both developers and users can report bugs. The reports that appear in this repository must be triaged to determine if the report is one which requires attention and if it is, which developer will be assigned the responsibility of resolving the report. Large open source developments are burdened by the rate at which new bug reports appear in the bug repository. In this paper, we present a semi-automated approach intended to ease one part of this process, the assignment of reports to a developer. Our approach applies a machine learning algorithm to the open bug repository to learn the kinds of reports each developer resolves. When a new report arrives, the classifier produced by the machine learning technique suggests a small number of developers suitable to resolve the report. With this approach, we have reached precision levels of 57% and 64% on the Eclipse and Firefox development projects respectively. We have also applied our approach to the gcc open source development with less positive results. We describe the conditions under which the approach is applicable and also report on the lessons we learned about applying machine learning to repositories used in open source development.",https://pdfs.semanticscholar.org/faa2/f56920676a677d5961470ea17f28981786cc.pdf,1,1,1,1|2,{},730,http://dl.acm.org/citation.cfm?id=1134336
36AZSFEYZ4OQ60SL6E7PWVR7KA4BVU,3570Y55XZQ75NVTVHDROSPHLXUOGYM,A3F9JBVNMQ4ZUV,144,2565,1,Tracking down software bugs using automatic anomaly detection,"sudheendra hangal,monica s. lam","62","This paper introduces DIDUCE, a practical and effective tool that aids programmers in detecting complex program errors and identifying their root causes. By instrumenting a program and observing its behavior as it runs, DIDUCE dynamically formulates hypotheses of invariants obeyed by the program. DIDUCE hypothesizes the strictest invariants at the beginning, and gradually relaxes the hypothesis as violations are detected to allow for new behavior. The violations reported help users to catch software bugs as soon as they occur. They also give programmers new visibility into the behavior of the programs such as identifying rare corner cases in the program logic or even locating hidden errors that corrupt the program's results.We implemented the DIDUCE system for Java programs and applied it to four programs of significant size and complexity. DIDUCE succeeded in identifying the root causes of programming errors in each of the programs quickly and automatically. In particular, DIDUCE is effective in isolating a timing-dependent bug in a released JSSE (Java Secure Socket Extension) library, which would have taken an experienced programmer days to find. Our experience suggests that detecting and checking program invariants dynamically is a simple and effective methodology for debugging many different kinds of program errors across a wide variety of application domains.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.121.6659&rep=rep1&type=pdf,1,1,1,2,{},662,http://dl.acm.org/citation.cfm?id=581377
36AZSFEYZ4OQ60SL6E7PWVR7KA4BVU,3EICBYG645K2BUIRTRU2SBHIMH9JC9,AZ72Z7VU6TQCN,78,2565,1,Tracking down software bugs using automatic anomaly detection,"sudheendra hangal,monica s. lam","62","This paper introduces DIDUCE, a practical and effective tool that aids programmers in detecting complex program errors and identifying their root causes. By instrumenting a program and observing its behavior as it runs, DIDUCE dynamically formulates hypotheses of invariants obeyed by the program. DIDUCE hypothesizes the strictest invariants at the beginning, and gradually relaxes the hypothesis as violations are detected to allow for new behavior. The violations reported help users to catch software bugs as soon as they occur. They also give programmers new visibility into the behavior of the programs such as identifying rare corner cases in the program logic or even locating hidden errors that corrupt the program's results.We implemented the DIDUCE system for Java programs and applied it to four programs of significant size and complexity. DIDUCE succeeded in identifying the root causes of programming errors in each of the programs quickly and automatically. In particular, DIDUCE is effective in isolating a timing-dependent bug in a released JSSE (Java Secure Socket Extension) library, which would have taken an experienced programmer days to find. Our experience suggests that detecting and checking program invariants dynamically is a simple and effective methodology for debugging many different kinds of program errors across a wide variety of application domains.",doi>10.1145/581339.581377,1,1,1,1|2,{},663,http://dl.acm.org/citation.cfm?id=581377
36GJS3V78VED6M025BLKUI7A50PJGY,3QXNC7EIPJJTBQA2VZA58G1EH4F90O,A3F9JBVNMQ4ZUV,266,20079,19,Empirical Validation of ObjectOriented Metrics on Open Source Software for Fault Prediction,"tibor gyimothy,rudolf ferenc,istvan siket","52","Open source software systems are becoming increasingly important these days. Many companies are investing in open source projects and lots of them are also using such software in their own work. But, because open source software is often developed with a different management style than the industrial ones, the quality and reliability of the code needs to be studied. Hence, the characteristics of the source code of these projects need to be measured to obtain more information about it. This paper describes how we calculated the object-oriented metrics given by Chidamber and Kemerer to illustrate how fault-proneness detection of the source code of the open source Web and e-mail suite called Mozilla can be carried out. We checked the values obtained against the number of bugs found in its bug databasecalled Bugzillausing regression and machine learning methods to validate the usefulness of these metrics for fault-proneness prediction. We also compared the metrics of several versions of Mozilla to see how the predicted fault-proneness of the software system changed during its development cycle.",http://flosshub.org/system/files/Gyimothy.pdf,1|3,1,1,2,{},726,http://ieeexplore.ieee.org/abstract/document/1542070/
36GJS3V78VED6M025BLKUI7A50PJGY,3RXPCZQMQQZ8XPIS5OKFE26BQBMG1Z,A1ODVXVCDHOVF1,182,20079,19,Empirical Validation of ObjectOriented Metrics on Open Source Software for Fault Prediction,"tibor gyimothy,rudolf ferenc,istvan siket","52","Open source software systems are becoming increasingly important these days. Many companies are investing in open source projects and lots of them are also using such software in their own work. But, because open source software is often developed with a different management style than the industrial ones, the quality and reliability of the code needs to be studied. Hence, the characteristics of the source code of these projects need to be measured to obtain more information about it. This paper describes how we calculated the object-oriented metrics given by Chidamber and Kemerer to illustrate how fault-proneness detection of the source code of the open source Web and e-mail suite called Mozilla can be carried out. We checked the values obtained against the number of bugs found in its bug databasecalled Bugzillausing regression and machine learning methods to validate the usefulness of these metrics for fault-proneness prediction. We also compared the metrics of several versions of Mozilla to see how the predicted fault-proneness of the software system changed during its development cycle.",10.1109/TSE.2005.112,2,,1,2,{},726,http://ieeexplore.ieee.org/abstract/document/1542070/
36GJS3V78VED6M025BLKUI7A50PJGY,3ZSANO2JCGV2D9LR7NTHSIT8GG6SF8,AZ72Z7VU6TQCN,88,20079,19,Empirical Validation of ObjectOriented Metrics on Open Source Software for Fault Prediction,"tibor gyimothy,rudolf ferenc,istvan siket","52","Open source software systems are becoming increasingly important these days. Many companies are investing in open source projects and lots of them are also using such software in their own work. But, because open source software is often developed with a different management style than the industrial ones, the quality and reliability of the code needs to be studied. Hence, the characteristics of the source code of these projects need to be measured to obtain more information about it. This paper describes how we calculated the object-oriented metrics given by Chidamber and Kemerer to illustrate how fault-proneness detection of the source code of the open source Web and e-mail suite called Mozilla can be carried out. We checked the values obtained against the number of bugs found in its bug databasecalled Bugzillausing regression and machine learning methods to validate the usefulness of these metrics for fault-proneness prediction. We also compared the metrics of several versions of Mozilla to see how the predicted fault-proneness of the software system changed during its development cycle.",DOI: 10.1109/TSE.2005.112,1|2,1,1,1|2,{},728,http://ieeexplore.ieee.org/abstract/document/1542070/
36MUZ9VAE6Q2JM4JPK9LRHRLN0DEDY,3FDJT1UU75WCNTFUW276FKBL98M5KN,A1ODVXVCDHOVF1,74,2455,1,Automated Support for Classifying Software Failure Reports,"andy podgurski,david leon,patrick francis,wes masri,melinda minch,jiayang sun,bin wang","49",This paper proposes automated support for classifying reported software failures in order to facilitate prioritizing them and diagnosing their causes. A classification strategy is presented that involves the use of supervised and unsupervised pattern classification and multivariate visualization. These techniques are applied to profiles of failed executions in order to group together failures with the same or similar causes. The resulting classification is then used to assess the frequency and severity of failures caused by particular defects and to help diagnose those defects. The results of applying the proposed classification strategy to failures of three large subject programs are reported. These results indicate that the strategy can be effective.,10.1109/ICSE.2003.1201224,3,1,,2,{},293,http://ieeexplore.ieee.org/abstract/document/1201224/
36MUZ9VAE6Q2JM4JPK9LRHRLN0DEDY,3GU1KF0O4JPFN0TJA43RENXCDVHPBA,AZ72Z7VU6TQCN,261,2455,1,Automated Support for Classifying Software Failure Reports,"andy podgurski,david leon,patrick francis,wes masri,melinda minch,jiayang sun,bin wang","49",This paper proposes automated support for classifying reported software failures in order to facilitate prioritizing them and diagnosing their causes. A classification strategy is presented that involves the use of supervised and unsupervised pattern classification and multivariate visualization. These techniques are applied to profiles of failed executions in order to group together failures with the same or similar causes. The resulting classification is then used to assess the frequency and severity of failures caused by particular defects and to help diagnose those defects. The results of applying the proposed classification strategy to failures of three large subject programs are reported. These results indicate that the strategy can be effective.,DOI: 10.1109/ICSE.2003.1201224,1,1,1,1|2,{},293,http://ieeexplore.ieee.org/abstract/document/1201224/
36MUZ9VAE6Q2JM4JPK9LRHRLN0DEDY,3MHW492WW11OBBUCN52ZYVXOBZFMV8,A3F9JBVNMQ4ZUV,88,2455,1,Automated Support for Classifying Software Failure Reports,"andy podgurski,david leon,patrick francis,wes masri,melinda minch,jiayang sun,bin wang","49",This paper proposes automated support for classifying reported software failures in order to facilitate prioritizing them and diagnosing their causes. A classification strategy is presented that involves the use of supervised and unsupervised pattern classification and multivariate visualization. These techniques are applied to profiles of failed executions in order to group together failures with the same or similar causes. The resulting classification is then used to assess the frequency and severity of failures caused by particular defects and to help diagnose those defects. The results of applying the proposed classification strategy to failures of three large subject programs are reported. These results indicate that the strategy can be effective.,https://www.researchgate.net/profile/Jiayang_Sun/publication/4016737_Automated_support_for_classifying_software_failure_reports/links/0deec518a61cccd007000000.pdf,,1,2,2,{},293,http://ieeexplore.ieee.org/abstract/document/1201224/
371Q3BEXDHX6W6EXIXIN7QE3C9VZSI,3SUWZRL0MZ15KXNY5Z689VCGL5ME6B,A3F9JBVNMQ4ZUV,328,23877,20,The 41 View Model of Architecture,philippe kruchten,"99","The 4 + 1 View Model describes software architecture using five concurrent views, each of which addresses a specific set of concerns: The logical view describes the design's object model, the process view describes the design's concurrency and synchronization aspects; the physical view describes the mapping of the software onto the hardware and shows the system's distributed aspects, and the development view describes the software's static organization in the development environment. Software designers can organize the description of their architectural decisions around these four views and then illustrate them with a few selected use cases, or scenarios, which constitute a fifth view. The architecture is partially evolved from these scenarios.The 4+1 View Model allows various stakeholders to find what they need in the software architecture. System engineers can approach it first from the physical view, then the process view; end users, customers, and data specialists can approach it from the logical view; and project managers and software-configuration staff members can approach it from the development view.",10.1109/52.469759,,1,1,2|4,{},639,http://ieeexplore.ieee.org/document/469759/
371Q3BEXDHX6W6EXIXIN7QE3C9VZSI,3TESA3PJ32Y5LO039D18BZEBK86MMY,AMGQ3YEAMC3Z2,121,23877,20,The 41 View Model of Architecture,philippe kruchten,"99","The 4 + 1 View Model describes software architecture using five concurrent views, each of which addresses a specific set of concerns: The logical view describes the design's object model, the process view describes the design's concurrency and synchronization aspects; the physical view describes the mapping of the software onto the hardware and shows the system's distributed aspects, and the development view describes the software's static organization in the development environment. Software designers can organize the description of their architectural decisions around these four views and then illustrate them with a few selected use cases, or scenarios, which constitute a fifth view. The architecture is partially evolved from these scenarios.The 4+1 View Model allows various stakeholders to find what they need in the software architecture. System engineers can approach it first from the physical view, then the process view; end users, customers, and data specialists can approach it from the logical view; and project managers and software-configuration staff members can approach it from the development view.",10.1109/52.469759,4,1,1,2,{},651,http://ieeexplore.ieee.org/abstract/document/469759/
375VSR8FVWXUVREK38IIHG97Q7CZRU,30JNVC0ORA8AEPXKA9SC03QKDT6HQL,AZ72Z7VU6TQCN,65,20316,19,Preliminary Guidelines for Empirical Research in Software Engineering,"barbara a. kitchenham,shari lawrence pfleeger,lesley pickard,peter jones,david c. hoaglin,khaled el emam,jarrett rosenberg","99","Empirical software engineering research needs research guidelines to improve the research and reporting processes. We propose a preliminary set of research guidelines aimed at stimulating discussion among software researchers. They are based on a review of research guidelines developed for medical researchers and on our own experience in doing and reviewing software engineering research. The guidelines are intended to assist researchers, reviewers, and meta-analysts in designing, conducting, and evaluating empirical studies. Editorial boards of software engineering journals may wish to use our recommendations as a basis for developing guidelines for reviewers and for framing policies for dealing with the design, data collection, and analysis and reporting of empirical studies.",DOI: 10.1109/TSE.2002.1027796,1,1,1,1|2,{},464,http://ieeexplore.ieee.org/abstract/document/1027796/
375VSR8FVWXUVREK38IIHG97Q7CZRU,39ASUFLU6YVI3C7U6MFY98P0I8QXER,A3F9JBVNMQ4ZUV,103,20316,19,Preliminary Guidelines for Empirical Research in Software Engineering,"barbara a. kitchenham,shari lawrence pfleeger,lesley pickard,peter jones,david c. hoaglin,khaled el emam,jarrett rosenberg","99","Empirical software engineering research needs research guidelines to improve the research and reporting processes. We propose a preliminary set of research guidelines aimed at stimulating discussion among software researchers. They are based on a review of research guidelines developed for medical researchers and on our own experience in doing and reviewing software engineering research. The guidelines are intended to assist researchers, reviewers, and meta-analysts in designing, conducting, and evaluating empirical studies. Editorial boards of software engineering journals may wish to use our recommendations as a basis for developing guidelines for reviewers and for framing policies for dealing with the design, data collection, and analysis and reporting of empirical studies.",http://www.ehealthinformation.ca/wp-content/uploads/2014/07/2001-Preliminary-Guidelines-for-Empirical-Research.pdf,3,1,2,1|2,{},1259,http://ieeexplore.ieee.org/abstract/document/1027796/
375VSR8FVWXUVREK38IIHG97Q7CZRU,3KAKFY4PGVQI3J22IGY1N7YO3CMI3N,A30M7MYW1BHQN1,294,20316,19,Preliminary Guidelines for Empirical Research in Software Engineering,"barbara a. kitchenham,shari lawrence pfleeger,lesley pickard,peter jones,david c. hoaglin,khaled el emam,jarrett rosenberg","99","Empirical software engineering research needs research guidelines to improve the research and reporting processes. We propose a preliminary set of research guidelines aimed at stimulating discussion among software researchers. They are based on a review of research guidelines developed for medical researchers and on our own experience in doing and reviewing software engineering research. The guidelines are intended to assist researchers, reviewers, and meta-analysts in designing, conducting, and evaluating empirical studies. Editorial boards of software engineering journals may wish to use our recommendations as a basis for developing guidelines for reviewers and for framing policies for dealing with the design, data collection, and analysis and reporting of empirical studies.",10.1109/TSE.2002.1027796,1,2,1,2|3,{},1259,http://ieeexplore.ieee.org/abstract/document/1027796/
37J05LC5AX7AU2QB3LKCOX4DS89JDO,39GHHAVOMGFZGQ5C0COK9D5UV7J4JF,AZ72Z7VU6TQCN,64,20913,19,Requirements Specification for ProcessControl Systems,"nancy g. leveson,mats per erik heimdahl,holly hildreth,jon damon reese","56","The paper describes an approach to writing requirements specifications for process-control systems, a specification language that supports this approach, and an example application of the approach and the language on an industrial aircraft collision avoidance system (TCAS II). The example specification demonstrates: the practicality of writing a formal requirements specification for a complex, process-control system; and the feasibility of building a formal model of a system using a specification language that is readable and reviewable by application experts who are not computer scientists or mathematicians. Some lessons learned in the process of this work, which are applicable both to forward and reverse engineering, are also presented.",DOI: 10.1109/32.317428,1,1,1,1|2,{},685,http://ieeexplore.ieee.org/abstract/document/317428/
37J05LC5AX7AU2QB3LKCOX4DS89JDO,3WSELTNVR4Q8WIHYL7CFOME3KX8ATU,A3F9JBVNMQ4ZUV,81,20913,19,Requirements Specification for ProcessControl Systems,"nancy g. leveson,mats per erik heimdahl,holly hildreth,jon damon reese","56","The paper describes an approach to writing requirements specifications for process-control systems, a specification language that supports this approach, and an example application of the approach and the language on an industrial aircraft collision avoidance system (TCAS II). The example specification demonstrates: the practicality of writing a formal requirements specification for a complex, process-control system; and the feasibility of building a formal model of a system using a specification language that is readable and reviewable by application experts who are not computer scientists or mathematicians. Some lessons learned in the process of this work, which are applicable both to forward and reverse engineering, are also presented.",https://www.researchgate.net/profile/Mats_Heimdahl/publication/3187673_Requirements_Specification_For_Process-Control_Systems/links/0deec525c7b884bf6c000000.pdf,4,1,2,1|2,{},685,http://ieeexplore.ieee.org/abstract/document/317428/
37M4O367VJ65RXH3RCFL6D82JL6M5N,31JLPPHS2VISZ5D5GBB674UAFH63OG,A3KFX4FS1SANOS,475,10133,9,DynaMine finding common error patterns by mining software revision histories,"v. benjamin livshits,thomas zimmermann","46","A great deal of attention has lately been given to addressing software bugs such as errors in operating system drivers or security bugs. However, there are many other lesser known errors specific to individual applications or APIs and these violations of application-specific coding rules are responsible for a multitude of errors. In this paper we propose DynaMine, a tool that analyzes source code check-ins to find highly correlated method calls as well as common bug fixes in order to automatically discover application-specific coding patterns. Potential patterns discovered through mining are passed to a dynamic analysis tool for validation; finally, the results of dynamic analysis are presented to the user.The combination of revision history mining and dynamic analysis techniques leveraged in DynaMine proves effective for both discovering new application-specific patterns and for finding errors when applied to very large applications with many man-years of development and debugging effort behind them. We have analyzed Eclipse and jEdit, two widely-used, mature, highly extensible applications consisting of more than 3,600,000 lines of code combined. By mining revision histories, we have discovered 56 previously unknown, highly application-specific patterns. Out of these, 21 were dynamically confirmed as very likely valid patterns and a total of 263 pattern violations were found.",doi>10.1145/1095430.1081754,1,2,2,2,{},339,http://dl.acm.org/citation.cfm?id=1081754
37M4O367VJ65RXH3RCFL6D82JL6M5N,3COPXFW7XC0GG3XDGHGKDQG207LKPK,A3F9JBVNMQ4ZUV,66,10133,9,DynaMine finding common error patterns by mining software revision histories,"v. benjamin livshits,thomas zimmermann","46","A great deal of attention has lately been given to addressing software bugs such as errors in operating system drivers or security bugs. However, there are many other lesser known errors specific to individual applications or APIs and these violations of application-specific coding rules are responsible for a multitude of errors. In this paper we propose DynaMine, a tool that analyzes source code check-ins to find highly correlated method calls as well as common bug fixes in order to automatically discover application-specific coding patterns. Potential patterns discovered through mining are passed to a dynamic analysis tool for validation; finally, the results of dynamic analysis are presented to the user.The combination of revision history mining and dynamic analysis techniques leveraged in DynaMine proves effective for both discovering new application-specific patterns and for finding errors when applied to very large applications with many man-years of development and debugging effort behind them. We have analyzed Eclipse and jEdit, two widely-used, mature, highly extensible applications consisting of more than 3,600,000 lines of code combined. By mining revision histories, we have discovered 56 previously unknown, highly application-specific patterns. Out of these, 21 were dynamically confirmed as very likely valid patterns and a total of 263 pattern violations were found.",https://suif.stanford.edu/papers/fse05.pdf,1|3,1,1,1|2,{},339,http://dl.acm.org/citation.cfm?id=1081754
37M4O367VJ65RXH3RCFL6D82JL6M5N,3QBD8R3Z227DH1W9GPGPH9MGU1TO4I,AZ72Z7VU6TQCN,75,10133,9,DynaMine finding common error patterns by mining software revision histories,"v. benjamin livshits,thomas zimmermann","46","A great deal of attention has lately been given to addressing software bugs such as errors in operating system drivers or security bugs. However, there are many other lesser known errors specific to individual applications or APIs and these violations of application-specific coding rules are responsible for a multitude of errors. In this paper we propose DynaMine, a tool that analyzes source code check-ins to find highly correlated method calls as well as common bug fixes in order to automatically discover application-specific coding patterns. Potential patterns discovered through mining are passed to a dynamic analysis tool for validation; finally, the results of dynamic analysis are presented to the user.The combination of revision history mining and dynamic analysis techniques leveraged in DynaMine proves effective for both discovering new application-specific patterns and for finding errors when applied to very large applications with many man-years of development and debugging effort behind them. We have analyzed Eclipse and jEdit, two widely-used, mature, highly extensible applications consisting of more than 3,600,000 lines of code combined. By mining revision histories, we have discovered 56 previously unknown, highly application-specific patterns. Out of these, 21 were dynamically confirmed as very likely valid patterns and a total of 263 pattern violations were found.",doi>10.1145/1081706.1081754,1,1,1,2|3,{},340,http://dl.acm.org/citation.cfm?id=1081754
37VUR2VJ6ADTUT4TD0JV0RQ9DRXC1D,3S06PH7KSSS5L5813YJ78H3EDIMD10,A3F9JBVNMQ4ZUV,78,31766,28,An Experimental Determination of Sufficient Mutant Operators,"jeff offutt,ammei lee,gregg rothermel,roland h. untch,christian zapf","49",None,http://s3.amazonaws.com/academia.edu.documents/30711967/offutt96a.pdf?AWSAccessKeyId=AKIAIWOWYYGZ2Y53UL3A&Expires=1490615117&Signature=S8tP6X7CtEzuOAxPJ802SsKlkQE%3D&response-content-disposition=inline%3B%20filename%3DAn_experimental_determination_of_suffici.pdf,1,1,1,2,{},555,http://dl.acm.org/citation.cfm?id=227610
37VUR2VJ6ADTUT4TD0JV0RQ9DRXC1D,3U5JL4WY5LX0BAA1HG3L0MD965Y4X3,AZ72Z7VU6TQCN,97,31766,28,An Experimental Determination of Sufficient Mutant Operators,"jeff offutt,ammei lee,gregg rothermel,roland h. untch,christian zapf","49",None,doi>10.1145/227607.227610,1,1,1,,{},555,http://dl.acm.org/citation.cfm?id=227610
37VUR2VJ6ADTUT4TD0JV0RQ9DRXC1D,3VNL7UK1XG73S9Y6WNY72NPUHG0TFB,A1ODVXVCDHOVF1,71,31766,28,An Experimental Determination of Sufficient Mutant Operators,"jeff offutt,ammei lee,gregg rothermel,roland h. untch,christian zapf","49",None,10.1145/227607.227610,1,1,1,1,{},555,http://dl.acm.org/citation.cfm?id=227610
389A2A304O6TN4JBHHFVMM7Z8ZRC0A,33L7PJKHCHMUDUOJO9S1SV88UHQT87,A3TKUXUTDX6FBF,28,19938,19,Change Distilling Tree Differencing for FineGrained Source Code Change Extraction,"beat fluri,michael wursch,martin pinzger,harald c. gall","49","A key issue in software evolution analysis is the identification of particular changes that occur across several versions of a program. We present change distilling, a tree differencing algorithm for fine-grained source code change extraction. For that, we have improved the existing algorithm of Chawathe et al. for extracting changes in hierarchically structured data. Our algorithm detects changes by finding a match between nodes of the compared two abstract syntax trees and a minimum edit script. We can identify change types between program versions according to our taxonomy of source code changes. We evaluated our change distilling algorithm with a benchmark we developed that consists of 1,064 manually classified changes in 219 revisions from three different open source projects. We achieved significant improvements in extracting types of source code changes: our algorithm approximates the minimum edit script by 45% better than the original change extraction approach by Chawathe et al. We are able to find all occurring changes and almost reach the minimum conforming edit script, i.e., we reach a mean absolute percentage error of 34%, compared to 79% reached by the original algorithm. The paper describes both the change distilling and the results of our evaluation.",http://sci-hub.cc/10.1109/TSE.2007.70731,4,1,2,2,{},129,http://ieeexplore.ieee.org/abstract/document/4339230/
389A2A304O6TN4JBHHFVMM7Z8ZRC0A,36W0OB37HX2JSHYBX5BPRW2OIOCHZK,A3F9JBVNMQ4ZUV,135,19938,19,Change Distilling Tree Differencing for FineGrained Source Code Change Extraction,"beat fluri,michael wursch,martin pinzger,harald c. gall","49","A key issue in software evolution analysis is the identification of particular changes that occur across several versions of a program. We present change distilling, a tree differencing algorithm for fine-grained source code change extraction. For that, we have improved the existing algorithm of Chawathe et al. for extracting changes in hierarchically structured data. Our algorithm detects changes by finding a match between nodes of the compared two abstract syntax trees and a minimum edit script. We can identify change types between program versions according to our taxonomy of source code changes. We evaluated our change distilling algorithm with a benchmark we developed that consists of 1,064 manually classified changes in 219 revisions from three different open source projects. We achieved significant improvements in extracting types of source code changes: our algorithm approximates the minimum edit script by 45% better than the original change extraction approach by Chawathe et al. We are able to find all occurring changes and almost reach the minimum conforming edit script, i.e., we reach a mean absolute percentage error of 34%, compared to 79% reached by the original algorithm. The paper describes both the change distilling and the results of our evaluation.",10.1109/TSE.2007.70731,1,1,1,2,{},333,http://ieeexplore.ieee.org/abstract/document/4339230/
389A2A304O6TN4JBHHFVMM7Z8ZRC0A,3CTOC39K38EWZDNV2AMRCPP4LR67JY,A30M7MYW1BHQN1,216,19938,19,Change Distilling Tree Differencing for FineGrained Source Code Change Extraction,"beat fluri,michael wursch,martin pinzger,harald c. gall","49","A key issue in software evolution analysis is the identification of particular changes that occur across several versions of a program. We present change distilling, a tree differencing algorithm for fine-grained source code change extraction. For that, we have improved the existing algorithm of Chawathe et al. for extracting changes in hierarchically structured data. Our algorithm detects changes by finding a match between nodes of the compared two abstract syntax trees and a minimum edit script. We can identify change types between program versions according to our taxonomy of source code changes. We evaluated our change distilling algorithm with a benchmark we developed that consists of 1,064 manually classified changes in 219 revisions from three different open source projects. We achieved significant improvements in extracting types of source code changes: our algorithm approximates the minimum edit script by 45% better than the original change extraction approach by Chawathe et al. We are able to find all occurring changes and almost reach the minimum conforming edit script, i.e., we reach a mean absolute percentage error of 34%, compared to 79% reached by the original algorithm. The paper describes both the change distilling and the results of our evaluation.",10.1109/TSE.2007.70731,1,2,,2|3,{},333,http://ieeexplore.ieee.org/abstract/document/4339230/
38B7Q9C28GTM3HYN7MLLTXGIFHA96R,317HQ483I8GP7NVC0ZIGWLWU8YQNIV,A314XJY8V1YL12,168,20464,19,Predicting Fault Incidence Using Software Change History,"todd l. graves,alan f. karr,james stephen marron,harvey p. siy","99","This paper is an attempt to understand the processes by which software ages. We define code to be aged or decayed if its structure makes it unnecessarily difficult to understand or change and we measure the extent of decay by counting the number of faults in code in a period of time. Using change management data from a very large, long-lived software system, we explore the extent to which measurements from the change history are successful in predicting the distribution over modules of these incidences of faults. In general, process measures based on the change history are more useful in predicting fault rates than product metrics of the code: For instance, the number of times code has been changed is a better indication of how many faults it will contain than is its length. We also compare the fault rates of code of various ages, finding that if a module is, on the average, a year older than an otherwise similar module, the older module will have roughly a third fewer faults. Our most successful model measures the fault potential of a module as the sum of contributions from all of the times the module has been changed, with large, recent changes receiving the most weight.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.116.9414&rep=rep1&type=pdf,1,1,1,1|2|3|4,{},630,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.116.9414&rep=rep1&type=pdf
38B7Q9C28GTM3HYN7MLLTXGIFHA96R,3SEPORI8WON4IUQXRZ1XAAFK5THZAM,A3F9JBVNMQ4ZUV,30,20464,19,Predicting Fault Incidence Using Software Change History,"todd l. graves,alan f. karr,james stephen marron,harvey p. siy","99","This paper is an attempt to understand the processes by which software ages. We define code to be aged or decayed if its structure makes it unnecessarily difficult to understand or change and we measure the extent of decay by counting the number of faults in code in a period of time. Using change management data from a very large, long-lived software system, we explore the extent to which measurements from the change history are successful in predicting the distribution over modules of these incidences of faults. In general, process measures based on the change history are more useful in predicting fault rates than product metrics of the code: For instance, the number of times code has been changed is a better indication of how many faults it will contain than is its length. We also compare the fault rates of code of various ages, finding that if a module is, on the average, a year older than an otherwise similar module, the older module will have roughly a third fewer faults. Our most successful model measures the fault potential of a module as the sum of contributions from all of the times the module has been changed, with large, recent changes receiving the most weight.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.116.9414&rep=rep1&type=pdf,1,1,,2,{},629,http://ieeexplore.ieee.org/abstract/document/859533/
38B7Q9C28GTM3HYN7MLLTXGIFHA96R,3T111IHZ5FEHBKU1PCTKSC21QXGR9C,A3SAN0Z4EPHDYA,887,20464,19,Predicting Fault Incidence Using Software Change History,"todd l. graves,alan f. karr,james stephen marron,harvey p. siy","99","This paper is an attempt to understand the processes by which software ages. We define code to be aged or decayed if its structure makes it unnecessarily difficult to understand or change and we measure the extent of decay by counting the number of faults in code in a period of time. Using change management data from a very large, long-lived software system, we explore the extent to which measurements from the change history are successful in predicting the distribution over modules of these incidences of faults. In general, process measures based on the change history are more useful in predicting fault rates than product metrics of the code: For instance, the number of times code has been changed is a better indication of how many faults it will contain than is its length. We also compare the fault rates of code of various ages, finding that if a module is, on the average, a year older than an otherwise similar module, the older module will have roughly a third fewer faults. Our most successful model measures the fault potential of a module as the sum of contributions from all of the times the module has been changed, with large, recent changes receiving the most weight.",10.1109/32.859533,1,1,1,1|2,{},260,http://ieeexplore.ieee.org/abstract/document/859533/
38XPGNCKHTO6L17CRZX2OHL1AIN4VH,34YB12FSQZC5TE4HYA3DYUUEOW1MGH,AZ72Z7VU6TQCN,63,5123,2,Populating a Release History Database from Version Control and Bug Tracking Systems,"michael fischer,martin pinzger,harald c. gall","77","Version control and bug tracking systems contain largeamounts of historical information that can give deep insightinto the evolution of a software project. Unfortunately,these systems provide only insufficient support for a detailedanalysis of software evolution aspects. We addressthis problem and introduce an approach for populating a releasehistory database that combines version data with bugtracking data and adds missing data not covered by versioncontrol systems such as merge points. Then simple queriescan be applied to the structured data to obtain meaningfulviews showing the evolution of a software project. Suchviews enable more accurate reasoning of evolutionary aspectsand facilitate the anticipation of software evolution.We demonstrate our approach on the large Open Sourceproject Mozilla that offers great opportunities to compareresults and validate our approach.",DOI: 10.1109/ICSM.2003.1235403,1,1,1,2,{},496,http://ieeexplore.ieee.org/abstract/document/1235403/
38XPGNCKHTO6L17CRZX2OHL1AIN4VH,3A7Y0R2P2PCQESTMKNQP6O2SNHKJXY,A3F9JBVNMQ4ZUV,65,5123,2,Populating a Release History Database from Version Control and Bug Tracking Systems,"michael fischer,martin pinzger,harald c. gall","77","Version control and bug tracking systems contain largeamounts of historical information that can give deep insightinto the evolution of a software project. Unfortunately,these systems provide only insufficient support for a detailedanalysis of software evolution aspects. We addressthis problem and introduce an approach for populating a releasehistory database that combines version data with bugtracking data and adds missing data not covered by versioncontrol systems such as merge points. Then simple queriescan be applied to the structured data to obtain meaningfulviews showing the evolution of a software project. Suchviews enable more accurate reasoning of evolutionary aspectsand facilitate the anticipation of software evolution.We demonstrate our approach on the large Open Sourceproject Mozilla that offers great opportunities to compareresults and validate our approach.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.468.633&rep=rep1&type=pdf,1|3,1,1,1|2,{},496,http://ieeexplore.ieee.org/abstract/document/1235403/
38XPGNCKHTO6L17CRZX2OHL1AIN4VH,3CPLWGV3MPNWWM29W5C3JSXRP819NW,A314XJY8V1YL12,1001,5123,2,Populating a Release History Database from Version Control and Bug Tracking Systems,"michael fischer,martin pinzger,harald c. gall","77","Version control and bug tracking systems contain largeamounts of historical information that can give deep insightinto the evolution of a software project. Unfortunately,these systems provide only insufficient support for a detailedanalysis of software evolution aspects. We addressthis problem and introduce an approach for populating a releasehistory database that combines version data with bugtracking data and adds missing data not covered by versioncontrol systems such as merge points. Then simple queriescan be applied to the structured data to obtain meaningfulviews showing the evolution of a software project. Suchviews enable more accurate reasoning of evolutionary aspectsand facilitate the anticipation of software evolution.We demonstrate our approach on the large Open Sourceproject Mozilla that offers great opportunities to compareresults and validate our approach.",https://www.cs.purdue.edu/homes/xyzhang/spring07/Papers/ase05.pdf,1,1,1,1|2,{},179,https://www.cs.purdue.edu/homes/xyzhang/spring07/Papers/ase05.pdf
39N6W9XWRDB31BV1RBMN45MYI4YGYP,32Z9ZLUT1M87TDK4VW08BYVKYL4OHM,A3SAN0Z4EPHDYA,76,21063,19,The Detection of FaultProne Programs,"john c. munson,taghi m. khoshgoftaar","48","The use of the statistical technique of discriminant analysis as a tool for the detection of fault-prone programs is explored. A principal-components procedure was employed to reduce simple multicollinear complexity metrics to uncorrelated measures on orthogonal complexity domains. These uncorrelated measures were then used to classify programs into alternate groups, depending on the metric values of the program. The criterion variable for group determination was a quality measure of faults or changes made to the programs. The discriminant analysis was conducted on two distinct data sets from large commercial systems. The basic discriminant model was constructed from deliberately biased data to magnify differences in metric values between the discriminant groups. The technique was successful in classifying programs with a relatively low error rate. While the use of linear regression models has produced models of limited value, this procedure shows great promise for use in the detection of program modules with potential for faults.",10.1109/32.135775,1,1,1,1|2,{},238,http://ieeexplore.ieee.org/abstract/document/135775/
39N6W9XWRDB31BV1RBMN45MYI4YGYP,3DEL4X4EL79G9HOL6NRSGBHG00ZXY6,A1665VCUSZL9YT,183,21063,19,The Detection of FaultProne Programs,"john c. munson,taghi m. khoshgoftaar","48","The use of the statistical technique of discriminant analysis as a tool for the detection of fault-prone programs is explored. A principal-components procedure was employed to reduce simple multicollinear complexity metrics to uncorrelated measures on orthogonal complexity domains. These uncorrelated measures were then used to classify programs into alternate groups, depending on the metric values of the program. The criterion variable for group determination was a quality measure of faults or changes made to the programs. The discriminant analysis was conducted on two distinct data sets from large commercial systems. The basic discriminant model was constructed from deliberately biased data to magnify differences in metric values between the discriminant groups. The technique was successful in classifying programs with a relatively low error rate. While the use of linear regression models has produced models of limited value, this procedure shows great promise for use in the detection of program modules with potential for faults.",https://doi.org/10.1109/32.135775,1,1,1,1|2,{},107,http://dl.acm.org/citation.cfm?id=129978
39N6W9XWRDB31BV1RBMN45MYI4YGYP,3WS1NTTKEZ02C01FYLAXICNPK3XF0B,A3F9JBVNMQ4ZUV,66,21063,19,The Detection of FaultProne Programs,"john c. munson,taghi m. khoshgoftaar","48","The use of the statistical technique of discriminant analysis as a tool for the detection of fault-prone programs is explored. A principal-components procedure was employed to reduce simple multicollinear complexity metrics to uncorrelated measures on orthogonal complexity domains. These uncorrelated measures were then used to classify programs into alternate groups, depending on the metric values of the program. The criterion variable for group determination was a quality measure of faults or changes made to the programs. The discriminant analysis was conducted on two distinct data sets from large commercial systems. The basic discriminant model was constructed from deliberately biased data to magnify differences in metric values between the discriminant groups. The technique was successful in classifying programs with a relatively low error rate. While the use of linear regression models has produced models of limited value, this procedure shows great promise for use in the detection of program modules with potential for faults.",10.1109/32.135775,,1,1,2,{},517,http://ieeexplore.ieee.org/abstract/document/135775/
39RRBHZ0AUPMOYV1CSNSIDYABDPZVN,39K0FND3AI34JNRECAB328JBQR4AMP,A1665VCUSZL9YT,609,32090,29,Model Checking Programs,"willem visser,klaus havelund,guillaume p. brat,seungjoon park,flavio lerda","69","The majority of work carried out in the formal methods community throughout the last three decades has (for good reasons) been devoted to special languages designed to make it easier to experiment with mechanized formal methods such as theorem provers, proof checkers and model checkers. In this paper we will attempt to give convincing arguments for why we believe it is time for the formal methods community to shift some of its attention towards the analysis of programs written in modern programming languages. In keeping with this philosophy we have developed a verification and testing environment for Java, called Java PathFinder (JPF), which integrates model checking, program analysis and testing. Part of this work has consisted of building a new Java Virtual Machine that interprets Java bytecode. JPF uses state compression to handle big states, and partial order and symmetry reduction, slicing, abstraction, and runtime analysis techniques to reduce the state space. JPF has been applied to a real-time avionics operating system developed at Honeywell, illustrating an intricate error, and to a model of a spacecraft controller, illustrating the combination of abstraction, runtime analysis, and slicing with model checking.",10.0000/dl.acm.org/786967,1,1,1,1|2,{},248,http://dl.acm.org/citation.cfm?id=786967
39RRBHZ0AUPMOYV1CSNSIDYABDPZVN,3PMBY0YE28RD5I5I7F3P3H3FQ5Z9CS,A30M7MYW1BHQN1,329,32090,29,Model Checking Programs,"willem visser,klaus havelund,guillaume p. brat,seungjoon park,flavio lerda","69","The majority of work carried out in the formal methods community throughout the last three decades has (for good reasons) been devoted to special languages designed to make it easier to experiment with mechanized formal methods such as theorem provers, proof checkers and model checkers. In this paper we will attempt to give convincing arguments for why we believe it is time for the formal methods community to shift some of its attention towards the analysis of programs written in modern programming languages. In keeping with this philosophy we have developed a verification and testing environment for Java, called Java PathFinder (JPF), which integrates model checking, program analysis and testing. Part of this work has consisted of building a new Java Virtual Machine that interprets Java bytecode. JPF uses state compression to handle big states, and partial order and symmetry reduction, slicing, abstraction, and runtime analysis techniques to reduce the state space. JPF has been applied to a real-time avionics operating system developed at Honeywell, illustrating an intricate error, and to a model of a spacecraft controller, illustrating the combination of abstraction, runtime analysis, and slicing with model checking.",10.1023/A:1022920129859,1,1,2,2|3,{},1538,https://link.springer.com/article/10.1023/A:1022920129859
39RRBHZ0AUPMOYV1CSNSIDYABDPZVN,3VHHR074H452U3BV5VY4S42WPDK7L3,A3F9JBVNMQ4ZUV,79,32090,29,Model Checking Programs,"willem visser,klaus havelund,guillaume p. brat,seungjoon park,flavio lerda","69","The majority of work carried out in the formal methods community throughout the last three decades has (for good reasons) been devoted to special languages designed to make it easier to experiment with mechanized formal methods such as theorem provers, proof checkers and model checkers. In this paper we will attempt to give convincing arguments for why we believe it is time for the formal methods community to shift some of its attention towards the analysis of programs written in modern programming languages. In keeping with this philosophy we have developed a verification and testing environment for Java, called Java PathFinder (JPF), which integrates model checking, program analysis and testing. Part of this work has consisted of building a new Java Virtual Machine that interprets Java bytecode. JPF uses state compression to handle big states, and partial order and symmetry reduction, slicing, abstraction, and runtime analysis techniques to reduce the state space. JPF has been applied to a real-time avionics operating system developed at Honeywell, illustrating an intricate error, and to a model of a spacecraft controller, illustrating the combination of abstraction, runtime analysis, and slicing with model checking.",https://www.researchgate.net/profile/Klaus_Havelund/publication/3866977_Model_Checking_Programs/links/0a85e5398580ce199e000000.pdf,1|4,1,1,1|2,{},1538,https://link.springer.com/article/10.1023/A:1022920129859
39TX062QX1CD7UT3R0T12XQGCTYX3R,3JPSL1DZ5TNA15CEOBQ3FN8BVMQNAO,A1FBHWI0K8SGQA,135,31770,28,Automated Consistency Checking of Requirements Specifications,"constance l. heitmeyer,ralph d. jeffords,bruce g. labaw","55","This article describes a formal analysis technique, called consistency checking, for automatic detection of errors, such as type errors, nondeterminism, missing cases, and circular definitions, in requirements specifications. The technique is designed to analyze requirements specifications expressed in the SCR (Software Cost Reduction) tabular notation. As background, the SCR approach to specifying requirements is reviewed. To provide a formal semantics for the SCR notation and a foundation for consistency checking, a formal requirements model is introduced; the model represents a software system as a finite-state automation which produces externally visible outputs in response to changes in monitored environmental quantities. Results of two experiments are presented which evaluated the utility and scalability of our technique for consistency checking in real-world avionics application. The role of consistency checking during the requirements phase of software development is discussed.",10.1145/234426.234431,1,1,1,2,{},163,http://dl.acm.org/citation.cfm?id=234431
39TX062QX1CD7UT3R0T12XQGCTYX3R,3VW04L3ZLUUR9CYB1R5QXXA7YF1XX2,A3F9JBVNMQ4ZUV,82,31770,28,Automated Consistency Checking of Requirements Specifications,"constance l. heitmeyer,ralph d. jeffords,bruce g. labaw","55","This article describes a formal analysis technique, called consistency checking, for automatic detection of errors, such as type errors, nondeterminism, missing cases, and circular definitions, in requirements specifications. The technique is designed to analyze requirements specifications expressed in the SCR (Software Cost Reduction) tabular notation. As background, the SCR approach to specifying requirements is reviewed. To provide a formal semantics for the SCR notation and a foundation for consistency checking, a formal requirements model is introduced; the model represents a software system as a finite-state automation which produces externally visible outputs in response to changes in monitored environmental quantities. Results of two experiments are presented which evaluated the utility and scalability of our technique for consistency checking in real-world avionics application. The role of consistency checking during the requirements phase of software development is discussed.",http://www.dtic.mil/dtic/tr/fulltext/u2/a465574.pdf,,1,1,1|2,{},692,http://dl.acm.org/citation.cfm?id=234431
39TX062QX1CD7UT3R0T12XQGCTYX3R,3YT88D1N09M99ESQIJJD0ND1WWP3KU,AZ72Z7VU6TQCN,65,31770,28,Automated Consistency Checking of Requirements Specifications,"constance l. heitmeyer,ralph d. jeffords,bruce g. labaw","55","This article describes a formal analysis technique, called consistency checking, for automatic detection of errors, such as type errors, nondeterminism, missing cases, and circular definitions, in requirements specifications. The technique is designed to analyze requirements specifications expressed in the SCR (Software Cost Reduction) tabular notation. As background, the SCR approach to specifying requirements is reviewed. To provide a formal semantics for the SCR notation and a foundation for consistency checking, a formal requirements model is introduced; the model represents a software system as a finite-state automation which produces externally visible outputs in response to changes in monitored environmental quantities. Results of two experiments are presented which evaluated the utility and scalability of our technique for consistency checking in real-world avionics application. The role of consistency checking during the requirements phase of software development is discussed.",doi>10.1145/234426.234431,1|2,1,1,2|3,{},692,http://dl.acm.org/citation.cfm?id=234431
3A520CCNWNO4LF175AIJ1GJF2XGEAW,3CCZ6YKWR87S6XW3S5GHPBX5YDP596,A3SAN0Z4EPHDYA,208,19893,19,Data Mining Static Code Attributes to Learn Defect Predictors,"tim menzies,jeremy greenwald,art frank","67","The value of using static code attributes to learn defect predictors has been widely debated. Prior work has explored issues like the merits of ""McCabes versus Halstead versus lines of code counts for generating defect predictors. We show here that such debates are irrelevant since how the attributes are used to build predictors is much more important than which particular attributes are used. Also, contrary to prior pessimism, we show that such defect predictors are demonstrably useful and, on the data studied here, yield predictors with a mean probability of detection of 71 percent and mean false alarms rates of 25 percent. These predictors would be useful for prioritizing a resource-bound exploration of code that has yet to be inspected.",10.1109/TSE.2007.256941,4|6,2,1,1|2,{},355,http://ieeexplore.ieee.org/abstract/document/4027145/?reload=true
3A520CCNWNO4LF175AIJ1GJF2XGEAW,3UOUJI6MTE2ZS84GWMU3DQB34WGXU4,A3F9JBVNMQ4ZUV,139,19893,19,Data Mining Static Code Attributes to Learn Defect Predictors,"tim menzies,jeremy greenwald,art frank","67","The value of using static code attributes to learn defect predictors has been widely debated. Prior work has explored issues like the merits of ""McCabes versus Halstead versus lines of code counts for generating defect predictors. We show here that such debates are irrelevant since how the attributes are used to build predictors is much more important than which particular attributes are used. Also, contrary to prior pessimism, we show that such defect predictors are demonstrably useful and, on the data studied here, yield predictors with a mean probability of detection of 71 percent and mean false alarms rates of 25 percent. These predictors would be useful for prioritizing a resource-bound exploration of code that has yet to be inspected.",https://www.researchgate.net/profile/Tim_Menzies/publication/3189767_Problems_with_Precision_A_Response_to_Comments_on_'Data_Mining_Static_Code_Attributes_to_Learn_Defect_Predictors'/links/0912f50c0549e3cb3d000000.pdf,1,2,1,2,{},800,http://ieeexplore.ieee.org/abstract/document/4027145/
3A520CCNWNO4LF175AIJ1GJF2XGEAW,3WZ36BJEV44DFSMQRLCBJXY92HQTB9,A1665VCUSZL9YT,416,19893,19,Data Mining Static Code Attributes to Learn Defect Predictors,"tim menzies,jeremy greenwald,art frank","67","The value of using static code attributes to learn defect predictors has been widely debated. Prior work has explored issues like the merits of ""McCabes versus Halstead versus lines of code counts for generating defect predictors. We show here that such debates are irrelevant since how the attributes are used to build predictors is much more important than which particular attributes are used. Also, contrary to prior pessimism, we show that such defect predictors are demonstrably useful and, on the data studied here, yield predictors with a mean probability of detection of 71 percent and mean false alarms rates of 25 percent. These predictors would be useful for prioritizing a resource-bound exploration of code that has yet to be inspected.",https://doi.org/10.1109/TSE.2007.10,1,1,2,1|2,{},222,http://dl.acm.org/citation.cfm?id=1248734#
3ACRLU860N294P6ZBOIFWR3LKF1EBR,33LKR6A5KF8C2U4YPOJMDLL0GFDT1O,AZ72Z7VU6TQCN,65,10119,9,An empirical study of code clone genealogies,"miryung kim,vibha sazawal,david notkin,gail c. murphy","57",None,doi>10.1145/1081706.1081737,1,1,1,2,{},480,http://dl.acm.org/citation.cfm?id=1081737
3ACRLU860N294P6ZBOIFWR3LKF1EBR,35GCEFQ6I6C4Y9RCIKMNN21EZU23ZT,A30M7MYW1BHQN1,311,10119,9,An empirical study of code clone genealogies,"miryung kim,vibha sazawal,david notkin,gail c. murphy","57",None,10.1145/1081706.1081737,1,1,1,2|3,{},480,http://dl.acm.org/citation.cfm?id=1081737
3ACRLU860N294P6ZBOIFWR3LKF1EBR,3SITXWYCNWXKW9VAWVD880JFFCGXBW,A3F9JBVNMQ4ZUV,93,10119,9,An empirical study of code clone genealogies,"miryung kim,vibha sazawal,david notkin,gail c. murphy","57",None,http://groups.csail.mit.edu/pag/OLD/reading-group/kim05clone.pdf,,1,1,1|2,{},476,http://dl.acm.org/citation.cfm?id=1081737
3AXFSPQOYQM7SM47URF2CX7Y4LPJFZ,30BUDKLTXEJ91TNK0GW3HPYGP9L5EU,A3F9JBVNMQ4ZUV,103,10134,9,PRMiner automatically extracting implicit programming rules and detecting violations in large software code,"zhenmin li,yuanyuan zhou","53","Programs usually follow many implicit programming rules, most of which are too tedious to be documented by programmers. When these rules are violated by programmers who are unaware of or forget about them, defects can be easily introduced. Therefore, it is highly desirable to have tools to automatically extract such rules and also to automatically detect violations. Previous work in this direction focuses on simple function-pair based programming rules and additionally requires programmers to provide rule templates.This paper proposes a general method called PR-Miner that uses a data mining technique called frequent itemset mining to efficiently extract implicit programming rules from large software code written in an industrial programming language such as C, requiring little effort from programmers and no prior knowledge of the software. Benefiting from frequent itemset mining, PR-Miner can extract programming rules in general forms (without being constrained by any fixed rule templates) that can contain multiple program elements of various types such as functions, variables and data types. In addition, we also propose an efficient algorithm to automatically detect violations to the extracted programming rules, which are strong indications of bugs.Our evaluation with large software code, including Linux, PostgreSQL Server and the Apache HTTP Server, with 84K--3M lines of code each, shows that PR-Miner can efficiently extract thousands of general programming rules and detect violations within 2 minutes. Moreover, PR-Miner has detected many violations to the extracted rules. Among the top 60 violations reported by PR-Miner, 16 have been confirmed as bugs in the latest version of Linux, 6 in PostgreSQL and 1 in Apache. Most of them violate complex programming rules that contain more than 2 elements and are thereby difficult for previous tools to detect. We reported these bugs and they are currently being fixed by developers.",http://www.cs.kent.edu/~jmaletic/cs63902/Papers/PR-Miner05.pdf,1,1,1,1|2,{},377,http://dl.acm.org/citation.cfm?id=1081755
3AXFSPQOYQM7SM47URF2CX7Y4LPJFZ,3NQL1CS15SWO5SJQ68QASQKVKKVYVY,A30M7MYW1BHQN1,249,10134,9,PRMiner automatically extracting implicit programming rules and detecting violations in large software code,"zhenmin li,yuanyuan zhou","53","Programs usually follow many implicit programming rules, most of which are too tedious to be documented by programmers. When these rules are violated by programmers who are unaware of or forget about them, defects can be easily introduced. Therefore, it is highly desirable to have tools to automatically extract such rules and also to automatically detect violations. Previous work in this direction focuses on simple function-pair based programming rules and additionally requires programmers to provide rule templates.This paper proposes a general method called PR-Miner that uses a data mining technique called frequent itemset mining to efficiently extract implicit programming rules from large software code written in an industrial programming language such as C, requiring little effort from programmers and no prior knowledge of the software. Benefiting from frequent itemset mining, PR-Miner can extract programming rules in general forms (without being constrained by any fixed rule templates) that can contain multiple program elements of various types such as functions, variables and data types. In addition, we also propose an efficient algorithm to automatically detect violations to the extracted programming rules, which are strong indications of bugs.Our evaluation with large software code, including Linux, PostgreSQL Server and the Apache HTTP Server, with 84K--3M lines of code each, shows that PR-Miner can efficiently extract thousands of general programming rules and detect violations within 2 minutes. Moreover, PR-Miner has detected many violations to the extracted rules. Among the top 60 violations reported by PR-Miner, 16 have been confirmed as bugs in the latest version of Linux, 6 in PostgreSQL and 1 in Apache. Most of them violate complex programming rules that contain more than 2 elements and are thereby difficult for previous tools to detect. We reported these bugs and they are currently being fixed by developers.",10.1145/1095430.1081755,1,1,1,2|3,{},378,http://dl.acm.org/citation.cfm?id=1081755
3AXFSPQOYQM7SM47URF2CX7Y4LPJFZ,3U5JL4WY5LX0BAA1HG3L0MD95L0X4T,A1665VCUSZL9YT,328,10134,9,PRMiner automatically extracting implicit programming rules and detecting violations in large software code,"zhenmin li,yuanyuan zhou","53","Programs usually follow many implicit programming rules, most of which are too tedious to be documented by programmers. When these rules are violated by programmers who are unaware of or forget about them, defects can be easily introduced. Therefore, it is highly desirable to have tools to automatically extract such rules and also to automatically detect violations. Previous work in this direction focuses on simple function-pair based programming rules and additionally requires programmers to provide rule templates.This paper proposes a general method called PR-Miner that uses a data mining technique called frequent itemset mining to efficiently extract implicit programming rules from large software code written in an industrial programming language such as C, requiring little effort from programmers and no prior knowledge of the software. Benefiting from frequent itemset mining, PR-Miner can extract programming rules in general forms (without being constrained by any fixed rule templates) that can contain multiple program elements of various types such as functions, variables and data types. In addition, we also propose an efficient algorithm to automatically detect violations to the extracted programming rules, which are strong indications of bugs.Our evaluation with large software code, including Linux, PostgreSQL Server and the Apache HTTP Server, with 84K--3M lines of code each, shows that PR-Miner can efficiently extract thousands of general programming rules and detect violations within 2 minutes. Moreover, PR-Miner has detected many violations to the extracted rules. Among the top 60 violations reported by PR-Miner, 16 have been confirmed as bugs in the latest version of Linux, 6 in PostgreSQL and 1 in Apache. Most of them violate complex programming rules that contain more than 2 elements and are thereby difficult for previous tools to detect. We reported these bugs and they are currently being fixed by developers.",https://doi.org/10.1145/1081706.1081755,1,1,1,1|2,{},122,http://dl.acm.org/citation.cfm?id=1081755
3BC9H1KCYU0ZYXL16GQ5Q88MCSNWY3,39KFRKBFIOJTF8AT5W4WXYQNOY0OY2,AZ72Z7VU6TQCN,102,20336,19,Recovering Traceability Links between Code and Documentation,"giuliano antoniol,gerardo canfora,gerardo casazza,andrea de lucia,ettore merlo","75","Software system documentation is almost always expressed informally in natural language and free text. Examples include requirement specifications, design documents, manual pages, system development journals, error logs, and related maintenance reports. We propose a method based on information retrieval to recover traceability links between source code and free text documents. A premise of our work is that programmers use meaningful names for program items, such as functions, variables, types, classes, and methods. We believe that the application-domain knowledge that programmers process when writing the code is often captured by the mnemonics for identifiers; therefore, the analysis of these mnemonics can help to associate high-level concepts with program concepts and vice-versa. We apply both a probabilistic and a vector space information retrieval model in two case studies to trace C++ source code onto manual pages and Java code to functional requirements. We compare the results of applying the two models, discuss the benefits and limitations, and describe directions for improvements.",DOI: 10.1109/TSE.2002.1041053,1,1,1,1|2,{},872,http://ieeexplore.ieee.org/abstract/document/1041053/
3BC9H1KCYU0ZYXL16GQ5Q88MCSNWY3,3QHK8ZVMIN6PWFELICAKX6OS85MBL8,A1ODVXVCDHOVF1,111,20336,19,Recovering Traceability Links between Code and Documentation,"giuliano antoniol,gerardo canfora,gerardo casazza,andrea de lucia,ettore merlo","75","Software system documentation is almost always expressed informally in natural language and free text. Examples include requirement specifications, design documents, manual pages, system development journals, error logs, and related maintenance reports. We propose a method based on information retrieval to recover traceability links between source code and free text documents. A premise of our work is that programmers use meaningful names for program items, such as functions, variables, types, classes, and methods. We believe that the application-domain knowledge that programmers process when writing the code is often captured by the mnemonics for identifiers; therefore, the analysis of these mnemonics can help to associate high-level concepts with program concepts and vice-versa. We apply both a probabilistic and a vector space information retrieval model in two case studies to trace C++ source code onto manual pages and Java code to functional requirements. We compare the results of applying the two models, discuss the benefits and limitations, and describe directions for improvements.",10.1109/TSE.2002.1041053,3|4,1,2,2,{},870,http://ieeexplore.ieee.org/abstract/document/1041053/
3BC9H1KCYU0ZYXL16GQ5Q88MCSNWY3,3UXUOQ9OKFLLYKKR849EJQMLV0F7AD,A3F9JBVNMQ4ZUV,107,20336,19,Recovering Traceability Links between Code and Documentation,"giuliano antoniol,gerardo canfora,gerardo casazza,andrea de lucia,ettore merlo","75","Software system documentation is almost always expressed informally in natural language and free text. Examples include requirement specifications, design documents, manual pages, system development journals, error logs, and related maintenance reports. We propose a method based on information retrieval to recover traceability links between source code and free text documents. A premise of our work is that programmers use meaningful names for program items, such as functions, variables, types, classes, and methods. We believe that the application-domain knowledge that programmers process when writing the code is often captured by the mnemonics for identifiers; therefore, the analysis of these mnemonics can help to associate high-level concepts with program concepts and vice-versa. We apply both a probabilistic and a vector space information retrieval model in two case studies to trace C++ source code onto manual pages and Java code to functional requirements. We compare the results of applying the two models, discuss the benefits and limitations, and describe directions for improvements.",10.1109/TSE.2002.1041053,1|3,1,1,1|2,{},870,http://ieeexplore.ieee.org/abstract/document/1041053/
3CVBMEMMXB4YMNUBO8E5CSE2T527HE,3TPZPLC3M10AK5P6VBOLW4Z0P21P3E,AZ72Z7VU6TQCN,70,31689,28,Alloy a lightweight object modelling notation,daniel b. jackson,"59","Alloy is a little language for describing structural properties. It offers a declaration syntax compatible with graphical object models, and a set-based formula syntax powerful enough to express complex constraints and yet amenable to a fully automatic semantic analysis. Its meaning is given by translation to an even smaller (formally defined) kernel. This paper presents the language in its entirety, and explains its motivation, contributions and deficiencies.",doi>10.1145/505145.505149,1,1,1,,{},1193,http://dl.acm.org/citation.cfm?id=505149
3CVBMEMMXB4YMNUBO8E5CSE2T527HE,3ZAZR5XV026SB9NVBDXOG5585XFCZG,A3F9JBVNMQ4ZUV,81,31689,28,Alloy a lightweight object modelling notation,daniel b. jackson,"59","Alloy is a little language for describing structural properties. It offers a declaration syntax compatible with graphical object models, and a set-based formula syntax powerful enough to express complex constraints and yet amenable to a fully automatic semantic analysis. Its meaning is given by translation to an even smaller (formally defined) kernel. This paper presents the language in its entirety, and explains its motivation, contributions and deficiencies.",http://www.ccs.neu.edu/home/futrelle/teaching/com1204sm2001/docs/alloy.pdf,3,1,1,1|2,{},1195,http://dl.acm.org/citation.cfm?id=505149
3CZH926SIC2PJQLQW98SODXFANKE4L,33LK57MYLUT8IQCR8ZNOVA9QR1VZST,A1ODVXVCDHOVF1,318,20427,19,A Classification and Comparison Framework for Software Architecture Description Languages,"nenad medvidovic,richard n. taylor","94","Software architectures shift the focus of developers from lines-of-code to coarser-grained architectural elements and their overall interconnection structure. Architecture description languages (ADLs) have been proposed as modeling notations to support architecture-based development. There is, however, little consensus in the research community on what is an ADL, what aspects of an architecture should be modeled in an ADL, and which of several possible ADLs is best suited for a particular problem. Furthermore, the distinction is rarely made between ADLs on one hand and formal specification, module interconnection, simulation, and programming languages on the other. This paper attempts to provide an answer to these questions. It motivates and presents a definition and a classification framework for ADLs. The utility of the definition is demonstrated by using it to differentiate ADLs from other modeling notations. The framework is used to classify and compare several existing ADLs, enabling us, in the process, to identify key properties of ADLs. The comparison highlights areas where existing ADLs provide extensive support and those in which they are deficient, suggesting a research agenda for the future.",10.1109/32.825767,3,2,,2|3,{},2578,http://ieeexplore.ieee.org/abstract/document/825767/
3CZH926SIC2PJQLQW98SODXFANKE4L,369J354OFEY34BJPBUWW9YXSYLFG68,A2A4LHPXF2E2GS,1581,20427,19,A Classification and Comparison Framework for Software Architecture Description Languages,"nenad medvidovic,richard n. taylor","94","Software architectures shift the focus of developers from lines-of-code to coarser-grained architectural elements and their overall interconnection structure. Architecture description languages (ADLs) have been proposed as modeling notations to support architecture-based development. There is, however, little consensus in the research community on what is an ADL, what aspects of an architecture should be modeled in an ADL, and which of several possible ADLs is best suited for a particular problem. Furthermore, the distinction is rarely made between ADLs on one hand and formal specification, module interconnection, simulation, and programming languages on the other. This paper attempts to provide an answer to these questions. It motivates and presents a definition and a classification framework for ADLs. The utility of the definition is demonstrated by using it to differentiate ADLs from other modeling notations. The framework is used to classify and compare several existing ADLs, enabling us, in the process, to identify key properties of ADLs. The comparison highlights areas where existing ADLs provide extensive support and those in which they are deficient, suggesting a research agenda for the future.",http://ieeexplore.ieee.org/abstract/document/825767/,4,1,1,1|2,IEEE site showing abstract asked for log in or payment to see full article. Sci Hub comes up as a Russian-language website where I have to download the full article with a reference article it is originating from Moscow Sci Hub. I did not download from this site. Thank you.,2578,http://ieeexplore.ieee.org/abstract/document/825767/
3CZH926SIC2PJQLQW98SODXFANKE4L,3H7XDTSHKDF1YQYV2C907SW5MNYGWZ,A3F9JBVNMQ4ZUV,66,20427,19,A Classification and Comparison Framework for Software Architecture Description Languages,"nenad medvidovic,richard n. taylor","94","Software architectures shift the focus of developers from lines-of-code to coarser-grained architectural elements and their overall interconnection structure. Architecture description languages (ADLs) have been proposed as modeling notations to support architecture-based development. There is, however, little consensus in the research community on what is an ADL, what aspects of an architecture should be modeled in an ADL, and which of several possible ADLs is best suited for a particular problem. Furthermore, the distinction is rarely made between ADLs on one hand and formal specification, module interconnection, simulation, and programming languages on the other. This paper attempts to provide an answer to these questions. It motivates and presents a definition and a classification framework for ADLs. The utility of the definition is demonstrated by using it to differentiate ADLs from other modeling notations. The framework is used to classify and compare several existing ADLs, enabling us, in the process, to identify key properties of ADLs. The comparison highlights areas where existing ADLs provide extensive support and those in which they are deficient, suggesting a research agenda for the future.",ftp://ftp.ics.uci.edu/pub/arch/papers/TR-UCI-ICS-97-02.pdf,,1,1,1|2,{},2578,http://ieeexplore.ieee.org/abstract/document/825767/
3DWGDA5POFSPT2AT4HE0QJEYYYD1V1,3WJ1OXY92B4PYYPAI91KXQIG6LOA88,A3F9JBVNMQ4ZUV,54,20281,19,Simplifying and Isolating FailureInducing Input,"andreas zeller,ralf hildebrandt","88","Given some test case, a program fails. Which circumstances of the test case are responsible for the particular failure? The Delta Debugging algorithm generalizes and simplifies the failing test case to a minimal test case that still produces the failure. It also isolates the difference between a passing and a failing test case. In a case study, the Mozilla web browser crashed after 95 user actions. Our prototype implementation automatically simplified the input to three relevant user actions. Likewise, it simplified 896 lines of HTML to the single line that caused the failure. The case study required 139 automated test runs or 35 minutes on a 500 MHz PC.",https://www.cs.purdue.edu/homes/xyzhang/fall07/Papers/delta-debugging.pdf,1|4,1,1,1|2,{},673,http://ieeexplore.ieee.org/abstract/document/988498/
3DWGDA5POFSPT2AT4HE0QJEYYYD1V1,3X4MXAO0BHCSNG79IN3C6WACO62WRO,A2QW8WI6RPEJU8,318,20281,19,Simplifying and Isolating FailureInducing Input,"andreas zeller,ralf hildebrandt","88","Given some test case, a program fails. Which circumstances of the test case are responsible for the particular failure? The Delta Debugging algorithm generalizes and simplifies the failing test case to a minimal test case that still produces the failure. It also isolates the difference between a passing and a failing test case. In a case study, the Mozilla web browser crashed after 95 user actions. Our prototype implementation automatically simplified the input to three relevant user actions. Likewise, it simplified 896 lines of HTML to the single line that caused the failure. The case study required 139 automated test runs or 35 minutes on a 500 MHz PC.",http://ieeexplore.ieee.org/abstract/document/988498/,3,1,1,1|2,{},673,http://ieeexplore.ieee.org/abstract/document/988498/
3DWGDA5POFSPT2AT4HE0QJEYYYD1V1,3Z2R0DQ0JI2H2W4XIXU5JIV45AU2EC,A314XJY8V1YL12,221,20281,19,Simplifying and Isolating FailureInducing Input,"andreas zeller,ralf hildebrandt","88","Given some test case, a program fails. Which circumstances of the test case are responsible for the particular failure? The Delta Debugging algorithm generalizes and simplifies the failing test case to a minimal test case that still produces the failure. It also isolates the difference between a passing and a failing test case. In a case study, the Mozilla web browser crashed after 95 user actions. Our prototype implementation automatically simplified the input to three relevant user actions. Likewise, it simplified 896 lines of HTML to the single line that caused the failure. The case study required 139 automated test runs or 35 minutes on a 500 MHz PC.",https://doi.org/10.1145/1101908.1101948,1,1,1,1|2|4,{},179,http://dl.acm.org/citation.cfm?id=1101948
3EGKVCRQFWG7AUNQBPU93UV12R6BY3,37TD41K0AIXVAX1HGL3GKC85IJJCSH,AMGQ3YEAMC3Z2,110,25893,22,A static analyzer for finding dynamic programming errors,"william r. bush,jonathan d. pincus,david j. sielaff","51",None,https://128.143.137.29/~weimer/2008-615/reading/bush-prefix.pdf,4,1,1,2|3,{},16,https://128.143.137.29/~weimer/2008-615/reading/bush-prefix.pdf
3EGKVCRQFWG7AUNQBPU93UV12R6BY3,3BEFOD78W7HPHYBX391CP5XBYUBM4J,A1665VCUSZL9YT,384,25893,22,A static analyzer for finding dynamic programming errors,"william r. bush,jonathan d. pincus,david j. sielaff","51",None,DOI: 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H,1,1,1,1|2,{},204,http://dl.acm.org/citation.cfm?id=348428
3EGKVCRQFWG7AUNQBPU93UV12R6BY3,3E47SOBEYRK6GJYLB992GA2I9JACIE,A3F9JBVNMQ4ZUV,208,25893,22,A static analyzer for finding dynamic programming errors,"william r. bush,jonathan d. pincus,david j. sielaff","51",None,http://osq.cs.berkeley.edu/public/Pincus-StaticAnalyzer.pdf,1|3|4,1,1,1|2,{},630,https://128.143.137.29/~weimer/2008-615/reading/bush-prefix.pdf
3F6045TU7DC9L00L5TOXD77K5II992,33FBRBDW6PNDRDM82NXB3L846OUC8X,A3SAN0Z4EPHDYA,103,31754,28,A Safe Efficient Regression Test Selection Technique,"gregg rothermel,mary jean harrold","80","Regression testing is an expensive but necessary maintenance activity performed on modified software to provide confidence that changes are correct and do not adversely affect other portions of the softwore. A regression test selection technique choses, from an existing test set, thests that are deemed necessary to validate modified software. We present a new technique for regression test selection. Our algorithms construct control flow graphs for a precedure or program and its modified version and use these graphs to select tests that execute changed code from the original test suite. We prove that, under certain conditions, the set of tests our technique selects includes every test from the original test suite that con expose faults in the modified procedfdure or program. Under these conditions our algorithms are safe. Moreover, although our algorithms may select some tests that cannot expose faults, they are at lease as precise as other safe regression test selection algorithms. Unlike many other regression test selection algorithms, our algorithms handle all language constructs and all types of program modifications. We have implemented our algorithms; initial empirical studies indicate that our technique can significantly reduce the cost of regression testing modified software.",10.1145/248233.248262,1|4,1,1,1|2,{},166,http://dl.acm.org/citation.cfm?id=248262
3F6045TU7DC9L00L5TOXD77K5II992,3LJ7UR74RI1VZGWXFAGC2KMB36O4NC,A3F9JBVNMQ4ZUV,66,31754,28,A Safe Efficient Regression Test Selection Technique,"gregg rothermel,mary jean harrold","80","Regression testing is an expensive but necessary maintenance activity performed on modified software to provide confidence that changes are correct and do not adversely affect other portions of the softwore. A regression test selection technique choses, from an existing test set, thests that are deemed necessary to validate modified software. We present a new technique for regression test selection. Our algorithms construct control flow graphs for a precedure or program and its modified version and use these graphs to select tests that execute changed code from the original test suite. We prove that, under certain conditions, the set of tests our technique selects includes every test from the original test suite that con expose faults in the modified procedfdure or program. Under these conditions our algorithms are safe. Moreover, although our algorithms may select some tests that cannot expose faults, they are at lease as precise as other safe regression test selection algorithms. Unlike many other regression test selection algorithms, our algorithms handle all language constructs and all types of program modifications. We have implemented our algorithms; initial empirical studies indicate that our technique can significantly reduce the cost of regression testing modified software.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.33.7286&rep=rep1&type=pdf,1,1,1,1|2,{},665,http://dl.acm.org/citation.cfm?id=248262
3F6045TU7DC9L00L5TOXD77K5II992,3U088ZLJVLH4NMNAOAKXM09PF3E0WF,A1YUMDDEVLJH75,307,31754,28,A Safe Efficient Regression Test Selection Technique,"gregg rothermel,mary jean harrold","80","Regression testing is an expensive but necessary maintenance activity performed on modified software to provide confidence that changes are correct and do not adversely affect other portions of the softwore. A regression test selection technique choses, from an existing test set, thests that are deemed necessary to validate modified software. We present a new technique for regression test selection. Our algorithms construct control flow graphs for a precedure or program and its modified version and use these graphs to select tests that execute changed code from the original test suite. We prove that, under certain conditions, the set of tests our technique selects includes every test from the original test suite that con expose faults in the modified procedfdure or program. Under these conditions our algorithms are safe. Moreover, although our algorithms may select some tests that cannot expose faults, they are at lease as precise as other safe regression test selection algorithms. Unlike many other regression test selection algorithms, our algorithms handle all language constructs and all types of program modifications. We have implemented our algorithms; initial empirical studies indicate that our technique can significantly reduce the cost of regression testing modified software.",10.1145/248233.248262,1,1,1,2|3,{},166,http://dl.acm.org/citation.cfm?id=248262
3FCO4VKOZ41M2D39Y76ZRPHP1PA7EY,3FUI0JHJPYM3DGKJXDREJ1WZK6O33V,AZ72Z7VU6TQCN,85,20796,19,Specification and Analysis of System Architecture Using Rapide,"david c. luckham,john j. kenney,larry m. augustin,james vera,doug bryan,walter mann","68","Rapide is an event-based, concurrent, object-oriented language specifically designed for prototyping system architectures. Two principle design goals are 1) to provide constructs for defining executable prototypes of architectures and 2) to adopt an execution model in which the concurrency, synchronization, dataflow, and timing properties of a prototype are explicitly represented. This paper describes the partially ordered event set (poset) execution model and outlines with examples some of the event-based features for defining communication architectures and relationships between architectures. Various features of Rapide are illustrated by excerpts from a prototype of the X/Open distributed transaction processing reference architecture.",DOI: 10.1109/32.385971,1,1,1,1|2,{},1166,http://ieeexplore.ieee.org/abstract/document/385971/
3FCO4VKOZ41M2D39Y76ZRPHP1PA7EY,3L70J4KAZHA1FTL1ZHC0JIWHHMHDAX,A314XJY8V1YL12,156,20796,19,Specification and Analysis of System Architecture Using Rapide,"david c. luckham,john j. kenney,larry m. augustin,james vera,doug bryan,walter mann","68","Rapide is an event-based, concurrent, object-oriented language specifically designed for prototyping system architectures. Two principle design goals are 1) to provide constructs for defining executable prototypes of architectures and 2) to adopt an execution model in which the concurrency, synchronization, dataflow, and timing properties of a prototype are explicitly represented. This paper describes the partially ordered event set (poset) execution model and outlines with examples some of the event-based features for defining communication architectures and relationships between architectures. Various features of Rapide are illustrated by excerpts from a prototype of the X/Open distributed transaction processing reference architecture.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.5408&rep=rep1&type=pdf,1,1,1,1|2|3|4,{},1166,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.5408&rep=rep1&type=pdf
3FCO4VKOZ41M2D39Y76ZRPHP1PA7EY,3SBEHTYCWORJJMZQ71RRD1U1C8YYIG,A3F9JBVNMQ4ZUV,56,20796,19,Specification and Analysis of System Architecture Using Rapide,"david c. luckham,john j. kenney,larry m. augustin,james vera,doug bryan,walter mann","68","Rapide is an event-based, concurrent, object-oriented language specifically designed for prototyping system architectures. Two principle design goals are 1) to provide constructs for defining executable prototypes of architectures and 2) to adopt an execution model in which the concurrency, synchronization, dataflow, and timing properties of a prototype are explicitly represented. This paper describes the partially ordered event set (poset) execution model and outlines with examples some of the event-based features for defining communication architectures and relationships between architectures. Various features of Rapide are illustrated by excerpts from a prototype of the X/Open distributed transaction processing reference architecture.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.5408&rep=rep1&type=pdf,1|3,1,1,1|2,{},1166,http://ieeexplore.ieee.org/abstract/document/385971/
3FCO4VKOZ41M2D39Y76ZRPHP1PAE75,3ERMJ6L4DZGM0LTG57ZJSHHLPHU7MN,A3F9JBVNMQ4ZUV,198,20042,19,Predicting the Location and Number of Faults in Large Software Systems,"thomas j. ostrand,elaine j. weyuker,robert m. bell","72","Advance knowledge of which files in the next release of a large software system are most likely to contain the largest numbers of faults can be a very valuable asset. To accomplish this, a negative binomial regression model has been developed and used to predict the expected number of faults in each file of the next release of a system. The predictions are based on the code of the file in the current release, and fault and modification history of the file from previous releases. The model has been applied to two large industrial systems, one with a history of 17 consecutive quarterly releases over 4 years, and the other with nine releases over 2 years. The predictions were quite accurate: For each release of the two systems, the 20 percent of the files with the highest predicted number of faults contained between 71 percent and 92 percent of the faults that were actually detected, with the overall average being 83 percent. The same model was also used to predict which files of the first system were likely to have the highest fault densities (faults per KLOC). In this case, the 20 percent of the files with the highest predicted fault densities contained an average of 62 percent of the system's detected faults. However, the identified files contained a much smaller percentage of the code mass than the files selected to maximize the numbers of faults. The model was also used to make predictions from a much smaller input set that only contained fault data from integration testing and later. The prediction was again very accurate, identifying files that contained from 71 percent to 93 percent of the faults, with the average being 84 percent. Finally, a highly simplified version of the predictor selected files containing, on average, 73 percent and 74 percent of the faults for the two systems.",10.1109/TSE.2005.49,1,1,1,2,{},527,http://ieeexplore.ieee.org/abstract/document/1435354/
3FCO4VKOZ41M2D39Y76ZRPHP1PAE75,3IXEICO793779G5VVUV38HCHP1P6TI,AZ72Z7VU6TQCN,76,20042,19,Predicting the Location and Number of Faults in Large Software Systems,"thomas j. ostrand,elaine j. weyuker,robert m. bell","72","Advance knowledge of which files in the next release of a large software system are most likely to contain the largest numbers of faults can be a very valuable asset. To accomplish this, a negative binomial regression model has been developed and used to predict the expected number of faults in each file of the next release of a system. The predictions are based on the code of the file in the current release, and fault and modification history of the file from previous releases. The model has been applied to two large industrial systems, one with a history of 17 consecutive quarterly releases over 4 years, and the other with nine releases over 2 years. The predictions were quite accurate: For each release of the two systems, the 20 percent of the files with the highest predicted number of faults contained between 71 percent and 92 percent of the faults that were actually detected, with the overall average being 83 percent. The same model was also used to predict which files of the first system were likely to have the highest fault densities (faults per KLOC). In this case, the 20 percent of the files with the highest predicted fault densities contained an average of 62 percent of the system's detected faults. However, the identified files contained a much smaller percentage of the code mass than the files selected to maximize the numbers of faults. The model was also used to make predictions from a much smaller input set that only contained fault data from integration testing and later. The prediction was again very accurate, identifying files that contained from 71 percent to 93 percent of the faults, with the average being 84 percent. Finally, a highly simplified version of the predictor selected files containing, on average, 73 percent and 74 percent of the faults for the two systems.",DOI: 10.1109/TSE.2005.49,1,1,1,1|2,{},529,http://ieeexplore.ieee.org/abstract/document/1435354/?reload=true
3FCO4VKOZ41M2D39Y76ZRPHP1PAE75,3WYGZ5XF3X3DTVD58YKE8VLDN2ZSK1,A314XJY8V1YL12,408,20042,19,Predicting the Location and Number of Faults in Large Software Systems,"thomas j. ostrand,elaine j. weyuker,robert m. bell","72","Advance knowledge of which files in the next release of a large software system are most likely to contain the largest numbers of faults can be a very valuable asset. To accomplish this, a negative binomial regression model has been developed and used to predict the expected number of faults in each file of the next release of a system. The predictions are based on the code of the file in the current release, and fault and modification history of the file from previous releases. The model has been applied to two large industrial systems, one with a history of 17 consecutive quarterly releases over 4 years, and the other with nine releases over 2 years. The predictions were quite accurate: For each release of the two systems, the 20 percent of the files with the highest predicted number of faults contained between 71 percent and 92 percent of the faults that were actually detected, with the overall average being 83 percent. The same model was also used to predict which files of the first system were likely to have the highest fault densities (faults per KLOC). In this case, the 20 percent of the files with the highest predicted fault densities contained an average of 62 percent of the system's detected faults. However, the identified files contained a much smaller percentage of the code mass than the files selected to maximize the numbers of faults. The model was also used to make predictions from a much smaller input set that only contained fault data from integration testing and later. The prediction was again very accurate, identifying files that contained from 71 percent to 93 percent of the faults, with the average being 84 percent. Finally, a highly simplified version of the predictor selected files containing, on average, 73 percent and 74 percent of the faults for the two systems.",https://doi.org/10.1109/TSE.2005.49,1,1,1,1|2|4,{},529,http://ieeexplore.ieee.org/abstract/document/1435354/
3FHTJGYT8NO9SX300OQ4RETMEZVGPV,3NXNZ5RS1BL7T1AMGYVENVB1PII79J,A3F9JBVNMQ4ZUV,232,14377,15,Korat automated testing based on Java predicates,"chandrasekhar boyapati,sarfraz khurshid,darko marinov","89","This paper presents Korat, a novel framework for automated testing of Java programs. Given a formal specification for a method, Korat uses the method precondition to automatically generate all (nonisomorphic) test cases up to a given small size. Korat then executes the method on each test case, and uses the method postcondition as a test oracle to check the correctness of each output.To generate test cases for a method, Korat constructs a Java predicate (i.e., a method that returns a boolean) from the method's pre-condition. The heart of Korat is a technique for automatic test case generation: given a predicate and a bound on the size of its inputs, Korat generates all (nonisomorphic) inputs for which the predicate returns true. Korat exhaustively explores the bounded input space of the predicate but does so efficiently by monitoring the predicate's executions and pruning large portions of the search space.This paper illustrates the use of Korat for testing several data structures, including some from the Java Collections Framework. The experimental results show that it is feasible to generate test cases from Java predicates, even when the search space for inputs is very large. This paper also compares Korat with a testing framework based on declarative specifications. Contrary to our initial expectation, the experiments show that Korat generates test cases much faster than the declarative framework.",10.1145/566172.566191,1,1,1,2,{},686,http://dl.acm.org/citation.cfm?id=566191
3FHTJGYT8NO9SX300OQ4RETMEZVGPV,3PB5A5BD0WUM8BXUU41OFCXOT3BG7X,AZ72Z7VU6TQCN,289,14377,15,Korat automated testing based on Java predicates,"chandrasekhar boyapati,sarfraz khurshid,darko marinov","89","This paper presents Korat, a novel framework for automated testing of Java programs. Given a formal specification for a method, Korat uses the method precondition to automatically generate all (nonisomorphic) test cases up to a given small size. Korat then executes the method on each test case, and uses the method postcondition as a test oracle to check the correctness of each output.To generate test cases for a method, Korat constructs a Java predicate (i.e., a method that returns a boolean) from the method's pre-condition. The heart of Korat is a technique for automatic test case generation: given a predicate and a bound on the size of its inputs, Korat generates all (nonisomorphic) inputs for which the predicate returns true. Korat exhaustively explores the bounded input space of the predicate but does so efficiently by monitoring the predicate's executions and pruning large portions of the search space.This paper illustrates the use of Korat for testing several data structures, including some from the Java Collections Framework. The experimental results show that it is feasible to generate test cases from Java predicates, even when the search space for inputs is very large. This paper also compares Korat with a testing framework based on declarative specifications. Contrary to our initial expectation, the experiments show that Korat generates test cases much faster than the declarative framework.",doi>10.1145/566171.566191,1,1,1,2,{},688,http://dl.acm.org/citation.cfm?id=566191
3FHTJGYT8NO9SX300OQ4RETMEZVGPV,3VFJCI1K40NWQUH93IZUKTOOUDHRGF,A30M7MYW1BHQN1,211,14377,15,Korat automated testing based on Java predicates,"chandrasekhar boyapati,sarfraz khurshid,darko marinov","89","This paper presents Korat, a novel framework for automated testing of Java programs. Given a formal specification for a method, Korat uses the method precondition to automatically generate all (nonisomorphic) test cases up to a given small size. Korat then executes the method on each test case, and uses the method postcondition as a test oracle to check the correctness of each output.To generate test cases for a method, Korat constructs a Java predicate (i.e., a method that returns a boolean) from the method's pre-condition. The heart of Korat is a technique for automatic test case generation: given a predicate and a bound on the size of its inputs, Korat generates all (nonisomorphic) inputs for which the predicate returns true. Korat exhaustively explores the bounded input space of the predicate but does so efficiently by monitoring the predicate's executions and pruning large portions of the search space.This paper illustrates the use of Korat for testing several data structures, including some from the Java Collections Framework. The experimental results show that it is feasible to generate test cases from Java predicates, even when the search space for inputs is very large. This paper also compares Korat with a testing framework based on declarative specifications. Contrary to our initial expectation, the experiments show that Korat generates test cases much faster than the declarative framework.",10.1145/566172.566191,1,2,1,3,{},688,http://dl.acm.org/citation.cfm?id=566191
3FVBZG9CLJ2K4CUR39TWXD4FLRWH0O,37XITHEISXXJ9I141W3BU239WP6RCU,A1FBHWI0K8SGQA,1126,21188,19,An Information Retrieval Approach For Automatically Constructing Software Libraries,"yoelle s. maarek,daniel m. berry,gail e. kaiser","44","A technology for automatically assembling large software libraries which promote software reuse by helping the user locate the components closest to her/his needs is described. Software libraries are automatically assembled from a set of unorganized components by using information retrieval techniques. The construction of the library is done in two steps. First, attributes are automatically extracted from natural language documentation by using an indexing scheme based on the notions of lexical affinities and quantity of information. Then a hierarchy for browsing is automatically generated using a clustering technique which draws only on the information provided by the attributes. Due to the free-text indexing scheme, tools following this approach can accept free-style natural language queries.",10.1109/32.83915,1,2,1,2,{},139,http://dl.acm.org/citation.cfm?id=126254
3FVBZG9CLJ2K4CUR39TWXD4FLRWH0O,3A0EX8ZRN9C9WELK1RZAREQOHH2YBT,A3F9JBVNMQ4ZUV,95,21188,19,An Information Retrieval Approach For Automatically Constructing Software Libraries,"yoelle s. maarek,daniel m. berry,gail e. kaiser","44","A technology for automatically assembling large software libraries which promote software reuse by helping the user locate the components closest to her/his needs is described. Software libraries are automatically assembled from a set of unorganized components by using information retrieval techniques. The construction of the library is done in two steps. First, attributes are automatically extracted from natural language documentation by using an indexing scheme based on the notions of lexical affinities and quantity of information. Then a hierarchy for browsing is automatically generated using a clustering technique which draws only on the information provided by the attributes. Due to the free-text indexing scheme, tools following this approach can accept free-style natural language queries.",https://pdfs.semanticscholar.org/d6dd/79aef7dbdf5b1532be42ca290e4ca5e03ae4.pdf,1,1,1,2,{},555,http://ieeexplore.ieee.org/abstract/document/83915/
3FVBZG9CLJ2K4CUR39TWXD4FLRWH0O,3IFS6Q0HJJ7MN0NH8VZ2VF60W8XSIY,AZ72Z7VU6TQCN,197,21188,19,An Information Retrieval Approach For Automatically Constructing Software Libraries,"yoelle s. maarek,daniel m. berry,gail e. kaiser","44","A technology for automatically assembling large software libraries which promote software reuse by helping the user locate the components closest to her/his needs is described. Software libraries are automatically assembled from a set of unorganized components by using information retrieval techniques. The construction of the library is done in two steps. First, attributes are automatically extracted from natural language documentation by using an indexing scheme based on the notions of lexical affinities and quantity of information. Then a hierarchy for browsing is automatically generated using a clustering technique which draws only on the information provided by the attributes. Due to the free-text indexing scheme, tools following this approach can accept free-style natural language queries.",DOI: 10.1109/32.83915,1,1,1,2|3,{},556,http://ieeexplore.ieee.org/abstract/document/83915/
3FW4EL5A3LCNLWUNZBU3TXRST6Y22B,3F0BG9B9MQBMU2IUOANUMC4SYREY7A,A3F9JBVNMQ4ZUV,94,20849,19,Towards a Framework for Software Measurement Validation,"barbara a. kitchenham,shari lawrence pfleeger,norman e. fenton","45","In this paper we propose a framework for validating software measurement. We start by defining a measurement structure model that identifies the elementary component of measures and the measurement process, and then consider five other models involved in measurement: unit definition models, instrumentation models, attribute relationship models, measurement protocols and entity population models. We consider a number of measures from the viewpoint of our measurement validation framework and identify a number of shortcomings; in particular we identify a number of problems with the construction of function points. We also compare our view of measurement validation with ideas presented by other researchers and identify a number of areas of disagreement. Finally, we suggest several rules that practitioners and researchers can use to avoid measurement problems, including the use of measurement vectors rather than artificially contrived scalars.",https://www.researchgate.net/profile/Norman_Fenton/publication/3187784_Towards_a_Framework_for_Software_Measurement_Validation/links/0046351b05e6af3200000000/Towards-a-Framework-for-Software-Measurement-Validation.pdf,3,,3,2,{},646,http://ieeexplore.ieee.org/abstract/document/489070/
3FW4EL5A3LCNLWUNZBU3TXRST6Y22B,3PQ8K71NHY83HMIPF7LYTHOBWRUAAI,AZ72Z7VU6TQCN,71,20849,19,Towards a Framework for Software Measurement Validation,"barbara a. kitchenham,shari lawrence pfleeger,norman e. fenton","45","In this paper we propose a framework for validating software measurement. We start by defining a measurement structure model that identifies the elementary component of measures and the measurement process, and then consider five other models involved in measurement: unit definition models, instrumentation models, attribute relationship models, measurement protocols and entity population models. We consider a number of measures from the viewpoint of our measurement validation framework and identify a number of shortcomings; in particular we identify a number of problems with the construction of function points. We also compare our view of measurement validation with ideas presented by other researchers and identify a number of areas of disagreement. Finally, we suggest several rules that practitioners and researchers can use to avoid measurement problems, including the use of measurement vectors rather than artificially contrived scalars.",DOI: 10.1109/32.489070,1,1,,1|2,{},647,http://ieeexplore.ieee.org/abstract/document/489070/
3G3AJKPCXLGNPV2HWAKMVGPVSZP4YQ,39ZSFO5CA9KYXOZRFIF2MH3OTZZUJD,A3F9JBVNMQ4ZUV,75,21180,19,Analyzing Partition Testing Strategies,"elaine j. weyuker,bingchiang jeng","57","Partition testing strategies, which divide a program's input domain into subsets with the tester selecting one or more elements from each subdomain, are analyzed. The conditions that affect the efficiency of partition testing are investigated, and comparisons of the fault detection capabilities of partition testing and random testing are made. The effects of subdomain modifications on partition testing's ability to detect faults are studied.",https://pdfs.semanticscholar.org/8a55/1e8ccb1292e85bcaef86d12dbbaa9f6e1862.pdf,,1,1,1,{},411,http://ieeexplore.ieee.org/abstract/document/83906/
3G3AJKPCXLGNPV2HWAKMVGPVSZP4YQ,3T3IWE1XG7B0JYOFA391EMT8OXZTQP,AZ72Z7VU6TQCN,80,21180,19,Analyzing Partition Testing Strategies,"elaine j. weyuker,bingchiang jeng","57","Partition testing strategies, which divide a program's input domain into subsets with the tester selecting one or more elements from each subdomain, are analyzed. The conditions that affect the efficiency of partition testing are investigated, and comparisons of the fault detection capabilities of partition testing and random testing are made. The effects of subdomain modifications on partition testing's ability to detect faults are studied.",DOI: 10.1109/32.83906,1,1,,2|3,{},411,http://ieeexplore.ieee.org/abstract/document/83906/
3G57RS03HHTFKTDAHUW1R4U4DGP52F,3D8YOU6S9F8M9TKKVZLDDDYJ7SI6UK,A3F9JBVNMQ4ZUV,107,10403,9,Dynamic Structure in Software Architectures,"jeffrey n. magee,jeffrey kramer","47","Much of the recent work on Architecture Description Languages (ADL) has concentrated on specifying organisations of components and connectors which are static. When the ADL specification is used to drive system construction, then the structure of the resulting system in terms of its component instances and their interconnection is fixed. This paper examines ADL features which permit the description of dynamic software architectures in which the organisation of components and connectors may change during system execution.The paper outlines examples of language features which support dynamic structure. These examples are taken from Darwin, a language used to describe distributed system structure. An operational semantics for these features is presented in the -calculus, together with a discussion of their advantages and limitations. The paper discusses some general approaches to dynamic architecture description suggested by these examples.",https://www.researchgate.net/profile/Jeff_Kramer2/publication/221560344_Dynamic_Structure_in_Software_Architectures/links/00b495368ace955e09000000.pdf,1|4,,1,2,{},795,http://dl.acm.org/citation.cfm?id=239104
3G57RS03HHTFKTDAHUW1R4U4DGP52F,3PMBY0YE28RD5I5I7F3P3H3FQ9RC9V,A1665VCUSZL9YT,94,10403,9,Dynamic Structure in Software Architectures,"jeffrey n. magee,jeffrey kramer","47","Much of the recent work on Architecture Description Languages (ADL) has concentrated on specifying organisations of components and connectors which are static. When the ADL specification is used to drive system construction, then the structure of the resulting system in terms of its component instances and their interconnection is fixed. This paper examines ADL features which permit the description of dynamic software architectures in which the organisation of components and connectors may change during system execution.The paper outlines examples of language features which support dynamic structure. These examples are taken from Darwin, a language used to describe distributed system structure. An operational semantics for these features is presented in the -calculus, together with a discussion of their advantages and limitations. The paper discusses some general approaches to dynamic architecture description suggested by these examples.",https://doi.org/10.1145/250707.239104,1,1,1,1|2,{},172,http://dl.acm.org/citation.cfm?id=239104
3G57RS03HHTFKTDAHUW1R4U4DGP52F,3YOH7BII0AVTLNU92TPJJI5KM5GVKU,A30M7MYW1BHQN1,355,10403,9,Dynamic Structure in Software Architectures,"jeffrey n. magee,jeffrey kramer","47","Much of the recent work on Architecture Description Languages (ADL) has concentrated on specifying organisations of components and connectors which are static. When the ADL specification is used to drive system construction, then the structure of the resulting system in terms of its component instances and their interconnection is fixed. This paper examines ADL features which permit the description of dynamic software architectures in which the organisation of components and connectors may change during system execution.The paper outlines examples of language features which support dynamic structure. These examples are taken from Darwin, a language used to describe distributed system structure. An operational semantics for these features is presented in the -calculus, together with a discussion of their advantages and limitations. The paper discusses some general approaches to dynamic architecture description suggested by these examples.",10.1145/250707.239104,1,1,1,2|3,{},795,http://dl.acm.org/citation.cfm?id=239104
3G9UA71JVVIUDTP1C8HQO5UH6X67JJ,3N2BF7Y2VRIJTAZSIGLVJU6F306HMB,A1665VCUSZL9YT,630,2450,1,Hipikat Recommending Pertinent Software Development Artifacts,"davor cubranic,gail c. murphy","55","A newcomer to a software project must typically come up-to-speed on a large, varied amount of information about the project before becoming productive. Assimilating this information in the open-source context is difficult because a newcomer cannot rely on the mentoring approach that is commonly used in traditional software developments. To help a newcomer to an open-source project become productive faster, we propose Hipikat, a tool that forms an implicit group memory from the information stored in a project's archives, and that recommends artifacts from the archives that are relevant to a task that a newcomer is trying to perform. To investigate this approach, we have instantiated the Hipikat tool for the Eclipse open-source project. In this paper, we describe the Hipikat tool, we report on a qualitative study conducted with a Hipikat mock-up on a medium-sized in-house project, and we report on a case study in which Hipikat recommendations were evaluated for a task on Eclipse.",http://dl.acm.org/citation.cfm?id=776866,1,1,3,1|2,{},105,http://dl.acm.org/citation.cfm?id=776866
3G9UA71JVVIUDTP1C8HQO5UH6X67JJ,3XM0HYN6NLNDU353KV5HFV3XGKIEP7,A30M7MYW1BHQN1,222,2450,1,Hipikat Recommending Pertinent Software Development Artifacts,"davor cubranic,gail c. murphy","55","A newcomer to a software project must typically come up-to-speed on a large, varied amount of information about the project before becoming productive. Assimilating this information in the open-source context is difficult because a newcomer cannot rely on the mentoring approach that is commonly used in traditional software developments. To help a newcomer to an open-source project become productive faster, we propose Hipikat, a tool that forms an implicit group memory from the information stored in a project's archives, and that recommends artifacts from the archives that are relevant to a task that a newcomer is trying to perform. To investigate this approach, we have instantiated the Hipikat tool for the Eclipse open-source project. In this paper, we describe the Hipikat tool, we report on a qualitative study conducted with a Hipikat mock-up on a medium-sized in-house project, and we report on a case study in which Hipikat recommendations were evaluated for a task on Eclipse.",http://dl.acm.org.sci-hub.cc/citation.cfm?id=776866,3,1,2,2,{},340,http://dl.acm.org/citation.cfm?id=776866
3G9UA71JVVIUDTP1C8HQO5UH6X67JJ,3ZPBJO59KQPGPGTF5NMS04JLU6RHDA,A3F9JBVNMQ4ZUV,367,2450,1,Hipikat Recommending Pertinent Software Development Artifacts,"davor cubranic,gail c. murphy","55","A newcomer to a software project must typically come up-to-speed on a large, varied amount of information about the project before becoming productive. Assimilating this information in the open-source context is difficult because a newcomer cannot rely on the mentoring approach that is commonly used in traditional software developments. To help a newcomer to an open-source project become productive faster, we propose Hipikat, a tool that forms an implicit group memory from the information stored in a project's archives, and that recommends artifacts from the archives that are relevant to a task that a newcomer is trying to perform. To investigate this approach, we have instantiated the Hipikat tool for the Eclipse open-source project. In this paper, we describe the Hipikat tool, we report on a qualitative study conducted with a Hipikat mock-up on a medium-sized in-house project, and we report on a case study in which Hipikat recommendations were evaluated for a task on Eclipse.",icse.2003.1201219,3,1,1,1|2,{},339,http://dl.acm.org/citation.cfm?id=776866
3GVPRXWRPHIYII5VUQWQC4FHTIH7I7,30LSNF239VJTI16JEGKW4XTWXS6I2K,A3F9JBVNMQ4ZUV,67,1977,1,Perracotta mining temporal API rules from imperfect traces,"jinlin yang,david evans,deepali bhardwaj,thirumalesh bhat,manuvir das","59","Dynamic inference techniques have been demonstrated to provide useful support for various software engineering tasks including bug finding, test suite evaluation and improvement, and specification generation. To date, however, dynamic inference has only been used effectively on small programs under controlled conditions. In this paper, we identify reasons why scaling dynamic inference techniques has proven difficult, and introduce solutions that enable a dynamic inference technique to scale to large programs and work effectively with the imperfect traces typically available in industrial scenarios. We describe our approximate inference algorithm, present and evaluate heuristics for winnowing the large number of inferred properties to a manageable set of interesting properties, and report on experiments using inferred properties. We evaluate our techniques on JBoss and the Windows kernel. Our tool is able to infer many of the properties checked by the Static Driver Verifier and leads us to discover a previously unknown bug in Windows.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.460.3882&rep=rep1&type=pdf,1|3,1,1,2,{},334,http://dl.acm.org/citation.cfm?id=1134325
3GVPRXWRPHIYII5VUQWQC4FHTIH7I7,32XVDSJFP0LFEKWAZVIOWQ0DEDX2MF,AZ72Z7VU6TQCN,312,1977,1,Perracotta mining temporal API rules from imperfect traces,"jinlin yang,david evans,deepali bhardwaj,thirumalesh bhat,manuvir das","59","Dynamic inference techniques have been demonstrated to provide useful support for various software engineering tasks including bug finding, test suite evaluation and improvement, and specification generation. To date, however, dynamic inference has only been used effectively on small programs under controlled conditions. In this paper, we identify reasons why scaling dynamic inference techniques has proven difficult, and introduce solutions that enable a dynamic inference technique to scale to large programs and work effectively with the imperfect traces typically available in industrial scenarios. We describe our approximate inference algorithm, present and evaluate heuristics for winnowing the large number of inferred properties to a manageable set of interesting properties, and report on experiments using inferred properties. We evaluate our techniques on JBoss and the Windows kernel. Our tool is able to infer many of the properties checked by the Static Driver Verifier and leads us to discover a previously unknown bug in Windows.",doi>10.1145/1134285.1134325,1,1,1,1|2,{},334,http://dl.acm.org/citation.cfm?id=1134325
3GVPRXWRPHIYII5VUQWQC4FHTIH7I7,37Q970SNZFWBNURJ0OEW3GPEESCS13,A3TKUXUTDX6FBF,67,1977,1,Perracotta mining temporal API rules from imperfect traces,"jinlin yang,david evans,deepali bhardwaj,thirumalesh bhat,manuvir das","59","Dynamic inference techniques have been demonstrated to provide useful support for various software engineering tasks including bug finding, test suite evaluation and improvement, and specification generation. To date, however, dynamic inference has only been used effectively on small programs under controlled conditions. In this paper, we identify reasons why scaling dynamic inference techniques has proven difficult, and introduce solutions that enable a dynamic inference technique to scale to large programs and work effectively with the imperfect traces typically available in industrial scenarios. We describe our approximate inference algorithm, present and evaluate heuristics for winnowing the large number of inferred properties to a manageable set of interesting properties, and report on experiments using inferred properties. We evaluate our techniques on JBoss and the Windows kernel. Our tool is able to infer many of the properties checked by the Static Driver Verifier and leads us to discover a previously unknown bug in Windows.",http://sci-hub.cc/10.1145/1134285.1134325,4,1,2,2,{},http://dl.acm.org/citation.cfm?id=1134325,125
3H1C3QRA017SEUY5POEA7B93201ECY,3D4CH1LGEBHQMULN91Z8T8OUOMGG9C,A3F9JBVNMQ4ZUV,70,20392,19,The Confounding Effect of Class Size on the Validity of ObjectOriented Metrics,"khaled el emam,saida benlarbi,nishith goel,shesh n. rai","54","Much effort has been devoted to the development and empirical validation of object-oriented metrics. The empirical validations performed thus far would suggest that a core set of validated metrics is close to being identified. However, none of these studies allow for the potentially confounding effect of class size. In this paper, we demonstrate a strong size confounding effect and question the results of previous object-oriented metrics validation studies. We first investigated whether there is a confounding effect of class size in validation studies of object-oriented metrics and show that, based on previous work, there is reason to believe that such an effect exists. We then describe a detailed empirical methodology for identifying those effects. Finally, we perform a study on a large C++ telecommunications framework to examine if size is really a confounder. This study considered the Chidamber and Kemerer metrics and a subset of the Lorenz and Kidd metrics. The dependent variable was the incidence of a fault attributable to a field failure (fault-proneness of a class). Our findings indicate that, before controlling for size, the results are very similar to previous studies: The metrics that are expected to be validated are indeed associated with fault-proneness. After controlling for size, none of the metrics we studied were associated with fault-proneness anymore. This demonstrates a strong size confounding effect and casts doubt on the results of previous object-oriented metrics validation studies. It is recommended that previous validation studies be reexamined to determine whether their conclusions would still hold after controlling for size and that future validation studies should always control for size.",https://pdfs.semanticscholar.org/4a73/eb3dabced9f6bb35b13a9a8e2373f64f613c.pdf,1|3,1,1,2,{},387,http://ieeexplore.ieee.org/abstract/document/935855/
3HKIF5DF6YLO0ANTJZU75OT79VD9GT,3AZHRG4CU587WOLMEQ9VH3YSHDM03H,A3F9JBVNMQ4ZUV,58,10072,9,Using task context to improve programmer productivity,"mik kersten,gail c. murphy","49","When working on a large software system, a programmer typically spends an inordinate amount of time sifting through thousands of artifacts to find just the subset of information needed to complete an assigned task. All too often, before completing the task the programmer must switch to working on a different task. These task switches waste time as the programmer must repeatedly find and identify the information relevant to the task-at-hand. In this paper, we present a mechanism that captures, models, and persists the elements and relations relevant to a task. We show how our task context model reduces information overload and focuses a programmer's work by filtering and ranking the information presented by the development environment. A task context is created by monitoring a programmer's activity and extracting the structural relationships of program artifacts. Operations on task contexts integrate with development environment features, such as structure display, search, and change management. We have validated our approach with a longitudinal field study of Mylar, our implementation of task context for the Eclipse development environment. We report a statistically significant improvement in the productivity of 16 industry programmers who voluntarily used Mylar for their daily work.",http://maveric0.uwaterloo.ca/~migod/846/papers/murphy-fse06.pdf,1|4,1,1,1|2,{},372,http://dl.acm.org/citation.cfm?id=1181777
3HKIF5DF6YLO0ANTJZU75OT79VD9GT,3LRLIPTPERX9TZRBRYYNNVR71KAKAR,A1ODVXVCDHOVF1,264,10072,9,Using task context to improve programmer productivity,"mik kersten,gail c. murphy","49","When working on a large software system, a programmer typically spends an inordinate amount of time sifting through thousands of artifacts to find just the subset of information needed to complete an assigned task. All too often, before completing the task the programmer must switch to working on a different task. These task switches waste time as the programmer must repeatedly find and identify the information relevant to the task-at-hand. In this paper, we present a mechanism that captures, models, and persists the elements and relations relevant to a task. We show how our task context model reduces information overload and focuses a programmer's work by filtering and ranking the information presented by the development environment. A task context is created by monitoring a programmer's activity and extracting the structural relationships of program artifacts. Operations on task contexts integrate with development environment features, such as structure display, search, and change management. We have validated our approach with a longitudinal field study of Mylar, our implementation of task context for the Eclipse development environment. We report a statistically significant improvement in the productivity of 16 industry programmers who voluntarily used Mylar for their daily work.",10.1145/1181775.1181777,3|4,1,2,1|2,{},372,http://dl.acm.org/citation.cfm?id=1181777
3HKIF5DF6YLO0ANTJZU75OT79VD9GT,3XUHV3NRVLMLL3EMQH492SVTIBA5HG,AZ72Z7VU6TQCN,331,10072,9,Using task context to improve programmer productivity,"mik kersten,gail c. murphy","49","When working on a large software system, a programmer typically spends an inordinate amount of time sifting through thousands of artifacts to find just the subset of information needed to complete an assigned task. All too often, before completing the task the programmer must switch to working on a different task. These task switches waste time as the programmer must repeatedly find and identify the information relevant to the task-at-hand. In this paper, we present a mechanism that captures, models, and persists the elements and relations relevant to a task. We show how our task context model reduces information overload and focuses a programmer's work by filtering and ranking the information presented by the development environment. A task context is created by monitoring a programmer's activity and extracting the structural relationships of program artifacts. Operations on task contexts integrate with development environment features, such as structure display, search, and change management. We have validated our approach with a longitudinal field study of Mylar, our implementation of task context for the Eclipse development environment. We report a statistically significant improvement in the productivity of 16 industry programmers who voluntarily used Mylar for their daily work.",doi>10.1145/1181775.1181777,1,1,1,1|2,{},372,http://dl.acm.org/citation.cfm?id=1181777
3HYV4299H0KQ2R8S8CY55PDKC9GE8S,31LVTDXBL8YCCMVAE9WAXLTWQPILRK,A3F9JBVNMQ4ZUV,78,3898,1,Program Slicing,mark weiser,"71","Program slicing is a method used by experienced computer programmers for abstracting from programs. Starting from a subset of a program's behavior, slicing reduces that program to a minimal form which still produces that behavior. The reduced program, called a slice, is an independent program guaranteed to faithfully represent the original program within the domain of the specified subset of behavior. Finding a slice is in general unsolvable. A dataflow algorithm is presented for approximating slices when the behavior subset is specified as the values of a set of variables at a statement. Experimental evidence is presented that these slices are used by programmers during debugging. Experience with two automatic slicing tools is summarized. New measures of program complexity are suggested based on the organization of a program's slices.",http://laser.cs.umass.edu/courses/cs521-621.Fall10/documents/WeiserSlicing.pdf,1,1,1,2,{},4278,http://dl.acm.org/citation.cfm?id=802557
3HYV4299H0KQ2R8S8CY55PDKC9GE8S,3MH9DQ757X0O6M9Q7CUZP4B82SNUGL,A2VO6V2FJEQZZ,124,3898,1,Program Slicing,mark weiser,"71","Program slicing is a method used by experienced computer programmers for abstracting from programs. Starting from a subset of a program's behavior, slicing reduces that program to a minimal form which still produces that behavior. The reduced program, called a slice, is an independent program guaranteed to faithfully represent the original program within the domain of the specified subset of behavior. Finding a slice is in general unsolvable. A dataflow algorithm is presented for approximating slices when the behavior subset is specified as the values of a set of variables at a statement. Experimental evidence is presented that these slices are used by programmers during debugging. Experience with two automatic slicing tools is summarized. New measures of program complexity are suggested based on the organization of a program's slices.",http://laser.cs.umass.edu/courses/cs521-621.Fall10/documents/WeiserSlicing.pdf,1,1,1,1|2|3,{},4279,http://dl.acm.org/citation.cfm?id=802557
3I7SHAD35MKKE1VMF5UI4XMYAR17MN,3RXCAC0YISDQ8P2D49TUTCTJ4IF8G0,A1ODVXVCDHOVF1,40,1802,1,An approach to detecting duplicate bug reports using natural language and execution information,"xiaoying wang,lu zhang,tao xie,john anvik,jiasu sun","49","An open source project typically maintains an open bug repository so that bug reports from all over the world can be gathered. When a new bug report is submitted to the repository, a person, called a triager, examines whether it is a duplicate of an existing bug report. If it is, the triager marks it as DUPLICATE and the bug report is removed from consideration for further work. In the literature, there are approaches exploiting only natural language information to detect duplicate bug reports. In this paper we present a new approach that further involves execution information. In our approach, when a new bug report arrives, its natural language information and execution information are compared with those of the existing bug reports. Then, a small number of existing bug reports are suggested to the triager as the most similar bug reports to the new bug report. Finally, the triager examines the suggested bug reports to determine whether the new bug report duplicates an existing bug report. We calibrated our approach on a subset of the Eclipse bug repository and evaluated our approach on a subset of the Firefox bug repository. The experimental results show that our approach can detect 67%-93% of duplicate bug reports in the Firefox bug repository, compared to 43%-72% using natural language information alone.",{},2|3,1,2,2,{},357,http://ieeexplore.ieee.org/abstract/document/4814157/
3I7SHAD35MKKE1VMF5UI4XMYAR17MN,3TAYZSBPLMWICF9FJSEA8ZZJ6S5S2N,AMGQ3YEAMC3Z2,193,1802,1,An approach to detecting duplicate bug reports using natural language and execution information,"xiaoying wang,lu zhang,tao xie,john anvik,jiasu sun","49","An open source project typically maintains an open bug repository so that bug reports from all over the world can be gathered. When a new bug report is submitted to the repository, a person, called a triager, examines whether it is a duplicate of an existing bug report. If it is, the triager marks it as DUPLICATE and the bug report is removed from consideration for further work. In the literature, there are approaches exploiting only natural language information to detect duplicate bug reports. In this paper we present a new approach that further involves execution information. In our approach, when a new bug report arrives, its natural language information and execution information are compared with those of the existing bug reports. Then, a small number of existing bug reports are suggested to the triager as the most similar bug reports to the new bug report. Finally, the triager examines the suggested bug reports to determine whether the new bug report duplicates an existing bug report. We calibrated our approach on a subset of the Eclipse bug repository and evaluated our approach on a subset of the Firefox bug repository. The experimental results show that our approach can detect 67%-93% of duplicate bug reports in the Firefox bug repository, compared to 43%-72% using natural language information alone.",https://doi.org/10.1145/1368088.1368151,3,1,1,2,{},120,http://ieeexplore.ieee.org/abstract/document/4814157/citations?tabFilter=papers
3I7SHAD35MKKE1VMF5UI4XMYAR17MN,3TYCR1GOTD7LEDH1OQQNJOVVZ5OZLC,A3F9JBVNMQ4ZUV,110,1802,1,An approach to detecting duplicate bug reports using natural language and execution information,"xiaoying wang,lu zhang,tao xie,john anvik,jiasu sun","49","An open source project typically maintains an open bug repository so that bug reports from all over the world can be gathered. When a new bug report is submitted to the repository, a person, called a triager, examines whether it is a duplicate of an existing bug report. If it is, the triager marks it as DUPLICATE and the bug report is removed from consideration for further work. In the literature, there are approaches exploiting only natural language information to detect duplicate bug reports. In this paper we present a new approach that further involves execution information. In our approach, when a new bug report arrives, its natural language information and execution information are compared with those of the existing bug reports. Then, a small number of existing bug reports are suggested to the triager as the most similar bug reports to the new bug report. Finally, the triager examines the suggested bug reports to determine whether the new bug report duplicates an existing bug report. We calibrated our approach on a subset of the Eclipse bug repository and evaluated our approach on a subset of the Firefox bug repository. The experimental results show that our approach can detect 67%-93% of duplicate bug reports in the Firefox bug repository, compared to 43%-72% using natural language information alone.",https://www.researchgate.net/profile/Tao_Xie13/publication/221554559_An_approach_to_detecting_duplicate_bug_reports_using_natural_language_and_execution_information/links/547c6fd00cf205d1688229b2.pdf,1|4,1,1,2,{},357,http://ieeexplore.ieee.org/abstract/document/4814157/
3INZSNUD80ELOQD2H9TZZ3QAW3X9DJ,3CP1TO84PUPH6DB47W12FOPRS7Z25V,A3F9JBVNMQ4ZUV,56,5462,2,Detection of Logical Coupling Based on Product Release History,"harald c. gall,karin hajek,mehdi jazayeri","54","Code-based metrics such as coupling and cohesion are used to measure a system's structural complexity. But dealing with large systems-those consisting of several millions of lines- at the code level faces many problems. An alternative approach is to concentrate on the system's building blocks such as programs or modules as the unit of examination. We present an approach that uses information in a release history of a system to uncover logical dependencies and change patterns among modules. We have developed the approach by working with 20 releases of a large Telecommunications Switching System. We use release information such as version numbers of programs, modules, and subsystems together with change reports to discover common change behavior (i.e. change patterns) of modules. Our approach identifies logical coupling among modules in such a way that potential structural shortcomings can be identified and further examined, pointing to restructuring or reengineering opportunities.",https://www.researchgate.net/profile/Mehdi_Jazayeri/publication/3784753_Detection_of_logical_coupling_based_on_product_release_history/links/00b49526f85bfd9ade000000.pdf,1|3,1,1,2,{},469,http://ieeexplore.ieee.org/abstract/document/738508/
3INZSNUD80ELOQD2H9TZZ3QAW3X9DJ,3LEP4MGT3HO6Y3QT5VCWETGNZ96DB6,A1665VCUSZL9YT,225,5462,2,Detection of Logical Coupling Based on Product Release History,"harald c. gall,karin hajek,mehdi jazayeri","54","Code-based metrics such as coupling and cohesion are used to measure a system's structural complexity. But dealing with large systems-those consisting of several millions of lines- at the code level faces many problems. An alternative approach is to concentrate on the system's building blocks such as programs or modules as the unit of examination. We present an approach that uses information in a release history of a system to uncover logical dependencies and change patterns among modules. We have developed the approach by working with 20 releases of a large Telecommunications Switching System. We use release information such as version numbers of programs, modules, and subsystems together with change reports to discover common change behavior (i.e. change patterns) of modules. Our approach identifies logical coupling among modules in such a way that potential structural shortcomings can be identified and further examined, pointing to restructuring or reengineering opportunities.",DOI: 10.1109/ICSM.1998.738508,1,,1,1|2,{},118,http://dl.acm.org/citation.cfm?id=853338
3INZSNUD80ELOQD2H9TZZ3QAW3X9DJ,3WLEIWSYHP5TM6VZ8Y2B4LSHXQKH25,A30M7MYW1BHQN1,568,5462,2,Detection of Logical Coupling Based on Product Release History,"harald c. gall,karin hajek,mehdi jazayeri","54","Code-based metrics such as coupling and cohesion are used to measure a system's structural complexity. But dealing with large systems-those consisting of several millions of lines- at the code level faces many problems. An alternative approach is to concentrate on the system's building blocks such as programs or modules as the unit of examination. We present an approach that uses information in a release history of a system to uncover logical dependencies and change patterns among modules. We have developed the approach by working with 20 releases of a large Telecommunications Switching System. We use release information such as version numbers of programs, modules, and subsystems together with change reports to discover common change behavior (i.e. change patterns) of modules. Our approach identifies logical coupling among modules in such a way that potential structural shortcomings can be identified and further examined, pointing to restructuring or reengineering opportunities.",10.1109/ICSM.1998.738508,3,1,1,2|3,{},470,http://ieeexplore.ieee.org/abstract/document/738508/
3KA7IJSNW6TD1GVPK2YQQ32PYM3BP9,36PW28KO40K67ZZ1VCNKP0E2I9LAED,AZ72Z7VU6TQCN,93,20508,19,A Unified Framework for Coupling Measurement in ObjectOriented Systems,"lionel c. briand,john w. daly,jurgen wust","81","The increasing importance being placed on software measurement has led to an increased amount of research developing new software measures. Given the importance of object-oriented development techniques, one specific area where this has occurred is coupling measurement in object-oriented systems. However, despite a very interesting and rich body of work, there is little understanding of the motivation and empirical hypotheses behind many of these new measures. It is often difficult to determine how such measures relate to one another and for which application they can be used. As a consequence, it is very difficult for practitioners and researchers to obtain a clear picture of the state-of-the-art in order to select or define measures for object-oriented systems.This situation is addressed and clarified through several different activities. First, a standardized terminology and formalism for expressing measures is provided which ensures that all measures using it are expressed in a fully consistent and operational manner. Second, to provide a structured synthesis, a review of the existing frameworks and measures for coupling measurement in object-oriented systems takes place. Third, a unified framework, based on the issues discovered in the review, is provided and all existing measures are then classified according to this framework.This paper contributes to an increased understanding of the state-of-the-art: A mechanism is provided for comparing measures and their potential use, integrating existing measures which examine the same concepts in different ways, and facilitating more rigorous decision making regarding the definition of new measures and the selection of existing measures for a specific goal of measurement. In addition, our review of the state-of-the-art highlights that many measures are not defined in a fully operational form, and relatively few of them are based on explicit empirical models, as recommended by measurement theory.",DOI: 10.1109/32.748920,1|2,1,1,1|2,{},946,http://ieeexplore.ieee.org/abstract/document/748920/
3KA7IJSNW6TD1GVPK2YQQ32PYM3BP9,3T3IWE1XG7B0JYOFA391EMT8OGTQTI,A3F9JBVNMQ4ZUV,76,20508,19,A Unified Framework for Coupling Measurement in ObjectOriented Systems,"lionel c. briand,john w. daly,jurgen wust","81","The increasing importance being placed on software measurement has led to an increased amount of research developing new software measures. Given the importance of object-oriented development techniques, one specific area where this has occurred is coupling measurement in object-oriented systems. However, despite a very interesting and rich body of work, there is little understanding of the motivation and empirical hypotheses behind many of these new measures. It is often difficult to determine how such measures relate to one another and for which application they can be used. As a consequence, it is very difficult for practitioners and researchers to obtain a clear picture of the state-of-the-art in order to select or define measures for object-oriented systems.This situation is addressed and clarified through several different activities. First, a standardized terminology and formalism for expressing measures is provided which ensures that all measures using it are expressed in a fully consistent and operational manner. Second, to provide a structured synthesis, a review of the existing frameworks and measures for coupling measurement in object-oriented systems takes place. Third, a unified framework, based on the issues discovered in the review, is provided and all existing measures are then classified according to this framework.This paper contributes to an increased understanding of the state-of-the-art: A mechanism is provided for comparing measures and their potential use, integrating existing measures which examine the same concepts in different ways, and facilitating more rigorous decision making regarding the definition of new measures and the selection of existing measures for a specific goal of measurement. In addition, our review of the state-of-the-art highlights that many measures are not defined in a fully operational form, and relatively few of them are based on explicit empirical models, as recommended by measurement theory.",http://www.sdml.cs.kent.edu/library/Briand'99.pdf,,1,1,1|2,{},945,http://ieeexplore.ieee.org/abstract/document/748920/
3L1EFR8WWTTIMARY8FOPN3TV8GD9FU,31QNSG6A5SH7FWRCB6P0NZGQ5GE87H,A30M7MYW1BHQN1,189,6441,3,On Finding Duplication and NearDuplication in Large Software Systems,brenda s. baker,"49","This paper describes how a program called dup can be used to locate instances of duplication or near-duplication in a software system. Dup reports both textually identical sections of code and sections that are the same textually except for systematic substitution of one set of variable names and constants for another. Further processing locates longer sections of code that are the same except for other small modifications. Experimental results from running dup on millions of lines from two large software systems show dup to be both effective at locating duplication and fast. Applications could include identifying sections of code that should be replaced by procedures, elimination of duplication during reengineering of the system, redocumentation to include references to copies, and debugging.",10.1109/WCRE.1995.514697,1,2,1,3,{},726,http://ieeexplore.ieee.org/abstract/document/514697/
3L1EFR8WWTTIMARY8FOPN3TV8GD9FU,3ATPCQ38J9Y4D4GSVDZEW36IZHVAYO,AZ72Z7VU6TQCN,93,6441,3,On Finding Duplication and NearDuplication in Large Software Systems,brenda s. baker,"49","This paper describes how a program called dup can be used to locate instances of duplication or near-duplication in a software system. Dup reports both textually identical sections of code and sections that are the same textually except for systematic substitution of one set of variable names and constants for another. Further processing locates longer sections of code that are the same except for other small modifications. Experimental results from running dup on millions of lines from two large software systems show dup to be both effective at locating duplication and fast. Applications could include identifying sections of code that should be replaced by procedures, elimination of duplication during reengineering of the system, redocumentation to include references to copies, and debugging.",DOI: 10.1109/WCRE.1995.514697,1,1,,2|3,{},729,http://ieeexplore.ieee.org/abstract/document/514697/
3L1EFR8WWTTIMARY8FOPN3TV8GD9FU,3TE22NPXPC09D8MRX51G3BGBCPW44K,A3F9JBVNMQ4ZUV,46,6441,3,On Finding Duplication and NearDuplication in Large Software Systems,brenda s. baker,"49","This paper describes how a program called dup can be used to locate instances of duplication or near-duplication in a software system. Dup reports both textually identical sections of code and sections that are the same textually except for systematic substitution of one set of variable names and constants for another. Further processing locates longer sections of code that are the same except for other small modifications. Experimental results from running dup on millions of lines from two large software systems show dup to be both effective at locating duplication and fast. Applications could include identifying sections of code that should be replaced by procedures, elimination of duplication during reengineering of the system, redocumentation to include references to copies, and debugging.",http://plg.uwaterloo.ca/~migod/846/papers/wcre95-baker.pdf,3,1,1,1|2,{},726,http://ieeexplore.ieee.org/abstract/document/514697/
3L21G7IH47K6XW5Y9S1KXIISGFF1YA,34T446B1C12V9OH57JKWA62MOC30CS,AZ72Z7VU6TQCN,1047,31826,28,The Design and Implementation of Hierarchical Software Systems with Reusable Components,"don s. batory,sean w. o'malley","63","We present a domain-independent model of hierarchical software system design and construction that is based on interchangeable software components and large-scale reuse. The model unifies the conceptualizations of two independent projects, Genesis and Avoca, that are successful examples of software component/building-block technologies and domain modeling. Building-block technologies exploit large-scale reuse, rely on open architecture software, and elevate the granularity of programming to the subsystem level. Domain modeling formalizes the similarities and differences among systems of a domain. We believe our model is a blueprint for achieving software component technologies in many domains.",doi>10.1145/136586.136587,1|2,1,1,1|2,{},793,http://dl.acm.org/citation.cfm?id=136587
3L21G7IH47K6XW5Y9S1KXIISGFF1YA,354P56DE9LRPYG6LP4V54QGRITV7ST,A30M7MYW1BHQN1,329,31826,28,The Design and Implementation of Hierarchical Software Systems with Reusable Components,"don s. batory,sean w. o'malley","63","We present a domain-independent model of hierarchical software system design and construction that is based on interchangeable software components and large-scale reuse. The model unifies the conceptualizations of two independent projects, Genesis and Avoca, that are successful examples of software component/building-block technologies and domain modeling. Building-block technologies exploit large-scale reuse, rely on open architecture software, and elevate the granularity of programming to the subsystem level. Domain modeling formalizes the similarities and differences among systems of a domain. We believe our model is a blueprint for achieving software component technologies in many domains.",10.1145/136586.136587,1,1,1,2|4,{},793,http://dl.acm.org/citation.cfm?id=136587
3LN3BXKGC0JZC601CA4ZJ81I7WYGWQ,39LNWE0K4VK22DFLX0U2AGOOGNDIUY,A30M7MYW1BHQN1,203,20994,19,An Experimental Comparison of the Effectiveness of Branch Testing and Data Flow Testing,"phyllis g. frankl,stewart n. weiss","53","An experiment comparing the effectiveness of the all-uses and all-edges test data adequacy criteria is discussed. The experiment was designed to overcome some of the deficiencies of previous software testing experiments. A large number of test sets was randomly generated for each of nine subject programs with subtle errors. For each test set, the percentages of executable edges and definition-use associations covered were measured, and it was determined whether the test set exposed an error. Hypothesis testing was used to investigate whether all-uses adequate test sets are more likely to expose errors than are all-edges adequate test sets. Logistic regression analysis was used to investigate whether the probability that a test set exposes an error increases as the percentage of definition-use associations or edges covered by it increases. Error exposing ability was shown to be strongly positively correlated to percentage of covered definition-use associations in only four of the nine subjects. Error exposing ability was also shown to be positively correlated to the percentage of covered edges in four different subjects, but the relationship was weaker.",10.1109/32.238581,1,2,1,2|3,{},311,http://ieeexplore.ieee.org/abstract/document/238581/
3LN3BXKGC0JZC601CA4ZJ81I7WYGWQ,3IAEQB9FMF8YM6O40M8S17T89UGWD1,A3F9JBVNMQ4ZUV,65,20994,19,An Experimental Comparison of the Effectiveness of Branch Testing and Data Flow Testing,"phyllis g. frankl,stewart n. weiss","53","An experiment comparing the effectiveness of the all-uses and all-edges test data adequacy criteria is discussed. The experiment was designed to overcome some of the deficiencies of previous software testing experiments. A large number of test sets was randomly generated for each of nine subject programs with subtle errors. For each test set, the percentages of executable edges and definition-use associations covered were measured, and it was determined whether the test set exposed an error. Hypothesis testing was used to investigate whether all-uses adequate test sets are more likely to expose errors than are all-edges adequate test sets. Logistic regression analysis was used to investigate whether the probability that a test set exposes an error increases as the percentage of definition-use associations or edges covered by it increases. Error exposing ability was shown to be strongly positively correlated to percentage of covered definition-use associations in only four of the nine subjects. Error exposing ability was also shown to be positively correlated to the percentage of covered edges in four different subjects, but the relationship was weaker.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.9183&rep=rep1&type=pdf,1,1,1,1|2,{},311,http://ieeexplore.ieee.org/abstract/document/238581/
3LN3BXKGC0JZC601CA4ZJ81I7WYGWQ,3RWE2M8QWIYE0SEWW9TAQHWYMCIN0P,AZ72Z7VU6TQCN,126,20994,19,An Experimental Comparison of the Effectiveness of Branch Testing and Data Flow Testing,"phyllis g. frankl,stewart n. weiss","53","An experiment comparing the effectiveness of the all-uses and all-edges test data adequacy criteria is discussed. The experiment was designed to overcome some of the deficiencies of previous software testing experiments. A large number of test sets was randomly generated for each of nine subject programs with subtle errors. For each test set, the percentages of executable edges and definition-use associations covered were measured, and it was determined whether the test set exposed an error. Hypothesis testing was used to investigate whether all-uses adequate test sets are more likely to expose errors than are all-edges adequate test sets. Logistic regression analysis was used to investigate whether the probability that a test set exposes an error increases as the percentage of definition-use associations or edges covered by it increases. Error exposing ability was shown to be strongly positively correlated to percentage of covered definition-use associations in only four of the nine subjects. Error exposing ability was also shown to be positively correlated to the percentage of covered edges in four different subjects, but the relationship was weaker.",DOI: 10.1109/32.238581,1,1,,1|2,{},311,http://ieeexplore.ieee.org/abstract/document/238581/
3LVTFB9DE56US94F015TRJJWJVHGQM,33C7UALJVMMT4ACAMQ8RMPPD2RE81E,A3F9JBVNMQ4ZUV,87,1995,1,Mining metrics to predict component failures,"nachiappan nagappan,thomas a. ball,andreas zeller","76","What is it that makes software fail? In an empirical study of the post-release defect history of five Microsoft software systems, we found that failure-prone software entities are statistically correlated with code complexity measures. However, there is no single set of complexity metrics that could act as a universally best defect predictor. Using principal component analysis on the code metrics, we built regression models that accurately predict the likelihood of post-release defects for new entities. The approach can easily be generalized to arbitrary projects; in particular, predictors obtained from one project can also be significant for new, similar projects.",http://wwwipd.ira.uka.de/Tichy/uploads/folien/122/nagappanICSE06.pdf,3,1,1,1|2,{},633,http://dl.acm.org/citation.cfm?id=1134349
3LVTFB9DE56US94F015TRJJWJVHGQM,3AQF3RZ5596XQBNU0AQERDXGX5Q6F8,A3K6BSW10S4YKJ,59,1995,1,Mining metrics to predict component failures,"nachiappan nagappan,thomas a. ball,andreas zeller","76","What is it that makes software fail? In an empirical study of the post-release defect history of five Microsoft software systems, we found that failure-prone software entities are statistically correlated with code complexity measures. However, there is no single set of complexity metrics that could act as a universally best defect predictor. Using principal component analysis on the code metrics, we built regression models that accurately predict the likelihood of post-release defects for new entities. The approach can easily be generalized to arbitrary projects; in particular, predictors obtained from one project can also be significant for new, similar projects.",10.1145/1134285.1134349,1,1,1,2,{},185,http://dl.acm.org/citation.cfm?id=1134349
3LVTFB9DE56US94F015TRJJWJVHGQM,3TEM0PF1Q6L5EGNJ7FF7UCK48SN0DV,A1ODVXVCDHOVF1,95,1995,1,Mining metrics to predict component failures,"nachiappan nagappan,thomas a. ball,andreas zeller","76","What is it that makes software fail? In an empirical study of the post-release defect history of five Microsoft software systems, we found that failure-prone software entities are statistically correlated with code complexity measures. However, there is no single set of complexity metrics that could act as a universally best defect predictor. Using principal component analysis on the code metrics, we built regression models that accurately predict the likelihood of post-release defects for new entities. The approach can easily be generalized to arbitrary projects; in particular, predictors obtained from one project can also be significant for new, similar projects.",10.1145/1134285.1134349,4,1,,1,{},633,http://dl.acm.org/citation.cfm?id=1134349
3M67TQBQQHCNQJAQXZ2X92I4B009AH,337RC3OW06Q45TCRNT1KYIIZBV9LVR,A1665VCUSZL9YT,435,20551,19,A Critique of Software Defect Prediction Models,"norman e. fenton,martin neil","71","Many organizations want to predict the number of defects (faults) in software systems, before they are deployed, to gauge the likely delivered quality and maintenance effort. To help in this numerous software metrics and statistical models have been developed, with a correspondingly large literature. We provide a critical review of this literature and the state-of-the-art. Most of the wide range of prediction models use size and complexity metrics to predict defects. Others are based on testing data, the ""quality"" of the development process, or take a multivariate approach. The authors of the models have often made heroic contributions to a subject otherwise bereft of empirical studies. However, there are a number of serious theoretical and practical problems in many studies. The models are weak because of their inability to cope with the, as yet, unknown relationship between defects and failures. There are fundamental statistical and data quality problems that undermine model validity. More significantly many prediction models tend to model only part of the underlying problem and seriously misspecify it. To illustrate these points the ""Goldilock's Conjecture,"" that there is an optimum module size, is used to show the considerable problems inherent in current defect prediction approaches. Careful and considered analysis of past and new results shows that the conjecture lacks support and that some models are misleading. We recommend holistic models for software defect prediction, using Bayesian Belief Networks, as alternative approaches to the single-issue models used at present. We also argue for research into a theory of ""software decomposition"" in order to test hypotheses about defect introduction and help construct a better science of software engineering.",https://doi.org/10.1109/32.815326,1,1,2,1|2,{},202,http://dl.acm.org/citation.cfm?id=325401
3M67TQBQQHCNQJAQXZ2X92I4B009AH,36DSNE9QZ6M3KJFUJW3TNBBZBDNOJ6,A3F9JBVNMQ4ZUV,78,20551,19,A Critique of Software Defect Prediction Models,"norman e. fenton,martin neil","71","Many organizations want to predict the number of defects (faults) in software systems, before they are deployed, to gauge the likely delivered quality and maintenance effort. To help in this numerous software metrics and statistical models have been developed, with a correspondingly large literature. We provide a critical review of this literature and the state-of-the-art. Most of the wide range of prediction models use size and complexity metrics to predict defects. Others are based on testing data, the ""quality"" of the development process, or take a multivariate approach. The authors of the models have often made heroic contributions to a subject otherwise bereft of empirical studies. However, there are a number of serious theoretical and practical problems in many studies. The models are weak because of their inability to cope with the, as yet, unknown relationship between defects and failures. There are fundamental statistical and data quality problems that undermine model validity. More significantly many prediction models tend to model only part of the underlying problem and seriously misspecify it. To illustrate these points the ""Goldilock's Conjecture,"" that there is an optimum module size, is used to show the considerable problems inherent in current defect prediction approaches. Careful and considered analysis of past and new results shows that the conjecture lacks support and that some models are misleading. We recommend holistic models for software defect prediction, using Bayesian Belief Networks, as alternative approaches to the single-issue models used at present. We also argue for research into a theory of ""software decomposition"" in order to test hypotheses about defect introduction and help construct a better science of software engineering.",https://www.researchgate.net/profile/Norman_Fenton/publication/3188039_Neil_M_A_critique_of_software_defect_prediction_models_IEEE_Trans_SW_Eng_25_675-689/links/0046351b05e6a10273000000.pdf,1|3,1,1,2,{},1028,http://ieeexplore.ieee.org/abstract/document/815326/
3M67TQBQQHCNQJAQXZ2X92I4B009AH,3YDTZAI2WY4SL9P8ANIE5D980FM41R,A30M7MYW1BHQN1,532,20551,19,A Critique of Software Defect Prediction Models,"norman e. fenton,martin neil","71","Many organizations want to predict the number of defects (faults) in software systems, before they are deployed, to gauge the likely delivered quality and maintenance effort. To help in this numerous software metrics and statistical models have been developed, with a correspondingly large literature. We provide a critical review of this literature and the state-of-the-art. Most of the wide range of prediction models use size and complexity metrics to predict defects. Others are based on testing data, the ""quality"" of the development process, or take a multivariate approach. The authors of the models have often made heroic contributions to a subject otherwise bereft of empirical studies. However, there are a number of serious theoretical and practical problems in many studies. The models are weak because of their inability to cope with the, as yet, unknown relationship between defects and failures. There are fundamental statistical and data quality problems that undermine model validity. More significantly many prediction models tend to model only part of the underlying problem and seriously misspecify it. To illustrate these points the ""Goldilock's Conjecture,"" that there is an optimum module size, is used to show the considerable problems inherent in current defect prediction approaches. Careful and considered analysis of past and new results shows that the conjecture lacks support and that some models are misleading. We recommend holistic models for software defect prediction, using Bayesian Belief Networks, as alternative approaches to the single-issue models used at present. We also argue for research into a theory of ""software decomposition"" in order to test hypotheses about defect introduction and help construct a better science of software engineering.",10.1109/32.815326,1,2,1,2|3,{},1028,http://ieeexplore.ieee.org/abstract/document/815326/
3MDWE879UHQS9TFI3D2T4D2ATIL9BC,34YB12FSQZC5TE4HYA3DYUUEOLNMGH,A3F9JBVNMQ4ZUV,59,2190,1,Is mutation an appropriate tool for testing experiments,"jamie andrews,lionel c. briand,yvan labiche","61","The empirical assessment of test techniques plays an important role in software testing research. One common practice is to instrument faults, either manually or by using mutation operators. The latter allows the systematic, repeatable seeding of large numbers of faults; however, we do not know whether empirical results obtained this way lead to valid, representative conclusions. This paper investigates this important question based on a number of programs with comprehensive pools of test cases and known faults. It is concluded that, based on the data available thus far, the use of mutation operators is yielding trustworthy results (generated mutants are similar to real faults). Mutants appear however to be different from hand-seeded faults that seem to be harder to detect than real faults.",https://www.st.cs.uni-saarland.de/edu/recommendation-systems/papers/andrews-icse05mutation-1.pdf,1,1,1,2,{},701,http://dl.acm.org/citation.cfm?id=1062530
3MDWE879UHQS9TFI3D2T4D2ATIL9BC,3FIJLY1B6VS50H5ZF6PNXDOXSPSPF3,A3VMJIW0DP7007,1112,2190,1,Is mutation an appropriate tool for testing experiments,"jamie andrews,lionel c. briand,yvan labiche","61","The empirical assessment of test techniques plays an important role in software testing research. One common practice is to instrument faults, either manually or by using mutation operators. The latter allows the systematic, repeatable seeding of large numbers of faults; however, we do not know whether empirical results obtained this way lead to valid, representative conclusions. This paper investigates this important question based on a number of programs with comprehensive pools of test cases and known faults. It is concluded that, based on the data available thus far, the use of mutation operators is yielding trustworthy results (generated mutants are similar to real faults). Mutants appear however to be different from hand-seeded faults that seem to be harder to detect than real faults.",http://ai2-s2-pdfs.s3.amazonaws.com/0922/90a5bf11bff5d4095cbb4d2a9014b58fff37.pdf,1,1,1,2|5,{},185,http://dl.acm.org/citation.cfm?id=1062530
3MDWE879UHQS9TFI3D2T4D2ATIL9BC,3JRJSWSMQI96NE0GMX8A2S0WBOT3EN,AZ72Z7VU6TQCN,92,2190,1,Is mutation an appropriate tool for testing experiments,"jamie andrews,lionel c. briand,yvan labiche","61","The empirical assessment of test techniques plays an important role in software testing research. One common practice is to instrument faults, either manually or by using mutation operators. The latter allows the systematic, repeatable seeding of large numbers of faults; however, we do not know whether empirical results obtained this way lead to valid, representative conclusions. This paper investigates this important question based on a number of programs with comprehensive pools of test cases and known faults. It is concluded that, based on the data available thus far, the use of mutation operators is yielding trustworthy results (generated mutants are similar to real faults). Mutants appear however to be different from hand-seeded faults that seem to be harder to detect than real faults.",doi>10.1145/1062455.1062530,1,1,1,1|2,{},703,http://dl.acm.org/citation.cfm?id=1062530
3ODOP6T3AS8XOA9A3PDRMCOQDKU247,354GIDR5ZCUBFWMPV3RCF50LEBW000,A30M7MYW1BHQN1,370,20605,19,Managerial Use of Metrics for ObjectOriented Software An Exploratory Analysis,"shyam r. chidamber,david p. darcy,chris f. kemerer","45","With the increasing use of object-oriented methods in new software development there is a growing need to both document and improve current practice in object-oriented design and development. In response to this need, a number of researchers have developed various metrics for object-oriented systems as proposed aids to the management of these systems. In this research an analysis of a set of metrics proposed by Chidamber and Kemerer [10] is performed in order to assess their usefulness for practicing managers. First, an informal introduction to the metrics is provided by way of an extended example of their managerial use. Second, exploratory analyses of empirical data relating the metrics to productivity, rework effort, and design effort on three commercial object-oriented systems are provided. The empirical results suggest that the metrics provide significant explanatory power for variations in these economic variables, over and above that provided by traditional measures, such as size in lines of code, and after controlling for the effects of individual developers.",10.1109/32.707698,1,1,1,2|3,{},461,http://ieeexplore.ieee.org/abstract/document/707698/
3ODOP6T3AS8XOA9A3PDRMCOQDKU247,3ERMJ6L4DZGM0LTG57ZJSHHLPH6M7E,A3F9JBVNMQ4ZUV,83,20605,19,Managerial Use of Metrics for ObjectOriented Software An Exploratory Analysis,"shyam r. chidamber,david p. darcy,chris f. kemerer","45","With the increasing use of object-oriented methods in new software development there is a growing need to both document and improve current practice in object-oriented design and development. In response to this need, a number of researchers have developed various metrics for object-oriented systems as proposed aids to the management of these systems. In this research an analysis of a set of metrics proposed by Chidamber and Kemerer [10] is performed in order to assess their usefulness for practicing managers. First, an informal introduction to the metrics is provided by way of an extended example of their managerial use. Second, exploratory analyses of empirical data relating the metrics to productivity, rework effort, and design effort on three commercial object-oriented systems are provided. The empirical results suggest that the metrics provide significant explanatory power for variations in these economic variables, over and above that provided by traditional measures, such as size in lines of code, and after controlling for the effects of individual developers.",https://www.researchgate.net/profile/Chris_Kemerer/publication/3187951_Managerial_use_of_metrics_for_object-oriented_software_An_exploratory_analysis/links/00b7d52cc2081e5752000000.pdf,1,1,1,1|2,{},461,http://ieeexplore.ieee.org/abstract/document/707698/
3ODOP6T3AS8XOA9A3PDRMCOQDKU247,3S0TNUHWKU6NW5SM2JSMNRQMRPB8D0,A1ODVXVCDHOVF1,87,20605,19,Managerial Use of Metrics for ObjectOriented Software An Exploratory Analysis,"shyam r. chidamber,david p. darcy,chris f. kemerer","45","With the increasing use of object-oriented methods in new software development there is a growing need to both document and improve current practice in object-oriented design and development. In response to this need, a number of researchers have developed various metrics for object-oriented systems as proposed aids to the management of these systems. In this research an analysis of a set of metrics proposed by Chidamber and Kemerer [10] is performed in order to assess their usefulness for practicing managers. First, an informal introduction to the metrics is provided by way of an extended example of their managerial use. Second, exploratory analyses of empirical data relating the metrics to productivity, rework effort, and design effort on three commercial object-oriented systems are provided. The empirical results suggest that the metrics provide significant explanatory power for variations in these economic variables, over and above that provided by traditional measures, such as size in lines of code, and after controlling for the effects of individual developers.",10.1109/32.707698,2|3|4,,1,2,{},461,http://ieeexplore.ieee.org/abstract/document/707698/?reload=true
3P458N04Q15OMCXKN0FWJNLO6FYX2G,32SVAV9L3GX3X1J46S6O69A5QZ23AF,A3F9JBVNMQ4ZUV,66,2425,1,Recovering DocumentationtoSourceCode Traceability Links using Latent Semantic Indexing,"andrian marcus,jonathan i. maletic","59","An information retrieval technique, latent semantic indexing, is used to automatically identify traceability links from system documentation to program source code. The results of two experiments to identify links in existing software systems (i.e., the LEDA library, and Albergate) are presented. These results are compared with other similar type experimental results of traceability link identification using different types of information retrieval techniques. The method presented proves to give good results by comparison and additionally it is a low cost, highly flexible method to apply with regards to preprocessing and/or parsing of the source code and documentation.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.446.6049&rep=rep1&type=pdf,1|4,1,,1|2,{},670,http://ieeexplore.ieee.org/abstract/document/1201194/
3P458N04Q15OMCXKN0FWJNLO6FYX2G,33SA9F9TRYI3EC24WHJC7PBT993WEM,A1ODVXVCDHOVF1,108,2425,1,Recovering DocumentationtoSourceCode Traceability Links using Latent Semantic Indexing,"andrian marcus,jonathan i. maletic","59","An information retrieval technique, latent semantic indexing, is used to automatically identify traceability links from system documentation to program source code. The results of two experiments to identify links in existing software systems (i.e., the LEDA library, and Albergate) are presented. These results are compared with other similar type experimental results of traceability link identification using different types of information retrieval techniques. The method presented proves to give good results by comparison and additionally it is a low cost, highly flexible method to apply with regards to preprocessing and/or parsing of the source code and documentation.",10.1109/ICSE.2003.1201194,2|6,2,2,2,{},670,http://ieeexplore.ieee.org/abstract/document/1201194/
3P458N04Q15OMCXKN0FWJNLO6FYX2G,3NXNZ5RS1BL7T1AMGYVENVB1PUC973,AZ72Z7VU6TQCN,60,2425,1,Recovering DocumentationtoSourceCode Traceability Links using Latent Semantic Indexing,"andrian marcus,jonathan i. maletic","59","An information retrieval technique, latent semantic indexing, is used to automatically identify traceability links from system documentation to program source code. The results of two experiments to identify links in existing software systems (i.e., the LEDA library, and Albergate) are presented. These results are compared with other similar type experimental results of traceability link identification using different types of information retrieval techniques. The method presented proves to give good results by comparison and additionally it is a low cost, highly flexible method to apply with regards to preprocessing and/or parsing of the source code and documentation.",DOI: 10.1109/ICSE.2003.1201194,1,1,1,1|2,{},671,http://ieeexplore.ieee.org/abstract/document/1201194/
3PKJ68EHDNKR6IVDPH32FIJBK02JHX,39GXDJN2OU29QMS8T4SGTDWTR5UV8J,A30M7MYW1BHQN1,256,19951,19,Advancing Candidate Link Generation for Requirements Tracing The Study of Methods,"jane huffman hayes,alexander dekhtyar,senthil karthikeyan sundaram","47","This paper addresses the issues related to improving the overall quality of the dynamic candidate link generation for the requirements tracing process for Verification and Validation and Independent Verification and Validation analysts. The contribution of the paper is four-fold: We define goals for a tracing tool based on analyst responsibilities in the tracing process, we introduce several new measures for validating that the goals have been satisfied, we implement analyst feedback in the tracing process, and we present a prototype tool that we built, RETRO (REquirements TRacing On-target), to address these goals. We also present the results of a study used to assess RETRO's support of goals and goal elements that can be measured objectively.",10.1109/TSE.2006.3,1,1,1,2|4,{},411,http://ieeexplore.ieee.org/abstract/document/1583599/
3PKJ68EHDNKR6IVDPH32FIJBK02JHX,3HL8HNGX46PK8UPSYHTQBNOIN4I9F2,A3NH3P6J90AFZC,779,19951,19,Advancing Candidate Link Generation for Requirements Tracing The Study of Methods,"jane huffman hayes,alexander dekhtyar,senthil karthikeyan sundaram","47","This paper addresses the issues related to improving the overall quality of the dynamic candidate link generation for the requirements tracing process for Verification and Validation and Independent Verification and Validation analysts. The contribution of the paper is four-fold: We define goals for a tracing tool based on analyst responsibilities in the tracing process, we introduce several new measures for validating that the goals have been satisfied, we implement analyst feedback in the tracing process, and we present a prototype tool that we built, RETRO (REquirements TRacing On-target), to address these goals. We also present the results of a study used to assess RETRO's support of goals and goal elements that can be measured objectively.",10.1109/TSE.2006.3,3|4,1,3,5,{},411,http://ieeexplore.ieee.org/abstract/document/1583599/
3PKJ68EHDNKR6IVDPH32FIJBK02JHX,3VHP9MDGRO8M6SWVA13HDDPQTSJFCT,A3F9JBVNMQ4ZUV,49,19951,19,Advancing Candidate Link Generation for Requirements Tracing The Study of Methods,"jane huffman hayes,alexander dekhtyar,senthil karthikeyan sundaram","47","This paper addresses the issues related to improving the overall quality of the dynamic candidate link generation for the requirements tracing process for Verification and Validation and Independent Verification and Validation analysts. The contribution of the paper is four-fold: We define goals for a tracing tool based on analyst responsibilities in the tracing process, we introduce several new measures for validating that the goals have been satisfied, we implement analyst feedback in the tracing process, and we present a prototype tool that we built, RETRO (REquirements TRacing On-target), to address these goals. We also present the results of a study used to assess RETRO's support of goals and goal elements that can be measured objectively.",http://digitalcommons.calpoly.edu/cgi/viewcontent.cgi?article=1099&context=csse_fac,1,1,1,1|2,{},411,http://ieeexplore.ieee.org/abstract/document/1583599/
3QGHA0EA0JO3LPSQWOCLIXALRJ6BW4,3018Q3ZVOJEVG346HI7KO7DLWONRAY,AZ72Z7VU6TQCN,66,23956,20,People Organizations and Process Improvement,"dewayne e. perry,nancy a. staudenmayer,lawrence g. votta","57","In their efforts to determine how technology affects the software development process, researchers often overlook organizational and social issues. The authors report on two experiments to discover how developers spend their time. They describe how noncoding activities can use up development time and how even a reluctance to use e-mail can influence the development process. The first experiment was to see how programmers thought they spent their time by having them fill out a modified time card reporting their activities, which we called a time diary. In the second experiment, we used direct observation to calibrate and validate the use of time diaries, which helped us evaluate how time was actually being used.",DOI: 10.1109/52.300082,1,1,1,1|2,{},402,http://ieeexplore.ieee.org/abstract/document/300082/
3QGHA0EA0JO3LPSQWOCLIXALRJ6BW4,36V4Q8R5ZLOW63YV168PS8YGU8HQM1,A1665VCUSZL9YT,407,23956,20,People Organizations and Process Improvement,"dewayne e. perry,nancy a. staudenmayer,lawrence g. votta","57","In their efforts to determine how technology affects the software development process, researchers often overlook organizational and social issues. The authors report on two experiments to discover how developers spend their time. They describe how noncoding activities can use up development time and how even a reluctance to use e-mail can influence the development process. The first experiment was to see how programmers thought they spent their time by having them fill out a modified time card reporting their activities, which we called a time diary. In the second experiment, we used direct observation to calibrate and validate the use of time diaries, which helped us evaluate how time was actually being used.",https://doi.org/10.1109/52.300082,1,1,1,1|2,{},111,http://dl.acm.org/citation.cfm?id=182392
3QGHA0EA0JO3LPSQWOCLIXALRJ6BW4,3IOEN3P9S8760WTMTBBT2BTMWWG61I,A3F9JBVNMQ4ZUV,106,23956,20,People Organizations and Process Improvement,"dewayne e. perry,nancy a. staudenmayer,lawrence g. votta","57","In their efforts to determine how technology affects the software development process, researchers often overlook organizational and social issues. The authors report on two experiments to discover how developers spend their time. They describe how noncoding activities can use up development time and how even a reluctance to use e-mail can influence the development process. The first experiment was to see how programmers thought they spent their time by having them fill out a modified time card reporting their activities, which we called a time diary. In the second experiment, we used direct observation to calibrate and validate the use of time diaries, which helped us evaluate how time was actually being used.",http://users.ece.utexas.edu/~perry/work/papers/DP-94-sw.pdf,3,1,2,2|4,{},401,http://ieeexplore.ieee.org/abstract/document/300082/
3QO7EE372OBY1SW4KFDFQ8SZ3IPBQ0,317HQ483I8GP7NVC0ZIGWLWU8PVIND,A1ODVXVCDHOVF1,87,20693,19,Estimating Software Project Effort Using Analogies,"martin j. shepperd,christopher j. schofield","79","Accurate project effort prediction is an important goal for the software engineering community. To date most work has focused upon building algorithmic models of effort, for example COCOMO. These can be calibrated to local environments. We describe an alternative approach to estimation based upon the use of analogies. The underlying principle is to characterize projects in terms of features (for example, the number of interfaces, the development method or the size of the functional requirements document). Completed projects are stored and then the problem becomes one of finding the most similar projects to the one for which a prediction is required. Similarity is defined as Euclidean distance in n-dimensional space where n is the number of project features. Each dimension is standardized so all dimensions have equal weight. The known effort values of the nearest neighbors to the new project are then used as the basis for the prediction. The process is automated using a PC-based tool known as ANGEL. The method is validated on nine different industrial datasets (a total of 275 projects) and in all cases analogy outperforms algorithmic models based upon stepwise regression. From this work we argue that estimation by analogy is a viable technique that, at the very least, can be used by project managers to complement current estimation techniques.",10.1109/32.637387,3|4,1,2,1|2,{},953,http://ieeexplore.ieee.org/abstract/document/637387/
3QO7EE372OBY1SW4KFDFQ8SZ3IPBQ0,33CID57105HKTKA83JVEFNQGKBKL3Y,A1665VCUSZL9YT,269,20693,19,Estimating Software Project Effort Using Analogies,"martin j. shepperd,christopher j. schofield","79","Accurate project effort prediction is an important goal for the software engineering community. To date most work has focused upon building algorithmic models of effort, for example COCOMO. These can be calibrated to local environments. We describe an alternative approach to estimation based upon the use of analogies. The underlying principle is to characterize projects in terms of features (for example, the number of interfaces, the development method or the size of the functional requirements document). Completed projects are stored and then the problem becomes one of finding the most similar projects to the one for which a prediction is required. Similarity is defined as Euclidean distance in n-dimensional space where n is the number of project features. Each dimension is standardized so all dimensions have equal weight. The known effort values of the nearest neighbors to the new project are then used as the basis for the prediction. The process is automated using a PC-based tool known as ANGEL. The method is validated on nine different industrial datasets (a total of 275 projects) and in all cases analogy outperforms algorithmic models based upon stepwise regression. From this work we argue that estimation by analogy is a viable technique that, at the very least, can be used by project managers to complement current estimation techniques.",https://doi.org/10.1109/32.637387,1,1,2,1|2,{},221,http://dl.acm.org/citation.cfm?id=269863
3QO7EE372OBY1SW4KFDFQ8SZ3IPBQ0,3ZPBJO59KQPGPGTF5NMS04JLU64DHJ,A3F9JBVNMQ4ZUV,80,20693,19,Estimating Software Project Effort Using Analogies,"martin j. shepperd,christopher j. schofield","79","Accurate project effort prediction is an important goal for the software engineering community. To date most work has focused upon building algorithmic models of effort, for example COCOMO. These can be calibrated to local environments. We describe an alternative approach to estimation based upon the use of analogies. The underlying principle is to characterize projects in terms of features (for example, the number of interfaces, the development method or the size of the functional requirements document). Completed projects are stored and then the problem becomes one of finding the most similar projects to the one for which a prediction is required. Similarity is defined as Euclidean distance in n-dimensional space where n is the number of project features. Each dimension is standardized so all dimensions have equal weight. The known effort values of the nearest neighbors to the new project are then used as the basis for the prediction. The process is automated using a PC-based tool known as ANGEL. The method is validated on nine different industrial datasets (a total of 275 projects) and in all cases analogy outperforms algorithmic models based upon stepwise regression. From this work we argue that estimation by analogy is a viable technique that, at the very least, can be used by project managers to complement current estimation techniques.",http://dspace.brunel.ac.uk/bitstream/2438/1101/3/Estimating%20Software%201997.pdf,1|4,1,1,1|2,{},953,http://ieeexplore.ieee.org/abstract/document/637387/
3QXFBUZ4ZK4MK2BWHAPY1KGLMGNGUR,3ITXP059PX7IIB7NQDK27GL0843SJO,A1ODVXVCDHOVF1,74,20140,19,Predicting Source Code Changes by Mining Change History,"annie t. t. ying,gail c. murphy,raymond t. ng,mark chu-carroll","62","Software developers are often faced with modification tasks that involve source which is spread across a code base. Some dependencies between source code, such as those between source code written in different languages, are difficult to determine using existing static and dynamic analyses. To augment existing analyses and to help developers identify relevant source code during a modification task, we have developed an approach that applies data mining techniques to determine change patternssets of files that were changed together frequently in the pastfrom the change history of the code base. Our hypothesis is that the change patterns can be used to recommend potentially relevant source code to a developer performing a modification task. We show that this approach can reveal valuable dependencies by applying the approach to the Eclipse and Mozilla open source projects and by evaluating the predictability and interestingness of the recommendations produced for actual modification tasks on these systems.",10.1109/TSE.2004.52,4,1,1,2,{},486,http://ieeexplore.ieee.org/abstract/document/1324645/
3QXFBUZ4ZK4MK2BWHAPY1KGLMGNGUR,3QBD8R3Z227DH1W9GPGPH9MGTN44OG,AZ72Z7VU6TQCN,331,20140,19,Predicting Source Code Changes by Mining Change History,"annie t. t. ying,gail c. murphy,raymond t. ng,mark chu-carroll","62","Software developers are often faced with modification tasks that involve source which is spread across a code base. Some dependencies between source code, such as those between source code written in different languages, are difficult to determine using existing static and dynamic analyses. To augment existing analyses and to help developers identify relevant source code during a modification task, we have developed an approach that applies data mining techniques to determine change patternssets of files that were changed together frequently in the pastfrom the change history of the code base. Our hypothesis is that the change patterns can be used to recommend potentially relevant source code to a developer performing a modification task. We show that this approach can reveal valuable dependencies by applying the approach to the Eclipse and Mozilla open source projects and by evaluating the predictability and interestingness of the recommendations produced for actual modification tasks on these systems.",DOI: 10.1109/TSE.2004.52,1,1,1,1|2,{},194,http://ieeexplore.ieee.org/abstract/document/1324645/
3QXFBUZ4ZK4MK2BWHAPY1KGLMGNGUR,3QEMNNSB2YNJWRN3SE0G9RURG36D7F,A3F9JBVNMQ4ZUV,142,20140,19,Predicting Source Code Changes by Mining Change History,"annie t. t. ying,gail c. murphy,raymond t. ng,mark chu-carroll","62","Software developers are often faced with modification tasks that involve source which is spread across a code base. Some dependencies between source code, such as those between source code written in different languages, are difficult to determine using existing static and dynamic analyses. To augment existing analyses and to help developers identify relevant source code during a modification task, we have developed an approach that applies data mining techniques to determine change patternssets of files that were changed together frequently in the pastfrom the change history of the code base. Our hypothesis is that the change patterns can be used to recommend potentially relevant source code to a developer performing a modification task. We show that this approach can reveal valuable dependencies by applying the approach to the Eclipse and Mozilla open source projects and by evaluating the predictability and interestingness of the recommendations produced for actual modification tasks on these systems.",10.1109/TSE.2004.52,1|3,,1,2,{},486,http://ieeexplore.ieee.org/abstract/document/1324645/
3R4QIDVOJP07BSIJLFK5XZ96NCEEER,3ON104KXQLKLMA5B7B7ZY3Z2WHU4W3,A3F9JBVNMQ4ZUV,87,2161,1,Using structural context to recommend source code examples,"reid holmes,gail c. murphy","48","When coding to a framework, developers often become stuck, unsure of which class to subclass, which objects to instantiate and which methods to call. Example code that demonstrates the use of the framework can help developers make progress on their task. In this paper, we describe an approach for locating relevant code in an example repository that is based on heuristically matching the structure of the code under development to the example code. Our tool improves on existing approaches in two ways. First, the structural context needed to query the repository is extracted automatically from the code, freeing the developer from learning a query language or from writing their code in a particular style. Second, the repository can be generated easily from existing applications. We demonstrate the utility of this approach by reporting on a case study involving two subjects completing four programming tasks within the Eclipse integrated development environment framework.",https://open.library.ubc.ca/cIRcle/collections/ubctheses/831/items/1.0103854,1,1,1,1|2,{},328,http://ieeexplore.ieee.org/abstract/document/1553554/
3R4QIDVOJP07BSIJLFK5XZ96NCEEER,3W8CV64QJ3N4MQGYT7HQE80V31XH9A,A1665VCUSZL9YT,96,2161,1,Using structural context to recommend source code examples,"reid holmes,gail c. murphy","48","When coding to a framework, developers often become stuck, unsure of which class to subclass, which objects to instantiate and which methods to call. Example code that demonstrates the use of the framework can help developers make progress on their task. In this paper, we describe an approach for locating relevant code in an example repository that is based on heuristically matching the structure of the code under development to the example code. Our tool improves on existing approaches in two ways. First, the structural context needed to query the repository is extracted automatically from the code, freeing the developer from learning a query language or from writing their code in a particular style. Second, the repository can be generated easily from existing applications. We demonstrate the utility of this approach by reporting on a case study involving two subjects completing four programming tasks within the Eclipse integrated development environment framework.",https://doi.org/10.1145/1062455.1062491,1,1,1,1|2,{},134,http://dl.acm.org/citation.cfm?id=1062491
3R4QIDVOJP07BSIJLFK5XZ96NCEEER,3XLBSAQ9Z50MZSSZKWPD0JDU57NZ7G,AZ72Z7VU6TQCN,148,2161,1,Using structural context to recommend source code examples,"reid holmes,gail c. murphy","48","When coding to a framework, developers often become stuck, unsure of which class to subclass, which objects to instantiate and which methods to call. Example code that demonstrates the use of the framework can help developers make progress on their task. In this paper, we describe an approach for locating relevant code in an example repository that is based on heuristically matching the structure of the code under development to the example code. Our tool improves on existing approaches in two ways. First, the structural context needed to query the repository is extracted automatically from the code, freeing the developer from learning a query language or from writing their code in a particular style. Second, the repository can be generated easily from existing applications. We demonstrate the utility of this approach by reporting on a case study involving two subjects completing four programming tasks within the Eclipse integrated development environment framework.",DOI: 10.1109/ICSE.2005.1553554,1|2,1,1,1|2,{},328,http://ieeexplore.ieee.org/abstract/document/1553554/
3R5LWXWHR0WE165RMF0LLRFPGY4GXJ,32ZKVD547GB8GBOWC66K1KUB8HI3B5,A1665VCUSZL9YT,329,10423,9,Software Reflexion Models Bridging the Gap Between Source and HighLevel Models,"gail c. murphy,david notkin,kevin j. sullivan","48",None,https://doi.org/10.1145/222132.222136,1,1,1,1,{},134,http://dl.acm.org/citation.cfm?id=222136
3R5LWXWHR0WE165RMF0LLRFPGY4GXJ,3B1NLC6UG0KBEH1UQQV5FYO9T1APGE,A314XJY8V1YL12,278,10423,9,Software Reflexion Models Bridging the Gap Between Source and HighLevel Models,"gail c. murphy,david notkin,kevin j. sullivan","48",None,https://doi.org/10.1145/222124.222136,1,1,1,1|2,{},551,http://dl.acm.org/citation.cfm?id=222136
3R5LWXWHR0WE165RMF0LLRFPGY4GXJ,3R9WASFE204ZEL752FNPOBQB29DZFI,A3F9JBVNMQ4ZUV,116,10423,9,Software Reflexion Models Bridging the Gap Between Source and HighLevel Models,"gail c. murphy,david notkin,kevin j. sullivan","48",None,http://www.cs.toronto.edu/~gelahi/Ref/Reflexion%20models.pdf,1|3,1,1,1|2,{},551,http://dl.acm.org/citation.cfm?id=222136
3R868ACW4S036156NXO6ICV0OY2GZG,39PAAFCODNOSO6KWW23BK9SG5I8VT1,AZ72Z7VU6TQCN,410,6158,3,An Information Retrieval Approach to Concept Location in Source Code,"andrian marcus,andrey sergeyev,vaclav rajlich,jonathan i. maletic","46","Concept location identifies parts of a software system that implement a specific concept that originates from the problem or the solution domain. Concept location is a very common software engineering activity that directly supports software maintenance and evolution tasks such as incremental change and reverse engineering. This paper addresses the problem of concept location using an advanced information retrieval method, Latent Semantic Indexing (LSI). LSI is used to map concepts expressed in natural language by the programmer to the relevant parts of the source code. Results of a case study on NCSA Mosaic are presented and compared with previously published results of other static methods for concept location.",DOI: 10.1109/WCRE.2004.10,1,1,,1|2,{},403,http://ieeexplore.ieee.org/abstract/document/1374321/
3R868ACW4S036156NXO6ICV0OY2GZG,3KGTPGBS6Y9YRS1J8X9AN0H7RNNU2Y,A3F9JBVNMQ4ZUV,80,6158,3,An Information Retrieval Approach to Concept Location in Source Code,"andrian marcus,andrey sergeyev,vaclav rajlich,jonathan i. maletic","46","Concept location identifies parts of a software system that implement a specific concept that originates from the problem or the solution domain. Concept location is a very common software engineering activity that directly supports software maintenance and evolution tasks such as incremental change and reverse engineering. This paper addresses the problem of concept location using an advanced information retrieval method, Latent Semantic Indexing (LSI). LSI is used to map concepts expressed in natural language by the programmer to the relevant parts of the source code. Results of a case study on NCSA Mosaic are presented and compared with previously published results of other static methods for concept location.",http://www.cs.wayne.edu/~severe/publications/Marcus.WCRE.2004.IRApproach.pdf,3|6,1,1,2,{},403,http://ieeexplore.ieee.org/abstract/document/1374321/
3RDTX9JRTYP57HCSQWQDZBGEASU97Q,337RC3OW06Q45TCRNT1KYIIZBU3VLT,AODCUPR89IMXP,503,30258,26,When do changes induce fixes,"jacek sliwerski,thomas zimmermann 0001,andreas zeller","90","As a software system evolves, programmers make changes that sometimes cause problems. We analyze CVS archives for fix-inducing changes---changes that lead to problems, indicated by fixes. We show how to automatically locate fix-inducing changes by linking a version archive (such as CVS) to a bug database (such as BUGZILLA). In a first investigation of the MOZILLA and ECLIPSE history, it turns out that fix-inducing changes show distinct patterns with respect to their size and the day of week they were applied.",DOI: 10.1145/1083142.1083147,4,2,2,2,This is my first hit still trying to figure it all out and i can't access the whole article without signing up with there site.,177,http://dl.acm.org/citation.cfm?id=1083147
3RDTX9JRTYP57HCSQWQDZBGEASU97Q,3BWI6RSP7HXOOX13O9B0F9CCGFLE7N,A3F9JBVNMQ4ZUV,59,30258,26,When do changes induce fixes,"jacek sliwerski,thomas zimmermann 0001,andreas zeller","90","As a software system evolves, programmers make changes that sometimes cause problems. We analyze CVS archives for fix-inducing changes---changes that lead to problems, indicated by fixes. We show how to automatically locate fix-inducing changes by linking a version archive (such as CVS) to a bug database (such as BUGZILLA). In a first investigation of the MOZILLA and ECLIPSE history, it turns out that fix-inducing changes show distinct patterns with respect to their size and the day of week they were applied.",http://2005.msrconf.org/MSR2005ProceedingsFINAL_ACM.pdf#page=34,1|4,1,1,2,{},543,http://dl.acm.org/citation.cfm?id=1083147
3S1WOPCJFGHFM84BZGVWUFMYSKAJEH,3NGI5ARFTUTEA2BR87A28BK3RJP1P2,AZ72Z7VU6TQCN,86,12153,11,Model Checking Programs,"willem visser,klaus havelund,guillaume p. brat,seungjoon park","54","The majority of work carried out in the formal methods community throughout the last three decades has (for good reasons) been devoted to special languages designed to make it easier to experiment with mechanized formal methods such as theorem provers and model checkers. In this paper we will attempt to give convincing arguments for why we believe it is time for the formal methods community to shift some of its attention towards the analysis of programs written in modern programming languages. In keeping with this philosophy, we have developed a verification and testing environment for Java, Java PathFinder (JPF), which integrates model checking, program analysis and testing. Part of this work has consisted of building a new Java Virtual Machine that interprets Java bytecode. JPF uses state compression to handle big states, and partial order reduction, slicing, abstraction, and runtime analysis techniques to reduce the state space. JPF has been applied to a real-time avionics operating system developed at Honeywell, illustrating and intricate error, and to a model of a spacecraft controller, illustrating the combination of abstraction, runtime analysis, and slicing with model checking.",DOI: 10.1023/A:1022920129859,1,1,2,1|2,{},1538,https://link.springer.com/article/10.1023/A:1022920129859
3S1WOPCJFGHFM84BZGVWUFMYSKAJEH,3Z9WI9EOZ0CO3MZPX48F4HEBEG8HK9,A3F9JBVNMQ4ZUV,57,12153,11,Model Checking Programs,"willem visser,klaus havelund,guillaume p. brat,seungjoon park","54","The majority of work carried out in the formal methods community throughout the last three decades has (for good reasons) been devoted to special languages designed to make it easier to experiment with mechanized formal methods such as theorem provers and model checkers. In this paper we will attempt to give convincing arguments for why we believe it is time for the formal methods community to shift some of its attention towards the analysis of programs written in modern programming languages. In keeping with this philosophy, we have developed a verification and testing environment for Java, Java PathFinder (JPF), which integrates model checking, program analysis and testing. Part of this work has consisted of building a new Java Virtual Machine that interprets Java bytecode. JPF uses state compression to handle big states, and partial order reduction, slicing, abstraction, and runtime analysis techniques to reduce the state space. JPF has been applied to a real-time avionics operating system developed at Honeywell, illustrating and intricate error, and to a model of a spacecraft controller, illustrating the combination of abstraction, runtime analysis, and slicing with model checking.",https://www.researchgate.net/profile/Klaus_Havelund/publication/3866977_Model_Checking_Programs/links/0a85e5398580ce199e000000.pdf,1|3,1,1,1|2,{},1538,https://link.springer.com/article/10.1023/A:1022920129859
3S37Y8CWI8OJ0Q7HH92YAJ4FHRP4WR,39L1G8WVWRF73D64A9DVV8H2M5X13Q,A3F9JBVNMQ4ZUV,125,20475,19,Quantitative Analysis of Faults and Failures in a Complex Software System,"norman e. fenton,niclas ohlsson","76","The dearth of published empirical data on major industrial systems has been one of the reasons that software engineering has failed to establish a proper scientific basis. In this paper, we hope to provide a small contribution to the body of empirical knowledge. We describe a number of results from a quantitative study of faults and failures in two releases of a major commercial system. We tested a range of basic software engineering hypotheses relating to: The Pareto principle of distribution of faults and failures; the use of early fault data to predict later fault and failure data; metrics for fault prediction; and benchmarking fault data. For example, we found strong evidence that a small number of modules contain most of the faults discovered in prerelease testing and that a very small number of modules contain most of the faults discovered in operation. However, in neither case is this explained by the size or complexity of the modules. We found no evidence to support previous claims relating module size to fault density nor did we find evidence that popular complexity metrics are good predictors of either fault-prone or failure-prone modules. We confirmed that the number of faults discovered in prerelease testing is an order of magnitude greater than the number discovered in 12 months of operational use. We also discovered fairly stable numbers of faults discovered at corresponding testing phases. Our most surprising and important result was strong evidence of a counter-intuitive relationship between pre- and postrelease faults: Those modules which are the most fault-prone prerelease are among the least fault-prone postrelease, while conversely, the modules which are most fault-prone postrelease are among the least fault-prone prerelease. This observation has serious ramifications for the commonly used fault density measure. Not only is it misleading to use it as a surrogate quality measure, but, its previous extensive use in metrics studies is shown to be flawed. Our results provide data-points in building up an empirical picture of the software development process. However, even the strong results we have observed are not generally valid as software engineering laws because they fail to take account of basic explanatory data, notably testing effort and operational usage. After all, a module which has not been tested or used will reveal no faults, irrespective of its size, complexity, or any other factor.",10.1109/32.879815,1,1,1,2,{},677,http://ieeexplore.ieee.org/abstract/document/879815/
3S37Y8CWI8OJ0Q7HH92YAJ4FHRP4WR,3EO896NRAXJJXBK2FDPSHLHMAZSTJD,A1665VCUSZL9YT,999,20475,19,Quantitative Analysis of Faults and Failures in a Complex Software System,"norman e. fenton,niclas ohlsson","76","The dearth of published empirical data on major industrial systems has been one of the reasons that software engineering has failed to establish a proper scientific basis. In this paper, we hope to provide a small contribution to the body of empirical knowledge. We describe a number of results from a quantitative study of faults and failures in two releases of a major commercial system. We tested a range of basic software engineering hypotheses relating to: The Pareto principle of distribution of faults and failures; the use of early fault data to predict later fault and failure data; metrics for fault prediction; and benchmarking fault data. For example, we found strong evidence that a small number of modules contain most of the faults discovered in prerelease testing and that a very small number of modules contain most of the faults discovered in operation. However, in neither case is this explained by the size or complexity of the modules. We found no evidence to support previous claims relating module size to fault density nor did we find evidence that popular complexity metrics are good predictors of either fault-prone or failure-prone modules. We confirmed that the number of faults discovered in prerelease testing is an order of magnitude greater than the number discovered in 12 months of operational use. We also discovered fairly stable numbers of faults discovered at corresponding testing phases. Our most surprising and important result was strong evidence of a counter-intuitive relationship between pre- and postrelease faults: Those modules which are the most fault-prone prerelease are among the least fault-prone postrelease, while conversely, the modules which are most fault-prone postrelease are among the least fault-prone prerelease. This observation has serious ramifications for the commonly used fault density measure. Not only is it misleading to use it as a surrogate quality measure, but, its previous extensive use in metrics studies is shown to be flawed. Our results provide data-points in building up an empirical picture of the software development process. However, even the strong results we have observed are not generally valid as software engineering laws because they fail to take account of basic explanatory data, notably testing effort and operational usage. After all, a module which has not been tested or used will reveal no faults, irrespective of its size, complexity, or any other factor.",https://doi.org/10.1109/32.879815,1,1,1,1|2,{},177,http://dl.acm.org/citation.cfm?id=631250
3S37Y8CWI8OJ0Q7HH92YAJ4FHRP4WR,3MRNMEIQW6UIBCC5W81QSWCSBTHDL6,A30M7MYW1BHQN1,174,20475,19,Quantitative Analysis of Faults and Failures in a Complex Software System,"norman e. fenton,niclas ohlsson","76","The dearth of published empirical data on major industrial systems has been one of the reasons that software engineering has failed to establish a proper scientific basis. In this paper, we hope to provide a small contribution to the body of empirical knowledge. We describe a number of results from a quantitative study of faults and failures in two releases of a major commercial system. We tested a range of basic software engineering hypotheses relating to: The Pareto principle of distribution of faults and failures; the use of early fault data to predict later fault and failure data; metrics for fault prediction; and benchmarking fault data. For example, we found strong evidence that a small number of modules contain most of the faults discovered in prerelease testing and that a very small number of modules contain most of the faults discovered in operation. However, in neither case is this explained by the size or complexity of the modules. We found no evidence to support previous claims relating module size to fault density nor did we find evidence that popular complexity metrics are good predictors of either fault-prone or failure-prone modules. We confirmed that the number of faults discovered in prerelease testing is an order of magnitude greater than the number discovered in 12 months of operational use. We also discovered fairly stable numbers of faults discovered at corresponding testing phases. Our most surprising and important result was strong evidence of a counter-intuitive relationship between pre- and postrelease faults: Those modules which are the most fault-prone prerelease are among the least fault-prone postrelease, while conversely, the modules which are most fault-prone postrelease are among the least fault-prone prerelease. This observation has serious ramifications for the commonly used fault density measure. Not only is it misleading to use it as a surrogate quality measure, but, its previous extensive use in metrics studies is shown to be flawed. Our results provide data-points in building up an empirical picture of the software development process. However, even the strong results we have observed are not generally valid as software engineering laws because they fail to take account of basic explanatory data, notably testing effort and operational usage. After all, a module which has not been tested or used will reveal no faults, irrespective of its size, complexity, or any other factor.",10.1109/32.879815,1,1,1,3,{},677,http://ieeexplore.ieee.org/abstract/document/879815/
3T2HW4QDUVVBJY7OHDYOFX8SB3L9CJ,3ERMJ6L4DZGM0LTG57ZJSHHLQ34M7L,AZ72Z7VU6TQCN,61,20197,19,Empirical Analysis of CK Metrics for ObjectOriented Design Complexity Implications for Software Defects,"ramanath subramanyam,mayuram s. krishnan","57","To produce high quality object-oriented (OO) applications, a strong emphasis on design aspects, especially during the early phases of software development, is necessary. Design metrics play an important role in helping developers understand design aspects of software and, hence, improve software quality and developer productivity. In this paper, we provide empirical evidence supporting the role of OO design complexity metrics, specifically a subset of the Chidamber and Kemerer suite, in determining software defects. Our results, based on industry data from software developed in two popular programming languages used in OO development, indicate that, even after controlling for the size of the software, these metrics are significantly associated with defects. In addition, we find that the effects of these metrics on defects vary across the samples from two programming languagesC++ and Java. We believe that these results have significant implications for designing high-quality software products using the OO approach.",DOI: 10.1109/TSE.2003.1191795,1,1,1,2|3,{},603,http://ieeexplore.ieee.org/abstract/document/1191795/
3T2HW4QDUVVBJY7OHDYOFX8SB3L9CJ,3WQQ9FUS6BIUH8U2ON1GS12MO3ZB8U,AGZ4PHJDXZPHK,201,20197,19,Empirical Analysis of CK Metrics for ObjectOriented Design Complexity Implications for Software Defects,"ramanath subramanyam,mayuram s. krishnan","57","To produce high quality object-oriented (OO) applications, a strong emphasis on design aspects, especially during the early phases of software development, is necessary. Design metrics play an important role in helping developers understand design aspects of software and, hence, improve software quality and developer productivity. In this paper, we provide empirical evidence supporting the role of OO design complexity metrics, specifically a subset of the Chidamber and Kemerer suite, in determining software defects. Our results, based on industry data from software developed in two popular programming languages used in OO development, indicate that, even after controlling for the size of the software, these metrics are significantly associated with defects. In addition, we find that the effects of these metrics on defects vary across the samples from two programming languagesC++ and Java. We believe that these results have significant implications for designing high-quality software products using the OO approach.",10.1109/TSE.2003.1191795,3,1,2,1|2,{},599,http://ieeexplore.ieee.org/abstract/document/1191795/
3T2HW4QDUVVBJY7OHDYOFX8SB3L9CJ,3XCC1ODXDMZN3JBN6E46E7SQ0URRQZ,A3F9JBVNMQ4ZUV,86,20197,19,Empirical Analysis of CK Metrics for ObjectOriented Design Complexity Implications for Software Defects,"ramanath subramanyam,mayuram s. krishnan","57","To produce high quality object-oriented (OO) applications, a strong emphasis on design aspects, especially during the early phases of software development, is necessary. Design metrics play an important role in helping developers understand design aspects of software and, hence, improve software quality and developer productivity. In this paper, we provide empirical evidence supporting the role of OO design complexity metrics, specifically a subset of the Chidamber and Kemerer suite, in determining software defects. Our results, based on industry data from software developed in two popular programming languages used in OO development, indicate that, even after controlling for the size of the software, these metrics are significantly associated with defects. In addition, we find that the effects of these metrics on defects vary across the samples from two programming languagesC++ and Java. We believe that these results have significant implications for designing high-quality software products using the OO approach.",http://ai2-s2-pdfs.s3.amazonaws.com/3acc/32ea0ded0a9e2ef5759c2f4970bf5ea18508.pdf,3,,1,2,{},599,http://ieeexplore.ieee.org/abstract/document/1191795/
3TCFMTM8HECGWBCRG7UPOEHN10K21U,34Q075JO1Y1BML77RMVCTAJVJ0P10L,AZ72Z7VU6TQCN,294,3349,1,TestTube A System for Selective Regression Testing,"yih-farn chen,david s. rosenblum,kiem-phong vo","52",None,ISBN:0-8186-5855-X (no doi no available),1|3,1,1,2,{},342,http://dl.acm.org/citation.cfm?id=257769
3TCFMTM8HECGWBCRG7UPOEHN10K21U,3VHP9MDGRO8M6SWVA13HDDPQTRGCFL,A3F9JBVNMQ4ZUV,79,3349,1,TestTube A System for Selective Regression Testing,"yih-farn chen,david s. rosenblum,kiem-phong vo","52",None,http://laser.cs.umass.edu/courses/cs521-621/papers/ChenRosenblumVo.pdf,1,1,1,1|2,{},342,http://dl.acm.org/citation.cfm?id=257769
3TKXBROM5TYR2D6XVZLNFUKQKDHJIQ,3U5NZHP4LSQPEDW5AWDN0Y0A8PCHP6,ARGR4AJESGHHP,444,10248,9,Interface automata,"luca de alfaro,thomas a. henzinger","45","Conventional type systems specify interfaces in terms of values and domains. We present a light-weight formalism that captures the temporal aspects of software component interfaces. Specifically, we use an automata-based language to capture both input assumptions about the order in which the methods of a component are called, and output guarantees about the order in which the component calls external methods. The formalism supports automatic compatability checks between interface models, and thus constitutes a type system for component interaction. Unlike traditional uses of automata, our formalism is based on an optimistic approach to composition, and on an alternating approach to design refinement. According to the optimistic approach, two components are compatible if there is some environment that can make them work together. According to the alternating approach, one interface refines another if it has weaker input assumptions, and stronger output guarantees. We show that these notions have game-theoretic foundations that lead to efficient algorithms for checking compatibility and refinement.",https://users.soe.ucsc.edu/~luca/papers/01/FSE01.pdf,4|5,1,2,2|4,{},1382,http://dl.acm.org/citation.cfm?id=503226
3TKXBROM5TYR2D6XVZLNFUKQKDHJIQ,3VHP9MDGRO8M6SWVA13HDDPQTSEFCO,A3F9JBVNMQ4ZUV,96,10248,9,Interface automata,"luca de alfaro,thomas a. henzinger","45","Conventional type systems specify interfaces in terms of values and domains. We present a light-weight formalism that captures the temporal aspects of software component interfaces. Specifically, we use an automata-based language to capture both input assumptions about the order in which the methods of a component are called, and output guarantees about the order in which the component calls external methods. The formalism supports automatic compatability checks between interface models, and thus constitutes a type system for component interaction. Unlike traditional uses of automata, our formalism is based on an optimistic approach to composition, and on an alternating approach to design refinement. According to the optimistic approach, two components are compatible if there is some environment that can make them work together. According to the alternating approach, one interface refines another if it has weaker input assumptions, and stronger output guarantees. We show that these notions have game-theoretic foundations that lead to efficient algorithms for checking compatibility and refinement.",http://web.cs.wpi.edu/~heineman/html/teaching_/CS562/p109-de_alfaro.pdf,,1,1,2|3,{},1382,http://dl.acm.org/citation.cfm?id=503226
3TRB893CSJYKMRZ042WNRS21E5P7GF,3KV0LJBBH39WI4DVELXPXY8LQV0MRH,A1ODVXVCDHOVF1,1075,25641,22,JCrasher an automatic robustness tester for Java,"christoph csallner,yannis smaragdakis","62","JCrasher is an automatic robustness testing tool for Java code. JCrasher examines the type information of a set of Java classes and constructs code fragments that will create instances of different types to test the behavior of public methods under random data. JCrasher attempts to detect bugs by causing the program under test to 'crash', that is, to throw an undeclared runtime exception. Although in general the random testing approach has many limitations, it also has the advantage of being completely automatic: no supervision is required except for off-line inspection of the test cases that have caused a crash. Compared to other similar commercial and research tools, JCrasher offers several novelties: it transitively analyzes methods, determines the size of each tested method's parameter-space and selects parameter combinations and therefore test cases at random, taking into account the time allocated for testing; it defines heuristics for determining whether a Java exception should be considered as a program bug or whether the JCrasher supplied inputs have violated the code's preconditions; it includes support for efficiently undoing all the state changes introduced by previous tests; it produces test files for JUnit, a popular Java testing tool; and it can be integrated in the Eclipse IDE.",10.1002/spe.602,3|6,1,2,1|2,{},401,http://onlinelibrary.wiley.com/doi/10.1002/spe.602/abstract
3TRB893CSJYKMRZ042WNRS21E5P7GF,3S96KQ6I9NS6UPKA5H3HENM9507TDH,A3F9JBVNMQ4ZUV,89,25641,22,JCrasher an automatic robustness tester for Java,"christoph csallner,yannis smaragdakis","62","JCrasher is an automatic robustness testing tool for Java code. JCrasher examines the type information of a set of Java classes and constructs code fragments that will create instances of different types to test the behavior of public methods under random data. JCrasher attempts to detect bugs by causing the program under test to 'crash', that is, to throw an undeclared runtime exception. Although in general the random testing approach has many limitations, it also has the advantage of being completely automatic: no supervision is required except for off-line inspection of the test cases that have caused a crash. Compared to other similar commercial and research tools, JCrasher offers several novelties: it transitively analyzes methods, determines the size of each tested method's parameter-space and selects parameter combinations and therefore test cases at random, taking into account the time allocated for testing; it defines heuristics for determining whether a Java exception should be considered as a program bug or whether the JCrasher supplied inputs have violated the code's preconditions; it includes support for efficiently undoing all the state changes introduced by previous tests; it produces test files for JUnit, a popular Java testing tool; and it can be integrated in the Eclipse IDE.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.5357&rep=rep1&type=pdf,1|4,1,1,1|2,{},401,http://onlinelibrary.wiley.com/doi/10.1002/spe.602/abstract
3TRB893CSJYKMRZ042WNRS21E5P7GF,3UJ1CZ6IZIDABCS21BG8662VQ1R5SU,A1665VCUSZL9YT,316,25641,22,JCrasher an automatic robustness tester for Java,"christoph csallner,yannis smaragdakis","62","JCrasher is an automatic robustness testing tool for Java code. JCrasher examines the type information of a set of Java classes and constructs code fragments that will create instances of different types to test the behavior of public methods under random data. JCrasher attempts to detect bugs by causing the program under test to 'crash', that is, to throw an undeclared runtime exception. Although in general the random testing approach has many limitations, it also has the advantage of being completely automatic: no supervision is required except for off-line inspection of the test cases that have caused a crash. Compared to other similar commercial and research tools, JCrasher offers several novelties: it transitively analyzes methods, determines the size of each tested method's parameter-space and selects parameter combinations and therefore test cases at random, taking into account the time allocated for testing; it defines heuristics for determining whether a Java exception should be considered as a program bug or whether the JCrasher supplied inputs have violated the code's preconditions; it includes support for efficiently undoing all the state changes introduced by previous tests; it produces test files for JUnit, a popular Java testing tool; and it can be integrated in the Eclipse IDE.",https://doi.org/10.1002/spe.602,1,2,2,1|2,{},130,http://dl.acm.org/citation.cfm?id=1044434
3TUOHPJXYHLAYSVR1K437U1DAMTWXX,35H6S234SBO5OEU5UYD551638BT656,A3F9JBVNMQ4ZUV,104,2976,1,Patterns in Property Specifications for FiniteState Verification,"matthew b. dwyer,george s. avrunin,james c. corbett","75",None,https://pdfs.semanticscholar.org/88ca/5fa2e0dde9753e85ad69f6d5b2504f146025.pdf,2,1,1,1|2,{},1337,http://ieeexplore.ieee.org/abstract/document/841031/
3TUOHPJXYHLAYSVR1K437U1DAMTWXX,3C8HJ7UOP8I5KVZMO2R2J1AK0WHMZD,AZ72Z7VU6TQCN,77,2976,1,Patterns in Property Specifications for FiniteState Verification,"matthew b. dwyer,george s. avrunin,james c. corbett","75",None,DOI: 10.1145/302405.302672,1,1,1,2|3,{},1338,http://ieeexplore.ieee.org/abstract/document/841031/
3TUOHPJXYHLAYSVR1K437U1DAMTWXX,3QBD8R3Z227DH1W9GPGPH9MGTGZ4OX,A3KFX4FS1SANOS,575,2976,1,Patterns in Property Specifications for FiniteState Verification,"matthew b. dwyer,george s. avrunin,james c. corbett","75",None,DOI: 10.1145/302405.302672,3,2,3,2,NONE,1337,http://ieeexplore.ieee.org/abstract/document/841031/?reload=true
3TX9T2ZCB9PZ3NV622SO4FHOIMRWZU,3I2PTA7R3UI1GFYSGUV9DV6C5EEKQ4,AZ72Z7VU6TQCN,240,20049,19,Mining Version Histories to Guide Software Changes,"thomas zimmermann 0001,peter weissgerber,stephan diehl 0001,andreas zeller","74","We apply data mining to version histories in order to guide programmers along related changes: ""Programmers who changed these functions also changed.... Given a set of existing changes, the mined association rules 1) suggest and predict likely further changes, 2) show up item coupling that is undetectable by program analysis, and 3) can prevent errors due to incomplete changes. After an initial change, our ROSE prototype can correctly predict further locations to be changed; the best predictive power is obtained for changes to existing software. In our evaluation based on the history of eight popular open source projects, ROSE's topmost three suggestions contained a correct location with a likelihood of more than 70 percent.",DOI: 10.1109/TSE.2005.72,1|4,1,1,2,{},1110,http://ieeexplore.ieee.org/abstract/document/1463228/
3TX9T2ZCB9PZ3NV622SO4FHOIMRWZU,3SPJ033422RFEXJWPJCRP291Q8FJYC,A2VO6V2FJEQZZ,61,20049,19,Mining Version Histories to Guide Software Changes,"thomas zimmermann 0001,peter weissgerber,stephan diehl 0001,andreas zeller","74","We apply data mining to version histories in order to guide programmers along related changes: ""Programmers who changed these functions also changed.... Given a set of existing changes, the mined association rules 1) suggest and predict likely further changes, 2) show up item coupling that is undetectable by program analysis, and 3) can prevent errors due to incomplete changes. After an initial change, our ROSE prototype can correctly predict further locations to be changed; the best predictive power is obtained for changes to existing software. In our evaluation based on the history of eight popular open source projects, ROSE's topmost three suggestions contained a correct location with a likelihood of more than 70 percent.","http://222.252.30.203:8888/bitstream/123456789/10409/1/429-455..Software%20Engineering,%20IEEE%20Transactions.%20Vol.31.Iss.6.A.2.pdf",1,1,1,1|2|3,{},1110,http://ieeexplore.ieee.org/abstract/document/1463228/
3TX9T2ZCB9PZ3NV622SO4FHOIMRWZU,3WSELTNVR4Q8WIHYL7CFOME3K0NTAY,A1ODVXVCDHOVF1,56,20049,19,Mining Version Histories to Guide Software Changes,"thomas zimmermann 0001,peter weissgerber,stephan diehl 0001,andreas zeller","74","We apply data mining to version histories in order to guide programmers along related changes: ""Programmers who changed these functions also changed.... Given a set of existing changes, the mined association rules 1) suggest and predict likely further changes, 2) show up item coupling that is undetectable by program analysis, and 3) can prevent errors due to incomplete changes. After an initial change, our ROSE prototype can correctly predict further locations to be changed; the best predictive power is obtained for changes to existing software. In our evaluation based on the history of eight popular open source projects, ROSE's topmost three suggestions contained a correct location with a likelihood of more than 70 percent.",10.1109/TSE.2005.72,1,1,1,2,{},1110,http://ieeexplore.ieee.org/abstract/document/1463228/
3TX9T2ZCB9PZ3NV622SO4FHOIMRZWX,30IQTZXKALUJCMS0YFGJOJNWOIJX0U,AZ72Z7VU6TQCN,208,21195,19,ConstraintBased Automatic Test Data Generation,"richard a. demillo,jeff offutt","65",A novel technique for automatically generating test data is presented. The technique is based on mutation analysis and creates test data that approximate relative adequacy. It is a fault-based technique that uses algebraic constraints to describe test cases designed to find particular types of faults. A set of tools (collectively called Godzilla) that automatically generates constraints and solves them to create test cases for unit and module testing has been implemented. Godzilla has been integrated with the Mothratesting system and has been used as an effective way to generate test data that kill program mutants. The authors present an initial list of constraints and discuss some of the problems that have been solved to develop the complete implementation of the technique.,DOI: 10.1109/32.92910,1,1,1,1|2,{},917,http://ieeexplore.ieee.org/abstract/document/92910/
3TX9T2ZCB9PZ3NV622SO4FHOIMRZWX,39OWYR0EPLFZ9VX06TL6A4H9WFWFYU,A3F9JBVNMQ4ZUV,82,21195,19,ConstraintBased Automatic Test Data Generation,"richard a. demillo,jeff offutt","65",A novel technique for automatically generating test data is presented. The technique is based on mutation analysis and creates test data that approximate relative adequacy. It is a fault-based technique that uses algebraic constraints to describe test cases designed to find particular types of faults. A set of tools (collectively called Godzilla) that automatically generates constraints and solves them to create test cases for unit and module testing has been implemented. Godzilla has been integrated with the Mothratesting system and has been used as an effective way to generate test data that kill program mutants. The authors present an initial list of constraints and discuss some of the problems that have been solved to develop the complete implementation of the technique.,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.91.1702&rep=rep1&type=pdf,1|4,1,1,2,{},916,http://ieeexplore.ieee.org/abstract/document/92910/
3TX9T2ZCB9PZ3NV622SO4FHOIMRZWX,3C5W7UE9CGEGF0Z7NK3HMGU9REJXMQ,A30M7MYW1BHQN1,253,21195,19,ConstraintBased Automatic Test Data Generation,"richard a. demillo,jeff offutt","65",A novel technique for automatically generating test data is presented. The technique is based on mutation analysis and creates test data that approximate relative adequacy. It is a fault-based technique that uses algebraic constraints to describe test cases designed to find particular types of faults. A set of tools (collectively called Godzilla) that automatically generates constraints and solves them to create test cases for unit and module testing has been implemented. Godzilla has been integrated with the Mothratesting system and has been used as an effective way to generate test data that kill program mutants. The authors present an initial list of constraints and discuss some of the problems that have been solved to develop the complete implementation of the technique.,10.1109/32.92910,1,1,1,2|3,{},916,http://ieeexplore.ieee.org/abstract/document/92910/
3TZ0XG8CBU897VHB01IJDBC9LC098D,37Q970SNZFWBNURJ0OEW3GPEF6N1SG,AZ72Z7VU6TQCN,129,31755,28,A Formal Basis for Architectural Connection,"robert allen,david garlan","89","As software systems become more complex, the overall system structureor software architecturebecomes a central design problem. An important step toward an engineering discipline of software is a formal basis for describing and analyzing these designs. In the article we present a formal approach to one aspect of architectural design: the interactions among components. The key idea is to define architectural connectors as explicit semantic entities. These are specified as a collection of protocols that characterize each of the participant roles in an interaction and how these roles interact. We illustrate how this scheme can be used to define a variety of common architectural connectors. We further provide a formal semantics and show how this leads to a system in which architectural compatibility can be checked in a way analogous to type-checking in programming languages.",doi>10.1145/258077.258078,1,1,1,1|2,{},1743,http://dl.acm.org/citation.cfm?id=258078
3TZ0XG8CBU897VHB01IJDBC9LC098D,3DHE4R9OCXZFMA0OOSKTJLGGIGXG2B,A3F9JBVNMQ4ZUV,82,31755,28,A Formal Basis for Architectural Connection,"robert allen,david garlan","89","As software systems become more complex, the overall system structureor software architecturebecomes a central design problem. An important step toward an engineering discipline of software is a formal basis for describing and analyzing these designs. In the article we present a formal approach to one aspect of architectural design: the interactions among components. The key idea is to define architectural connectors as explicit semantic entities. These are specified as a collection of protocols that characterize each of the participant roles in an interaction and how these roles interact. We illustrate how this scheme can be used to define a variety of common architectural connectors. We further provide a formal semantics and show how this leads to a system in which architectural compatibility can be checked in a way analogous to type-checking in programming languages.",http://repository.cmu.edu/cgi/viewcontent.cgi?article=1706&context=compsci,,1,2,1|2,{},1743,http://dl.acm.org/citation.cfm?id=258078
3TZ0XG8CBU897VHB01IJDBC9LC098D,3X31TUMD7YAOJHWTGFHVRUBJMQE1LS,ARGR4AJESGHHP,244,31755,28,A Formal Basis for Architectural Connection,"robert allen,david garlan","89","As software systems become more complex, the overall system structureor software architecturebecomes a central design problem. An important step toward an engineering discipline of software is a formal basis for describing and analyzing these designs. In the article we present a formal approach to one aspect of architectural design: the interactions among components. The key idea is to define architectural connectors as explicit semantic entities. These are specified as a collection of protocols that characterize each of the participant roles in an interaction and how these roles interact. We illustrate how this scheme can be used to define a variety of common architectural connectors. We further provide a formal semantics and show how this leads to a system in which architectural compatibility can be checked in a way analogous to type-checking in programming languages.",10.1145/258077.258078,4,2,2,2,{},1743,http://dl.acm.org/citation.cfm?id=258078
3UEDKCTP9VEPODVJUTH2PKUULM67KI,351SEKWQS152HUUQWK25S9RHBS4DMT,A3F9JBVNMQ4ZUV,86,1999,1,Maintaining mental models a study of developer work habits,"thomas d. latoza,gina danielle venolia,robert deline","55","To understand developers' typical tools, activities, and practices and their satisfaction with each, we conducted two surveys and eleven interviews. We found that many problems arose because developers were forced to invest great effort recovering implicit knowledge by exploring code and interrupting teammates and this knowledge was only saved in their memory. Contrary to expectations that email and IM prevent expensive task switches caused by face-to-face interruptions, we found that face-to-face communication enjoys many advantages. Contrary to expectations that documentation makes understanding design rationale easy, we found that current design documents are inadequate. Contrary to expectations that code duplication involves the copy and paste of code snippets, developers reported several types of duplication. We use data to characterize these and other problems and draw implications for the design of tools for their solution.",http://plg.math.uwaterloo.ca/~migod/846/papers/icse06-venolia.pdf,2,1,2,,{},435,http://dl.acm.org/citation.cfm?id=1134355
3UEDKCTP9VEPODVJUTH2PKUULM67KI,3NKQQ8O39ZTLU2ZZ5MTRJJ8BOXLDU1,AZ72Z7VU6TQCN,64,1999,1,Maintaining mental models a study of developer work habits,"thomas d. latoza,gina danielle venolia,robert deline","55","To understand developers' typical tools, activities, and practices and their satisfaction with each, we conducted two surveys and eleven interviews. We found that many problems arose because developers were forced to invest great effort recovering implicit knowledge by exploring code and interrupting teammates and this knowledge was only saved in their memory. Contrary to expectations that email and IM prevent expensive task switches caused by face-to-face interruptions, we found that face-to-face communication enjoys many advantages. Contrary to expectations that documentation makes understanding design rationale easy, we found that current design documents are inadequate. Contrary to expectations that code duplication involves the copy and paste of code snippets, developers reported several types of duplication. We use data to characterize these and other problems and draw implications for the design of tools for their solution.",doi>10.1145/1134285.1134355,1,1,1,,{},435,http://dl.acm.org/citation.cfm?id=1134355
3UEDKCTP9VEPODVJUTH2PKUULM67KI,3TYCR1GOTD7LEDH1OQQNJOVVZEZLZR,A1FBHWI0K8SGQA,355,1999,1,Maintaining mental models a study of developer work habits,"thomas d. latoza,gina danielle venolia,robert deline","55","To understand developers' typical tools, activities, and practices and their satisfaction with each, we conducted two surveys and eleven interviews. We found that many problems arose because developers were forced to invest great effort recovering implicit knowledge by exploring code and interrupting teammates and this knowledge was only saved in their memory. Contrary to expectations that email and IM prevent expensive task switches caused by face-to-face interruptions, we found that face-to-face communication enjoys many advantages. Contrary to expectations that documentation makes understanding design rationale easy, we found that current design documents are inadequate. Contrary to expectations that code duplication involves the copy and paste of code snippets, developers reported several types of duplication. We use data to characterize these and other problems and draw implications for the design of tools for their solution.",10.1145/1134285.1134355,2,1,2,2,{},154,http://dl.acm.org/citation.cfm?id=1134355
3ULIZ0H1VAT8V8VEYQWNMLKZLAB51Y,33IZTU6J82PJDVCC7HZ3YPTFJIDSX3,AZ72Z7VU6TQCN,377,14393,15,Automatic extraction of objectoriented component interfaces,"john whaley,michael c. martin,monica s. lam","51","Component-based software design is a popular and effective approach to designing large systems. While components typically have well-defined interfaces, sequencing information---which calls must come in which order---is often not formally specified.This paper proposes using multiple finite statemachine (FSM) submodels to model the interface of a class. A submodel includes a subset of methods that, for example, implement a Java interface, or access some particular field. Each state-modifying method is represented as a state in the FSM, and transitions of the FSMs represent allow able pairs of consecutive methods. In addition, state-preserving methods are constrained to execute only under certain states.We have designed and implemented a system that includes static analyses to deduce illegal call sequences in a program, dynamic instrumentation techniques to extract models from execution runs, and a dynamic model checker that ensures that the code conforms to the model. Extracted models can serve as documentation; they can serve as constraints to be enforced by a static checker; they can be studied directly by developers to determine if the program is exhibiting unexpected behavior; or they can be used to determine the completeness of a test suite.Our system has been run on several large code bases, including the joeq virtual machine, the basic Java libraries, and the Java 2 Enterprise Edition library code. Our experience suggests that this approach yields useful information.",doi>10.1145/566172.566212,1,1,1,1|2,{},337,http://dl.acm.org/citation.cfm?id=566212
3ULIZ0H1VAT8V8VEYQWNMLKZLAB51Y,3N2BF7Y2VRIJTAZSIGLVJU6F3LZHMA,A1665VCUSZL9YT,313,14393,15,Automatic extraction of objectoriented component interfaces,"john whaley,michael c. martin,monica s. lam","51","Component-based software design is a popular and effective approach to designing large systems. While components typically have well-defined interfaces, sequencing information---which calls must come in which order---is often not formally specified.This paper proposes using multiple finite statemachine (FSM) submodels to model the interface of a class. A submodel includes a subset of methods that, for example, implement a Java interface, or access some particular field. Each state-modifying method is represented as a state in the FSM, and transitions of the FSMs represent allow able pairs of consecutive methods. In addition, state-preserving methods are constrained to execute only under certain states.We have designed and implemented a system that includes static analyses to deduce illegal call sequences in a program, dynamic instrumentation techniques to extract models from execution runs, and a dynamic model checker that ensures that the code conforms to the model. Extracted models can serve as documentation; they can serve as constraints to be enforced by a static checker; they can be studied directly by developers to determine if the program is exhibiting unexpected behavior; or they can be used to determine the completeness of a test suite.Our system has been run on several large code bases, including the joeq virtual machine, the basic Java libraries, and the Java 2 Enterprise Edition library code. Our experience suggests that this approach yields useful information.",https://doi.org/10.1145/566171.566212,1,1,1,1|2,{},105,http://dl.acm.org/citation.cfm?id=566212
3ULIZ0H1VAT8V8VEYQWNMLKZLAB51Y,3P529IW9KZ9F9WQ1NEWGGWFDN1PLF7,A3F9JBVNMQ4ZUV,61,14393,15,Automatic extraction of objectoriented component interfaces,"john whaley,michael c. martin,monica s. lam","51","Component-based software design is a popular and effective approach to designing large systems. While components typically have well-defined interfaces, sequencing information---which calls must come in which order---is often not formally specified.This paper proposes using multiple finite statemachine (FSM) submodels to model the interface of a class. A submodel includes a subset of methods that, for example, implement a Java interface, or access some particular field. Each state-modifying method is represented as a state in the FSM, and transitions of the FSMs represent allow able pairs of consecutive methods. In addition, state-preserving methods are constrained to execute only under certain states.We have designed and implemented a system that includes static analyses to deduce illegal call sequences in a program, dynamic instrumentation techniques to extract models from execution runs, and a dynamic model checker that ensures that the code conforms to the model. Extracted models can serve as documentation; they can serve as constraints to be enforced by a static checker; they can be studied directly by developers to determine if the program is exhibiting unexpected behavior; or they can be used to determine the completeness of a test suite.Our system has been run on several large code bases, including the joeq virtual machine, the basic Java libraries, and the Java 2 Enterprise Edition library code. Our experience suggests that this approach yields useful information.",http://fa09.pbworks.com/f/interface.pdf,1|3,1,1,1|2,{},337,http://dl.acm.org/citation.cfm?id=566212
3UQVX1UPFS5GPMR9KOQPA9YDW8E20R,3018Q3ZVOJEVG346HI7KO7DLXY9RA5,AZ72Z7VU6TQCN,81,24024,20,Operational Profiles in SoftwareReliability Engineering,john d. musa,"52","A systematic approach to organizing the process of determining the operational profile for guiding software development is presented. The operational profile is a quantitative characterization of how a system will be used that shows how to increase productivity and reliability and speed development by allocating development resources to function on the basis of use. Using an operational profile to guide testing ensures that if testing is terminated and the software is shipped because of schedule constraints, the most-used operations will have received the most testing and the reliability level will be the maximum that is practically achievable for the given test time. For guiding regression testing, it efficiently allocates test cases in accordance with use, so the faults most likely to be found, of those introduced by changes, are the ones that have the most effect on reliability.",DOI: 10.1109/52.199724,1,1,1,1|2,{},927,http://ieeexplore.ieee.org/abstract/document/199724/
3UQVX1UPFS5GPMR9KOQPA9YDW8E20R,358010RM5FHZ5NTG1C489CDMI31XV5,A3F9JBVNMQ4ZUV,72,24024,20,Operational Profiles in SoftwareReliability Engineering,john d. musa,"52","A systematic approach to organizing the process of determining the operational profile for guiding software development is presented. The operational profile is a quantitative characterization of how a system will be used that shows how to increase productivity and reliability and speed development by allocating development resources to function on the basis of use. Using an operational profile to guide testing ensures that if testing is terminated and the software is shipped because of schedule constraints, the most-used operations will have received the most testing and the reliability level will be the maximum that is practically achievable for the given test time. For guiding regression testing, it efficiently allocates test cases in accordance with use, so the faults most likely to be found, of those introduced by changes, are the ones that have the most effect on reliability.",10.1109/52.199724,1,1,1,2,{},927,http://ieeexplore.ieee.org/abstract/document/199724/
3UUSLRKAULRHA7P92CVFL7Z41D97D5,30MVJZJNHN10DWBOH7KBQLGAGT29J8,A1665VCUSZL9YT,93,20795,19,Abstractions for Software Architecture and Tools to Support Them,"mary m. shaw,robert deline,daniel v. klein,theodore l. ross,david m. young,gregory zelesnik","69","Architectures for software use rich abstractions and idioms to describe system components, the nature of interactions among the components, and the patterns that guide the composition of components into systems. These abstractions are higher level than the elements usually supported by programming languages and tools. They capture packaging and interaction issues as well as computational functionality. Well-established (if informal) patterns guide architectural design of systems. We sketch a model for defining architectures and present an implementation of the basic level of that model. Our purpose is to support the abstractions used in practice by software designers. The implementation provides a testbed for experiments with a variety of system construction mechanisms. It distinguishes among different types of components and different ways these components can interact. It supports abstract interactions such as data flow and scheduling on the same footing as simple procedure call. It can express and check appropriate compatibility restrictions and configuration constraints. It accepts existing code as components, incurring no runtime overhead after initialization. It allows easy incorporation of specifications and associated analysis tools developed elsewhere. The implementation provides a base for extending the notation and validating the model.",https://doi.org/10.1109/32.385970,1,1,1,1|2,{},228,http://dl.acm.org/citation.cfm?id=205319
3UUSLRKAULRHA7P92CVFL7Z41D97D5,3UNH76FOCTT5F5PHSGPJ5U1ITHCYMQ,A3F9JBVNMQ4ZUV,111,20795,19,Abstractions for Software Architecture and Tools to Support Them,"mary m. shaw,robert deline,daniel v. klein,theodore l. ross,david m. young,gregory zelesnik","69","Architectures for software use rich abstractions and idioms to describe system components, the nature of interactions among the components, and the patterns that guide the composition of components into systems. These abstractions are higher level than the elements usually supported by programming languages and tools. They capture packaging and interaction issues as well as computational functionality. Well-established (if informal) patterns guide architectural design of systems. We sketch a model for defining architectures and present an implementation of the basic level of that model. Our purpose is to support the abstractions used in practice by software designers. The implementation provides a testbed for experiments with a variety of system construction mechanisms. It distinguishes among different types of components and different ways these components can interact. It supports abstract interactions such as data flow and scheduling on the same footing as simple procedure call. It can express and check appropriate compatibility restrictions and configuration constraints. It accepts existing code as components, incurring no runtime overhead after initialization. It allows easy incorporation of specifications and associated analysis tools developed elsewhere. The implementation provides a base for extending the notation and validating the model.",http://www.cs.cmu.edu/afs/cs/project/vit/ftp/pdf/UniCon.pdf,,1,1,1|2,{},1175,http://ieeexplore.ieee.org/abstract/document/385970/
3UUSLRKAULRHA7P92CVFL7Z41D97D5,3WZ36BJEV44DFSMQRLCBJXY92GIBTH,AAZGEO8M5ZYOB,468,20795,19,Abstractions for Software Architecture and Tools to Support Them,"mary m. shaw,robert deline,daniel v. klein,theodore l. ross,david m. young,gregory zelesnik","69","Architectures for software use rich abstractions and idioms to describe system components, the nature of interactions among the components, and the patterns that guide the composition of components into systems. These abstractions are higher level than the elements usually supported by programming languages and tools. They capture packaging and interaction issues as well as computational functionality. Well-established (if informal) patterns guide architectural design of systems. We sketch a model for defining architectures and present an implementation of the basic level of that model. Our purpose is to support the abstractions used in practice by software designers. The implementation provides a testbed for experiments with a variety of system construction mechanisms. It distinguishes among different types of components and different ways these components can interact. It supports abstract interactions such as data flow and scheduling on the same footing as simple procedure call. It can express and check appropriate compatibility restrictions and configuration constraints. It accepts existing code as components, incurring no runtime overhead after initialization. It allows easy incorporation of specifications and associated analysis tools developed elsewhere. The implementation provides a base for extending the notation and validating the model.",10.1109/32.385970,4,2,2,1|2|3|4,{},261,http://ieeexplore.ieee.org/abstract/document/385970/
3VMV5CHJZ837KPW7H5ZOWOUJ32GGT0,31LVTDXBL8YCCMVAE9WAXLTWQPOLRQ,A1665VCUSZL9YT,724,20280,19,Test Case Prioritization A Family of Empirical Studies,"sebastian g. elbaum,alexey g. malishevsky,gregg rothermel","69","To reduce the cost of regression testing, software testers may prioritize their test cases so that those which are more important, by some measure, are run earlier in the regression testing process. One potential goal of such prioritization is to increase a test suite's rate of fault detection. Previous work reported results of studies that showed that prioritization techniques can significantly improve rate of fault detection. Those studies, however, raised several additional questions: 1) Can prioritization techniques be effective when targeted at specific modified versions; 2) what trade-offs exist between fine granularity and coarse granularity prioritization techniques; 3) can the incorporation of measures of fault proneness into prioritization techniques improve their effectiveness? To address these questions, we have performed several new studies in which we empirically compared prioritization techniques using both controlled experiments and case studies. The results of these studies show that each of the prioritization techniques considered can improve the rate of fault detection of test suites overall. Fine-granularity techniques typically outperformed coarse-granularity techniques, but only by a relatively small margin overall; in other words, the relative imprecision in coarse-granularity analysis did not dramatically reduce coarse-granularity techniques' ability to improve rate of fault detection. Incorporation of fault-proneness techniques produced relatively small improvements over other techniques in terms of rate of fault detection, a result which ran contrary to our expectations. Our studies also show that the relative effectiveness of various techniques can vary significantly across target programs. Furthermore, our analysis shows that whether the effectiveness differences observed will result in savings in practice varies substantially with the cost factors associated with particular testing processes. Further work to understand the sources of this variance and to incorporate such understanding into prioritization techniques and the choice of techniques would be beneficial.",https://doi.org/10.1109/32.988497,1,1,1,1|2,{},170,http://dl.acm.org/citation.cfm?id=506205
3VMV5CHJZ837KPW7H5ZOWOUJ32GGT0,3VE8AYVF8NLKUP6ITPNCBRT731A8FS,A3F9JBVNMQ4ZUV,92,20280,19,Test Case Prioritization A Family of Empirical Studies,"sebastian g. elbaum,alexey g. malishevsky,gregg rothermel","69","To reduce the cost of regression testing, software testers may prioritize their test cases so that those which are more important, by some measure, are run earlier in the regression testing process. One potential goal of such prioritization is to increase a test suite's rate of fault detection. Previous work reported results of studies that showed that prioritization techniques can significantly improve rate of fault detection. Those studies, however, raised several additional questions: 1) Can prioritization techniques be effective when targeted at specific modified versions; 2) what trade-offs exist between fine granularity and coarse granularity prioritization techniques; 3) can the incorporation of measures of fault proneness into prioritization techniques improve their effectiveness? To address these questions, we have performed several new studies in which we empirically compared prioritization techniques using both controlled experiments and case studies. The results of these studies show that each of the prioritization techniques considered can improve the rate of fault detection of test suites overall. Fine-granularity techniques typically outperformed coarse-granularity techniques, but only by a relatively small margin overall; in other words, the relative imprecision in coarse-granularity analysis did not dramatically reduce coarse-granularity techniques' ability to improve rate of fault detection. Incorporation of fault-proneness techniques produced relatively small improvements over other techniques in terms of rate of fault detection, a result which ran contrary to our expectations. Our studies also show that the relative effectiveness of various techniques can vary significantly across target programs. Furthermore, our analysis shows that whether the effectiveness differences observed will result in savings in practice varies substantially with the cost factors associated with particular testing processes. Further work to understand the sources of this variance and to incorporate such understanding into prioritization techniques and the choice of techniques would be beneficial.",http://digitalcommons.unl.edu/cgi/viewcontent.cgi?article=1018&context=csearticles,3,1,1,2,{},724,http://ieeexplore.ieee.org/abstract/document/988497/
3VQTAXTYN39QTL3L1OXK09PO63VBU5,358010RM5FHZ5NTG1C489CDMI9YVXC,A30M7MYW1BHQN1,156,20352,19,Does Code Decay Assessing the Evidence from Change Management Data,"stephen g. eick,todd l. graves,alan f. karr,james stephen marron,audris mockus","65","A central feature of the evolution of large software systems is that changewhich is necessary to add new functionality, accommodate new hardware, and repair faultsbecomes increasingly difficult over time. In this paper, we approach this phenomenon, which we term code decay, scientifically and statistically. We define code decay and propose a number of measurements (code decay indices) on software and on the organizations that produce it, that serve as symptoms, risk factors, and predictors of decay. Using an unusually rich data set (the fifteen-plus year change history of the millions of lines of software for a telephone switching system), we find mixed, but on the whole persuasive, statistical evidence of code decay, which is corroborated by developers of the code. Suggestive indications that perfective maintenance can retard code decay are also discussed.",10.1109/32.895984,1,1,1,3,{},605,http://ieeexplore.ieee.org/abstract/document/895984/
3VQTAXTYN39QTL3L1OXK09PO63VBU5,3IXEICO793779G5VVUV38HCHOF86TS,A3F9JBVNMQ4ZUV,73,20352,19,Does Code Decay Assessing the Evidence from Change Management Data,"stephen g. eick,todd l. graves,alan f. karr,james stephen marron,audris mockus","65","A central feature of the evolution of large software systems is that changewhich is necessary to add new functionality, accommodate new hardware, and repair faultsbecomes increasingly difficult over time. In this paper, we approach this phenomenon, which we term code decay, scientifically and statistically. We define code decay and propose a number of measurements (code decay indices) on software and on the organizations that produce it, that serve as symptoms, risk factors, and predictors of decay. Using an unusually rich data set (the fifteen-plus year change history of the millions of lines of software for a telephone switching system), we find mixed, but on the whole persuasive, statistical evidence of code decay, which is corroborated by developers of the code. Suggestive indications that perfective maintenance can retard code decay are also discussed.",http://www.cs.kent.edu/~jmaletic/cs63902/Papers/Eick-TSE01.pdf,,1,1,2,{},605,http://ieeexplore.ieee.org/abstract/document/895984/
3VQTAXTYN39QTL3L1OXK09PO63VBU5,3PZDLQMM0U925YKJM6OATUV1KPL2C5,AMGQ3YEAMC3Z2,84,20352,19,Does Code Decay Assessing the Evidence from Change Management Data,"stephen g. eick,todd l. graves,alan f. karr,james stephen marron,audris mockus","65","A central feature of the evolution of large software systems is that changewhich is necessary to add new functionality, accommodate new hardware, and repair faultsbecomes increasingly difficult over time. In this paper, we approach this phenomenon, which we term code decay, scientifically and statistically. We define code decay and propose a number of measurements (code decay indices) on software and on the organizations that produce it, that serve as symptoms, risk factors, and predictors of decay. Using an unusually rich data set (the fifteen-plus year change history of the millions of lines of software for a telephone switching system), we find mixed, but on the whole persuasive, statistical evidence of code decay, which is corroborated by developers of the code. Suggestive indications that perfective maintenance can retard code decay are also discussed.",10.1109/32.895984,4,1,1,1|2,{},218,http://ieeexplore.ieee.org/abstract/document/895984/
3VZYA8PITOM8OJAW27SN8G1PGI550V,3A1COHJ8NKJ48LXOOFBCEC5KK1C8HM,AZ72Z7VU6TQCN,128,5372,2,Identifying Reasons for Software Changes using Historic Databases,"audris mockus,lawrence g. votta","55","Large-scale software products must constantly change in order to adapt to a changing environment. Studies of historic data from legacy software systems have identified three specific causes of this change: adding new features; correcting faults; and restructuring code to accommodate future changes. Our hypothesis is that a textual description field of a change is essential to understanding why that change was performed. In addition, we expect that difficulty, size, and interval would vary strongly across different types of changes. To test these hypotheses we have designed a program, which automatically classifies maintenance activity based on a textual description of changes. Developer surveys showed that the automatic classification was in agreement with developer opinions. Tests of the classifier on a different product found that size and interval for different types of changes did not vary across two products. We have found strong relationships between the type and size of a change and the time required to carry it out. We also discovered a relatively large amount of perfective changes in the system we examined. From the study we have arrived at several suggestions on how to make version control data useful in diagnosing the state of a software project, without significantly increasing the overhead for the developer using the change management system.",DOI: 10.1109/ICSM.2000.883028,1|2,1,1,2|3,{},375,http://ieeexplore.ieee.org/abstract/document/883028/
3VZYA8PITOM8OJAW27SN8G1PGI550V,3D4CH1LGEBHQMULN91Z8T8OUOMKG9G,A3F9JBVNMQ4ZUV,47,5372,2,Identifying Reasons for Software Changes using Historic Databases,"audris mockus,lawrence g. votta","55","Large-scale software products must constantly change in order to adapt to a changing environment. Studies of historic data from legacy software systems have identified three specific causes of this change: adding new features; correcting faults; and restructuring code to accommodate future changes. Our hypothesis is that a textual description field of a change is essential to understanding why that change was performed. In addition, we expect that difficulty, size, and interval would vary strongly across different types of changes. To test these hypotheses we have designed a program, which automatically classifies maintenance activity based on a textual description of changes. Developer surveys showed that the automatic classification was in agreement with developer opinions. Tests of the classifier on a different product found that size and interval for different types of changes did not vary across two products. We have found strong relationships between the type and size of a change and the time required to carry it out. We also discovered a relatively large amount of perfective changes in the system we examined. From the study we have arrived at several suggestions on how to make version control data useful in diagnosing the state of a software project, without significantly increasing the overhead for the developer using the change management system.",http://maveric0.uwaterloo.ca/~migod/846/papers/mockusVotta-icsm00.pdf,1,1,1,1|2,{},375,http://ieeexplore.ieee.org/abstract/document/883028/
3W1K7D6QSB57FKXV7BWSH1438LABZU,38SKSKU7R2LZJNSROM21JTS533NILL,A314XJY8V1YL12,302,20730,19,A Component and MessageBased Architectural Style for GUI Software,"richard n. taylor,nenad medvidovic,kenneth m. anderson,jim whitehead,jason e. robbins,kari a. nies,peyman oreizy,deborah l. dubrow","50","While a large fraction of application code is devoted to graphical user interface (GUI) functions, support for reuse in this domain has largely been confined to the creation of GUI toolkits (""widgets""). We present a novel architectural style directed at supporting larger grain reuse and flexible system composition. Moreover, the style supports design of distributed, concurrent applications. Asynchronous notification messages and asynchronous request messages are the sole basis for intercomponent communication. A key aspect of the style is that components are not built with any dependencies on what typically would be considered lower-level components, such as user interface toolkits. Indeed, all components are oblivious to the existence of any components to which notification messages are sent. While our focus has been on applications involving graphical user interfaces, the style has the potential for broader applicability. Several trial applications using the style are described.",http://sunset.usc.edu/classes/cs599_2000/C2-TSE.pdf,1,,1,2|3|4,{},747,http://sunset.usc.edu/classes/cs599_2000/C2-TSE.pdf
3W1K7D6QSB57FKXV7BWSH1438LABZU,39U1BHVTDMF8CXIDCSX51E0XEOA3TN,A3F9JBVNMQ4ZUV,59,20730,19,A Component and MessageBased Architectural Style for GUI Software,"richard n. taylor,nenad medvidovic,kenneth m. anderson,jim whitehead,jason e. robbins,kari a. nies,peyman oreizy,deborah l. dubrow","50","While a large fraction of application code is devoted to graphical user interface (GUI) functions, support for reuse in this domain has largely been confined to the creation of GUI toolkits (""widgets""). We present a novel architectural style directed at supporting larger grain reuse and flexible system composition. Moreover, the style supports design of distributed, concurrent applications. Asynchronous notification messages and asynchronous request messages are the sole basis for intercomponent communication. A key aspect of the style is that components are not built with any dependencies on what typically would be considered lower-level components, such as user interface toolkits. Indeed, all components are oblivious to the existence of any components to which notification messages are sent. While our focus has been on applications involving graphical user interfaces, the style has the potential for broader applicability. Several trial applications using the style are described.",http://sunset.usc.edu/classes/cs599_2000/C2-TSE.pdf,1,1,1,1|2,{},747,http://ieeexplore.ieee.org/abstract/document/508313/
3W1K7D6QSB57FKXV7BWSH1438LABZU,3GA6AFUKOPCI7ORICYGGNVX94FJH32,AZ72Z7VU6TQCN,66,20730,19,A Component and MessageBased Architectural Style for GUI Software,"richard n. taylor,nenad medvidovic,kenneth m. anderson,jim whitehead,jason e. robbins,kari a. nies,peyman oreizy,deborah l. dubrow","50","While a large fraction of application code is devoted to graphical user interface (GUI) functions, support for reuse in this domain has largely been confined to the creation of GUI toolkits (""widgets""). We present a novel architectural style directed at supporting larger grain reuse and flexible system composition. Moreover, the style supports design of distributed, concurrent applications. Asynchronous notification messages and asynchronous request messages are the sole basis for intercomponent communication. A key aspect of the style is that components are not built with any dependencies on what typically would be considered lower-level components, such as user interface toolkits. Indeed, all components are oblivious to the existence of any components to which notification messages are sent. While our focus has been on applications involving graphical user interfaces, the style has the potential for broader applicability. Several trial applications using the style are described.",DOI: 10.1109/32.508313,1,1,1,2|3,{},747,http://ieeexplore.ieee.org/abstract/document/508313/
3WA2XVDZEM53YDP4FX17LBHT6EQE66,33ISQZVXPQAF3GCLJZDG574NWD2CCM,A1EG9JMR2CU45U,877,2184,1,Locating causes of program failures,"holger cleve,andreas zeller","81","Which is the defect that causes a software failure? By comparing the program states of a failing and a passing run, we can identify the state differences that cause the failure. However, these state differences can occur all over the program run. Therefore, we focus in space on those variables and values that are relevant for the failure, and in time on those moments where cause transitions occur---moments where new relevant variables begin being failure causes: ""Initially, variable argc was 3; therefore, at shell_sort(), variable [2] was 0, and therefore, the program failed."" In our evaluation, cause transitions locate the failure-inducing defect twice as well as the best methods known so far.",http://www.cs.purdue.edu/homes/xyzhang/spring07/Papers/ase05.pdf,1,1,1,2|3,{},179,https://scholar.google.co.in/scholar?hl=en&q=Locating+faulty+code+using+failureinducing+chops&btnG=
3WA2XVDZEM53YDP4FX17LBHT6EQE66,37C0GNLMHGR0SR9Y94VO3DUVL3S6D1,A30M7MYW1BHQN1,276,2184,1,Locating causes of program failures,"holger cleve,andreas zeller","81","Which is the defect that causes a software failure? By comparing the program states of a failing and a passing run, we can identify the state differences that cause the failure. However, these state differences can occur all over the program run. Therefore, we focus in space on those variables and values that are relevant for the failure, and in time on those moments where cause transitions occur---moments where new relevant variables begin being failure causes: ""Initially, variable argc was 3; therefore, at shell_sort(), variable [2] was 0, and therefore, the program failed."" In our evaluation, cause transitions locate the failure-inducing defect twice as well as the best methods known so far.",10.1109/ICSE.2005.1553577,1,1,1,2|4,{},575,http://ieeexplore.ieee.org/abstract/document/1553577/
3WA2XVDZEM53YDP4FX17LBHT6EQE66,3X65QVEQI1B86K6RWC6F8QUAQNZLCW,A3F9JBVNMQ4ZUV,71,2184,1,Locating causes of program failures,"holger cleve,andreas zeller","81","Which is the defect that causes a software failure? By comparing the program states of a failing and a passing run, we can identify the state differences that cause the failure. However, these state differences can occur all over the program run. Therefore, we focus in space on those variables and values that are relevant for the failure, and in time on those moments where cause transitions occur---moments where new relevant variables begin being failure causes: ""Initially, variable argc was 3; therefore, at shell_sort(), variable [2] was 0, and therefore, the program failed."" In our evaluation, cause transitions locate the failure-inducing defect twice as well as the best methods known so far.",http://barbie.uta.edu/~jxu/Locating%20Causes%20of%20Program%20Failures.pdf,1,1,1,2,{},575,http://ieeexplore.ieee.org/abstract/document/1553577/
3WYZV0QBFJ1IAPXG6T87KGOS0LCBXX,31LVTDXBL8YCCMVAE9WAXLTWQPERLM,A3F9JBVNMQ4ZUV,42,10132,9,SOBER statistical modelbased bug localization,"chao liu,xifeng yan,long fei,jiawei han,samuel p. midkiff","52","Automated localization of software bugs is one of the essential issues in debugging aids. Previous studies indicated that the evaluation history of program predicates may disclose important clues about underlying bugs. In this paper, we propose a new statistical model-based approach, called SOBER, which localizes software bugs without any prior knowledge of program semantics. Unlike existing statistical debugging approaches that select predicates correlated with program failures, SOBER models evaluation patterns of predicates in both correct and incorrect runs respectively and regards a predicate as bug-relevant if its evaluation pattern in incorrect runs differs significantly from that in correct ones. SOBER features a principled quantification of the pattern difference that measures the bug-relevance of program predicates.We systematically evaluated our approach under the same setting as previous studies. The result demonstrated the power of our approach in bug localization: SOBER can help programmers locate 68 out of 130 bugs in the Siemens suite when programmers are expected to examine no more than 10% of the code, whereas the best previously reported is 52 out of 130. Moreover, with the assistance of SOBER, we found two bugs in bc 1.06 (an arbitrary precision calculator on UNIX/Linux), one of which has never been reported before.",http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.484.8002&rep=rep1&type=pdf,1|3,1,,1|2,{},193,http://dl.acm.org/citation.cfm?id=1081753
3WYZV0QBFJ1IAPXG6T87KGOS0LCBXX,3YHH42UU5C3OCSBBKWDVDPS9HGGL0H,AZ72Z7VU6TQCN,93,10132,9,SOBER statistical modelbased bug localization,"chao liu,xifeng yan,long fei,jiawei han,samuel p. midkiff","52","Automated localization of software bugs is one of the essential issues in debugging aids. Previous studies indicated that the evaluation history of program predicates may disclose important clues about underlying bugs. In this paper, we propose a new statistical model-based approach, called SOBER, which localizes software bugs without any prior knowledge of program semantics. Unlike existing statistical debugging approaches that select predicates correlated with program failures, SOBER models evaluation patterns of predicates in both correct and incorrect runs respectively and regards a predicate as bug-relevant if its evaluation pattern in incorrect runs differs significantly from that in correct ones. SOBER features a principled quantification of the pattern difference that measures the bug-relevance of program predicates.We systematically evaluated our approach under the same setting as previous studies. The result demonstrated the power of our approach in bug localization: SOBER can help programmers locate 68 out of 130 bugs in the Siemens suite when programmers are expected to examine no more than 10% of the code, whereas the best previously reported is 52 out of 130. Moreover, with the assistance of SOBER, we found two bugs in bc 1.06 (an arbitrary precision calculator on UNIX/Linux), one of which has never been reported before.",doi>10.1145/1081706.1081753,1,1,,2|3,{},390,http://dl.acm.org/citation.cfm?id=1081753
3X2YVV51PUS28RAYURJWCLXC57F1WB,3AQF3RZ5596XQBNU0AQERDXGX676FR,A3F9JBVNMQ4ZUV,68,20536,19,Building Knowledge through Families of Experiments,"victor r. basili,forrest shull,filippo lanubile","87","Experimentation in software engineering is necessary but difficult. One reason is that there are a large number of context variables and, so, creating a cohesive understanding of experimental results requires a mechanism for motivating studies and integrating results. It requires a community of researchers that can replicate studies, vary context variables, and build models that represent the common observations about the discipline. This paper discusses the experience of the authors, based upon a collection of experiments, in terms of a framework for organizing sets of related studies. With such a framework, experiments can be viewed as part of common families of studies, rather than being isolated events. Common families of studies can contribute to important and relevant hypotheses that may not be suggested by individual experiments. A framework also facilitates building knowledge in an incremental manner through the replication of experiments within families of studies. To support the framework, this paper discusses the experiences of the authors in carrying out empirical studies, with specific emphasis on persistent problems encountered in experimental design, threats to validity, criteria for evaluation, and execution of experiments in the domain of software engineering.",http://drum.lib.umd.edu/bitstream/handle/1903/992/CS-TR-3983.pdf?sequence=2&isAllowed=y,1,,1,2,{},796,http://ieeexplore.ieee.org/abstract/document/799939/
3X2YVV51PUS28RAYURJWCLXC57F1WB,3GM6G9ZBKOL9YJQNIA2KXD93F0WTM5,AZ72Z7VU6TQCN,66,20536,19,Building Knowledge through Families of Experiments,"victor r. basili,forrest shull,filippo lanubile","87","Experimentation in software engineering is necessary but difficult. One reason is that there are a large number of context variables and, so, creating a cohesive understanding of experimental results requires a mechanism for motivating studies and integrating results. It requires a community of researchers that can replicate studies, vary context variables, and build models that represent the common observations about the discipline. This paper discusses the experience of the authors, based upon a collection of experiments, in terms of a framework for organizing sets of related studies. With such a framework, experiments can be viewed as part of common families of studies, rather than being isolated events. Common families of studies can contribute to important and relevant hypotheses that may not be suggested by individual experiments. A framework also facilitates building knowledge in an incremental manner through the replication of experiments within families of studies. To support the framework, this paper discusses the experiences of the authors in carrying out empirical studies, with specific emphasis on persistent problems encountered in experimental design, threats to validity, criteria for evaluation, and execution of experiments in the domain of software engineering.",DOI: 10.1109/32.799939,1|2,1,1,2|3,{},796,http://ieeexplore.ieee.org/abstract/document/799939/
3X2YVV51PUS28RAYURJWCLXC57F1WB,3P4MQ7TPPY0DJ6S9RZLQJ3SNWB8BBL,A1ODVXVCDHOVF1,70,20536,19,Building Knowledge through Families of Experiments,"victor r. basili,forrest shull,filippo lanubile","87","Experimentation in software engineering is necessary but difficult. One reason is that there are a large number of context variables and, so, creating a cohesive understanding of experimental results requires a mechanism for motivating studies and integrating results. It requires a community of researchers that can replicate studies, vary context variables, and build models that represent the common observations about the discipline. This paper discusses the experience of the authors, based upon a collection of experiments, in terms of a framework for organizing sets of related studies. With such a framework, experiments can be viewed as part of common families of studies, rather than being isolated events. Common families of studies can contribute to important and relevant hypotheses that may not be suggested by individual experiments. A framework also facilitates building knowledge in an incremental manner through the replication of experiments within families of studies. To support the framework, this paper discusses the experiences of the authors in carrying out empirical studies, with specific emphasis on persistent problems encountered in experimental design, threats to validity, criteria for evaluation, and execution of experiments in the domain of software engineering.",10.1109/32.799939,1,1,1,1,{},796,http://ieeexplore.ieee.org/abstract/document/799939/
3X878VYTIE6E8R35TIQ5972PDQP7FG,33JKGHPFYDIB36L3LEG8OE3BPXENMV,A3F9JBVNMQ4ZUV,74,24490,21,Guidelines for conducting and reporting case study research in software engineering,"per runeson,martin host","66","Case study is a suitable research methodology for software engineering research since it studies contemporary phenomena in its natural context. However, the understanding of what constitutes a case study varies, and hence the quality of the resulting studies. This paper aims at providing an introduction to case study methodology and guidelines for researchers conducting case studies and readers studying reports of such studies. The content is based on the authors' own experience from conducting and reading case studies. The terminology and guidelines are compiled from different methodology handbooks in other research domains, in particular social science and information systems, and adapted to the needs in software engineering. We present recommended practices for software engineering case studies as well as empirically derived and evaluated checklists for researchers and readers of case study research.",https://link.springer.com/article/10.1007/s10664-008-9102-8,3,1,2,1|2,{},1764,https://link.springer.com/article/10.1007/s10664-008-9102-8
3X878VYTIE6E8R35TIQ5972PDQP7FG,3D4CH1LGEBHQMULN91Z8T8OUOXVG9D,AZ72Z7VU6TQCN,280,24490,21,Guidelines for conducting and reporting case study research in software engineering,"per runeson,martin host","66","Case study is a suitable research methodology for software engineering research since it studies contemporary phenomena in its natural context. However, the understanding of what constitutes a case study varies, and hence the quality of the resulting studies. This paper aims at providing an introduction to case study methodology and guidelines for researchers conducting case studies and readers studying reports of such studies. The content is based on the authors' own experience from conducting and reading case studies. The terminology and guidelines are compiled from different methodology handbooks in other research domains, in particular social science and information systems, and adapted to the needs in software engineering. We present recommended practices for software engineering case studies as well as empirically derived and evaluated checklists for researchers and readers of case study research.",1573-7616,1,1,2,1|2,{},1771,https://link.springer.com/article/10.1007/s10664-008-9102-8
3X878VYTIE6E8R35TIQ5972PDQP7FG,3HWRJOOET6QA7VLVCC9BA08837HESL,A3J6PU5T7XS27,192,24490,21,Guidelines for conducting and reporting case study research in software engineering,"per runeson,martin host","66","Case study is a suitable research methodology for software engineering research since it studies contemporary phenomena in its natural context. However, the understanding of what constitutes a case study varies, and hence the quality of the resulting studies. This paper aims at providing an introduction to case study methodology and guidelines for researchers conducting case studies and readers studying reports of such studies. The content is based on the authors' own experience from conducting and reading case studies. The terminology and guidelines are compiled from different methodology handbooks in other research domains, in particular social science and information systems, and adapted to the needs in software engineering. We present recommended practices for software engineering case studies as well as empirically derived and evaluated checklists for researchers and readers of case study research.",10.1007/s10664-008-9102-8,3,1,1,2|4,{},605,https://link.springer.com/article/10.1007/s10664-008-9102-8
3XDJY5RK5S968MICM9NXSVJIWBE4US,3DZQRBDBSM37XX5YNSSFR94BC4VS3K,A3F9JBVNMQ4ZUV,112,11870,11,Empirical evaluation of the tarantula automatic faultlocalization technique,"james a. jones,mary jean harrold","87","The high cost of locating faults in programs has motivated the development of techniques that assist in fault localization by automating part of the process of searching for faults. Empirical studies that compare these techniques have reported the relative effectiveness of four existing techniques on a set of subjects. These studies compare the rankings that the techniques compute for statements in the subject programs and the effectiveness of these rankings in locating the faults. However, it is unknown how these four techniques compare with Tarantula, another existing fault-localization technique, although this technique also provides a way to rank statements in terms of their suspiciousness. Thus, we performed a study to compare the Tarantula technique with the four techniques previously compared. This paper presents our study---it overviews the Tarantula technique along with the four other techniques studied, describes our experiment, and reports and discusses the results. Our studies show that, on the same set of subjects, the Tarantula technique consistently outperforms the other four techniques in terms of effectiveness in fault localization, and is comparable in efficiency to the least expensive of the other four techniques.",http://laser.cs.umass.edu/courses/cs521-621.Fall10/documents/p273-jones.pdf,3,1,1,1|2,{},793,http://dl.acm.org/citation.cfm?id=1101949
3XDJY5RK5S968MICM9NXSVJIWBE4US,3IOEN3P9S8760WTMTBBT2BTMW7316M,AZ72Z7VU6TQCN,520,11870,11,Empirical evaluation of the tarantula automatic faultlocalization technique,"james a. jones,mary jean harrold","87","The high cost of locating faults in programs has motivated the development of techniques that assist in fault localization by automating part of the process of searching for faults. Empirical studies that compare these techniques have reported the relative effectiveness of four existing techniques on a set of subjects. These studies compare the rankings that the techniques compute for statements in the subject programs and the effectiveness of these rankings in locating the faults. However, it is unknown how these four techniques compare with Tarantula, another existing fault-localization technique, although this technique also provides a way to rank statements in terms of their suspiciousness. Thus, we performed a study to compare the Tarantula technique with the four techniques previously compared. This paper presents our study---it overviews the Tarantula technique along with the four other techniques studied, describes our experiment, and reports and discusses the results. Our studies show that, on the same set of subjects, the Tarantula technique consistently outperforms the other four techniques in terms of effectiveness in fault localization, and is comparable in efficiency to the least expensive of the other four techniques.",doi>10.1145/1101908.1101949,1,1,1,2,{},794,http://dl.acm.org/citation.cfm?id=1101949
3XDJY5RK5S968MICM9NXSVJIWBE4US,3ZSANO2JCGV2D9LR7NTHSIT8GG1SF3,A2VO6V2FJEQZZ,240,11870,11,Empirical evaluation of the tarantula automatic faultlocalization technique,"james a. jones,mary jean harrold","87","The high cost of locating faults in programs has motivated the development of techniques that assist in fault localization by automating part of the process of searching for faults. Empirical studies that compare these techniques have reported the relative effectiveness of four existing techniques on a set of subjects. These studies compare the rankings that the techniques compute for statements in the subject programs and the effectiveness of these rankings in locating the faults. However, it is unknown how these four techniques compare with Tarantula, another existing fault-localization technique, although this technique also provides a way to rank statements in terms of their suspiciousness. Thus, we performed a study to compare the Tarantula technique with the four techniques previously compared. This paper presents our study---it overviews the Tarantula technique along with the four other techniques studied, describes our experiment, and reports and discusses the results. Our studies show that, on the same set of subjects, the Tarantula technique consistently outperforms the other four techniques in terms of effectiveness in fault localization, and is comparable in efficiency to the least expensive of the other four techniques.",http://laser.cs.umass.edu/courses/cs521-621.Fall10/documents/p273-jones.pdf,1,1,1,1|2|3,{},794,http://dl.acm.org/citation.cfm?id=1101949
3Y7LTZE0YTAMBJ6172DNMRWRX6GZUY,3634BBTX0PIDJVIV2BZ3OGNL6FEFI6,AZ72Z7VU6TQCN,76,5482,2,Clone Detection Using Abstract Syntax Trees,"ira d. baxter,andrew yahin,leonardo mendonca de moura,marcelo sant'anna,lorraine bier","80",This empirical study analyzes changes in C++ source code which occurred between two releases of an industrial soft ware product and compares them with entities and relations available in object-oriented modeling techniques. The comparison offers increased ...,DOI: 10.1109/ICSM.1998.738528,1,1,1,1|2,{},1154,http://ieeexplore.ieee.org/abstract/document/738528/
3Y7LTZE0YTAMBJ6172DNMRWRX6GZUY,3MRNMEIQW6UIBCC5W81QSWCSBM6LDP,A30M7MYW1BHQN1,234,5482,2,Clone Detection Using Abstract Syntax Trees,"ira d. baxter,andrew yahin,leonardo mendonca de moura,marcelo sant'anna,lorraine bier","80",This empirical study analyzes changes in C++ source code which occurred between two releases of an industrial soft ware product and compares them with entities and relations available in object-oriented modeling techniques. The comparison offers increased ...,10.1109/ICSM.1998.738528,1,2,1,2,{},1152,http://ieeexplore.ieee.org/abstract/document/738528/
3Y7LTZE0YTAMBJ6172DNMRWRX6GZUY,3PDJHANYK64H47E0V0EEUY9TDLBH6R,A3F9JBVNMQ4ZUV,118,5482,2,Clone Detection Using Abstract Syntax Trees,"ira d. baxter,andrew yahin,leonardo mendonca de moura,marcelo sant'anna,lorraine bier","80",This empirical study analyzes changes in C++ source code which occurred between two releases of an industrial soft ware product and compares them with entities and relations available in object-oriented modeling techniques. The comparison offers increased ...,http://facebook.comwww.semanticdesigns.com/Company/Publications/ICSM98.pdf,1|3,1,1,1|2,{},1152,http://ieeexplore.ieee.org/abstract/document/738528/
3YLPJ8OXX81YPQC7REYKC2IMQTUX4C,3A1COHJ8NKJ48LXOOFBCEC5KJQA8HX,AZ72Z7VU6TQCN,1273,3068,1,ArchitectureBased Runtime Software Evolution,"peyman oreizy,nenad medvidovic,richard n. taylor","49",None,no doi number,1,1,1,1|4,{},815,http://dl.acm.org/citation.cfm?id=302181
3YLPJ8OXX81YPQC7REYKC2IMQTUX4C,3GGAI1SQEWMSC2OCWO7U839ZQSTMC3,A3F9JBVNMQ4ZUV,57,3068,1,ArchitectureBased Runtime Software Evolution,"peyman oreizy,nenad medvidovic,richard n. taylor","49",None,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.4794&rep=rep1&type=pdf,1|3,1,1,2,{},814,http://dl.acm.org/citation.cfm?id=302181
3YLPJ8OXX81YPQC7REYKC2IMQTV4XK,3CN4LGXD5YCPBF0BMCPNJ0KI70RY4F,A30M7MYW1BHQN1,355,20703,19,PropertyBased Software Engineering Measurement,"lionel c. briand,sandro morasca,victor r. basili","60","Little theory exists in the field of software system measurement. Concepts such as complexity, coupling, cohesion or even size are very often subject to interpretation and appear to have inconsistent definitions in the literature. As a consequence, there is little guidance provided to the analyst attempting to define proper measures for specific problems. Many controversies in the literature are simply misunderstandings and stem from the fact that some people talk about different measurement concepts under the same label (complexity is the most common case).There is a need to define unambiguously the most important measurement concepts used in the measurement of software products. One way of doing so is to define precisely what mathematical properties characterize these concepts, regardless of the specific software artifacts to which these concepts are applied. Such a mathematical framework could generate a consensus in the software engineering community and provide a means for better communication among researchers, better guidelines for analysts, and better evaluation methods for commercial static analyzers for practitioners.In this paper, we propose a mathematical framework which is generic, because it is not specific to any particular software artifact, and rigorous, because it is based on precise mathematical concepts. We use this framework to propose definitions of several important measurement concepts (size, length, complexity, cohesion, coupling). It does not intend to be complete or fully objective; other frameworks could have been proposed and different choices could have been made. However, we believe that the formalisms and properties we introduce are convenient and intuitive. This framework contributes constructively to a firmer theoretical ground of software measurement.",10.1109/32.481535,1,2,1,2|3,{},801,http://ieeexplore.ieee.org/abstract/document/481535/
3YLPJ8OXX81YPQC7REYKC2IMQTV4XK,3HMVI3QICKG8JG3SZU6LL2DFVN3Y12,AZ72Z7VU6TQCN,261,20703,19,PropertyBased Software Engineering Measurement,"lionel c. briand,sandro morasca,victor r. basili","60","Little theory exists in the field of software system measurement. Concepts such as complexity, coupling, cohesion or even size are very often subject to interpretation and appear to have inconsistent definitions in the literature. As a consequence, there is little guidance provided to the analyst attempting to define proper measures for specific problems. Many controversies in the literature are simply misunderstandings and stem from the fact that some people talk about different measurement concepts under the same label (complexity is the most common case).There is a need to define unambiguously the most important measurement concepts used in the measurement of software products. One way of doing so is to define precisely what mathematical properties characterize these concepts, regardless of the specific software artifacts to which these concepts are applied. Such a mathematical framework could generate a consensus in the software engineering community and provide a means for better communication among researchers, better guidelines for analysts, and better evaluation methods for commercial static analyzers for practitioners.In this paper, we propose a mathematical framework which is generic, because it is not specific to any particular software artifact, and rigorous, because it is based on precise mathematical concepts. We use this framework to propose definitions of several important measurement concepts (size, length, complexity, cohesion, coupling). It does not intend to be complete or fully objective; other frameworks could have been proposed and different choices could have been made. However, we believe that the formalisms and properties we introduce are convenient and intuitive. This framework contributes constructively to a firmer theoretical ground of software measurement.",DOI: 10.1109/32.481535,1,1,1,2,{},801,http://ieeexplore.ieee.org/abstract/document/481535/
3YLPJ8OXX81YPQC7REYKC2IMQTV4XK,3Z7EFSHGNA236ENGAV93JKPXXWGXC1,A3F9JBVNMQ4ZUV,94,20703,19,PropertyBased Software Engineering Measurement,"lionel c. briand,sandro morasca,victor r. basili","60","Little theory exists in the field of software system measurement. Concepts such as complexity, coupling, cohesion or even size are very often subject to interpretation and appear to have inconsistent definitions in the literature. As a consequence, there is little guidance provided to the analyst attempting to define proper measures for specific problems. Many controversies in the literature are simply misunderstandings and stem from the fact that some people talk about different measurement concepts under the same label (complexity is the most common case).There is a need to define unambiguously the most important measurement concepts used in the measurement of software products. One way of doing so is to define precisely what mathematical properties characterize these concepts, regardless of the specific software artifacts to which these concepts are applied. Such a mathematical framework could generate a consensus in the software engineering community and provide a means for better communication among researchers, better guidelines for analysts, and better evaluation methods for commercial static analyzers for practitioners.In this paper, we propose a mathematical framework which is generic, because it is not specific to any particular software artifact, and rigorous, because it is based on precise mathematical concepts. We use this framework to propose definitions of several important measurement concepts (size, length, complexity, cohesion, coupling). It does not intend to be complete or fully objective; other frameworks could have been proposed and different choices could have been made. However, we believe that the formalisms and properties we introduce are convenient and intuitive. This framework contributes constructively to a firmer theoretical ground of software measurement.",http://drum.lib.umd.edu/bitstream/handle/1903/19/CS-TR-3368.pdf?sequence=2,,1,2,1|2,{},798,http://ieeexplore.ieee.org/abstract/document/481535/
3YOAVL4CA05NULCMSWM59NYXYTT4ZH,35GCEFQ6I6C4Y9RCIKMNN21EZNSZ31,A30M7MYW1BHQN1,411,20123,19,Scaling StepWise Refinement,"don s. batory,jacob neal sarvela,axel rauschmayer","55","Step-wise refinement is a powerful paradigm for developing a complex program from a simple program by adding features incrementally. We present the AHEAD (Algebraic Hierarchical Equations for Application Design) model that shows how step-wise refinement scales to synthesize multiple programs and multiple noncode representations. AHEAD shows that software can have an elegant, hierarchical mathematical structure that is expressible as nested sets of equations. We review a tool set that supports AHEAD. As a demonstration of its viability, we have bootstrapped AHEAD tools from equational specifications, refining Java and non-Java artifacts automatically; a task that was accomplished only by ad hoc means previously.",10.1109/TSE.2004.23,1,1,1,2|3,{},1027,http://ieeexplore.ieee.org/abstract/document/1321059/
3YOAVL4CA05NULCMSWM59NYXYTT4ZH,35H6S234SBO5OEU5UYD5516389W655,AA2O932UNAZA1,118,20123,19,Scaling StepWise Refinement,"don s. batory,jacob neal sarvela,axel rauschmayer","55","Step-wise refinement is a powerful paradigm for developing a complex program from a simple program by adding features incrementally. We present the AHEAD (Algebraic Hierarchical Equations for Application Design) model that shows how step-wise refinement scales to synthesize multiple programs and multiple noncode representations. AHEAD shows that software can have an elegant, hierarchical mathematical structure that is expressible as nested sets of equations. We review a tool set that supports AHEAD. As a demonstration of its viability, we have bootstrapped AHEAD tools from equational specifications, refining Java and non-Java artifacts automatically; a task that was accomplished only by ad hoc means previously.",10.1109/TSE.2004.23,1,1,1,2,{},150,http://ieeexplore.ieee.org/abstract/document/1321059/?reload=true
3YOAVL4CA05NULCMSWM59NYXYTT4ZH,3X31TUMD7YAOJHWTGFHVRUBJMRHL1H,A3F9JBVNMQ4ZUV,67,20123,19,Scaling StepWise Refinement,"don s. batory,jacob neal sarvela,axel rauschmayer","55","Step-wise refinement is a powerful paradigm for developing a complex program from a simple program by adding features incrementally. We present the AHEAD (Algebraic Hierarchical Equations for Application Design) model that shows how step-wise refinement scales to synthesize multiple programs and multiple noncode representations. AHEAD shows that software can have an elegant, hierarchical mathematical structure that is expressible as nested sets of equations. We review a tool set that supports AHEAD. As a demonstration of its viability, we have bootstrapped AHEAD tools from equational specifications, refining Java and non-Java artifacts automatically; a task that was accomplished only by ad hoc means previously.",http://www.distributeditsolutions.com/twiki/pub/Know/LanguageDesign/ahead.pdf,1|3,1,1,1|2,{},1027,http://ieeexplore.ieee.org/abstract/document/1321059/
3ZLW647WALJC6EQ63B88C7WKZKY23M,36DSNE9QZ6M3KJFUJW3TNBBZCYKJO5,AZ72Z7VU6TQCN,74,20068,19,A Survey of Controlled Experiments in Software Engineering,"dag i. k. sjoberg,jo erskine hannay,ove hansen,vigdis by kampenes,amela karahasanovic,nils-kristian liborg,anette c. rekdal","45","The classical method for identifying cause-effect relationships is to conduct controlled experiments. This paper reports upon the present state of how controlled experiments in software engineering are conducted and the extent to which relevant information is reported. Among the 5,453 scientific articles published in 12 leading software engineering journals and conferences in the decade from 1993 to 2002, 103 articles (1.9 percent) reported controlled experiments in which individuals or teams performed one or more software engineering tasks. This survey quantitatively characterizes the topics of the experiments and their subjects (number of subjects, students versus professionals, recruitment, and rewards for participation), tasks (type of task, duration, and type and size of application) and environments (location, development tools). Furthermore, the survey reports on how internal and external validity is addressed and the extent to which experiments are replicated. The gathered data reflects the relevance of software engineering experiments to industrial practice and the scientific maturity of software engineering research.",DOI: 10.1109/TSE.2005.97,1|2,1,,1|2,{},554,http://ieeexplore.ieee.org/abstract/document/1514443/
3ZLW647WALJC6EQ63B88C7WKZKY23M,39ZSFO5CA9KYXOZRFIF2MH3OTZIUJW,A3F9JBVNMQ4ZUV,73,20068,19,A Survey of Controlled Experiments in Software Engineering,"dag i. k. sjoberg,jo erskine hannay,ove hansen,vigdis by kampenes,amela karahasanovic,nils-kristian liborg,anette c. rekdal","45","The classical method for identifying cause-effect relationships is to conduct controlled experiments. This paper reports upon the present state of how controlled experiments in software engineering are conducted and the extent to which relevant information is reported. Among the 5,453 scientific articles published in 12 leading software engineering journals and conferences in the decade from 1993 to 2002, 103 articles (1.9 percent) reported controlled experiments in which individuals or teams performed one or more software engineering tasks. This survey quantitatively characterizes the topics of the experiments and their subjects (number of subjects, students versus professionals, recruitment, and rewards for participation), tasks (type of task, duration, and type and size of application) and environments (location, development tools). Furthermore, the survey reports on how internal and external validity is addressed and the extent to which experiments are replicated. The gathered data reflects the relevance of software engineering experiments to industrial practice and the scientific maturity of software engineering research.",10.1109/TSE.2005.97,,1,2,2,{},554,http://ieeexplore.ieee.org/abstract/document/1514443/
3ZLW647WALJC6EQ63B88C7WKZKY23M,3UNH76FOCTT5F5PHSGPJ5U1ITJMYM4,A2DBB5DUZOB4B6,495,20068,19,A Survey of Controlled Experiments in Software Engineering,"dag i. k. sjoberg,jo erskine hannay,ove hansen,vigdis by kampenes,amela karahasanovic,nils-kristian liborg,anette c. rekdal","45","The classical method for identifying cause-effect relationships is to conduct controlled experiments. This paper reports upon the present state of how controlled experiments in software engineering are conducted and the extent to which relevant information is reported. Among the 5,453 scientific articles published in 12 leading software engineering journals and conferences in the decade from 1993 to 2002, 103 articles (1.9 percent) reported controlled experiments in which individuals or teams performed one or more software engineering tasks. This survey quantitatively characterizes the topics of the experiments and their subjects (number of subjects, students versus professionals, recruitment, and rewards for participation), tasks (type of task, duration, and type and size of application) and environments (location, development tools). Furthermore, the survey reports on how internal and external validity is addressed and the extent to which experiments are replicated. The gathered data reflects the relevance of software engineering experiments to industrial practice and the scientific maturity of software engineering research.",10.1109/TSE.2005.97,1,2,2,1,ITS VERY DIFFICULT TO ANSWER CQ2,213,http://ieeexplore.ieee.org/abstract/document/1514443/
3ZRKL6Z1E8R65PJSS5UYMJYX1J2GSB,33OOO72IVI9WPXEW5L86UH4RKC5TCF,AZ72Z7VU6TQCN,59,20542,19,Qualitative Methods in Empirical Studies of Software Engineering,carolyn b. seaman,"71","While empirical studies in software engineering are beginning to gain recognition in the research community, this subarea is also entering a new level of maturity by beginning to address the human aspects of software development. This added focus has added a new layer of complexity to an already challenging area of research. Along with new research questions, new research methods are needed to study nontechnical aspects of software engineering. In many other disciplines, qualitative research methods have been developed and are commonly used to handle the complexity of issues involving human behavior. This paper presents several qualitative methods for data collection and analysis and describes them in terms of how they might be incorporated into empirical studies of software engineering, in particular how they might be combined with quantitative methods. To illustrate this use of qualitative methods, examples from real software engineering studies are used throughout.",DOI: 10.1109/32.799955,1,1,1,2,{},1013,http://ieeexplore.ieee.org/abstract/document/799955/
3ZRKL6Z1E8R65PJSS5UYMJYX1J2GSB,39RP059MEIH92XW6IOBZXJ3H8AJBMH,A3SAN0Z4EPHDYA,283,20542,19,Qualitative Methods in Empirical Studies of Software Engineering,carolyn b. seaman,"71","While empirical studies in software engineering are beginning to gain recognition in the research community, this subarea is also entering a new level of maturity by beginning to address the human aspects of software development. This added focus has added a new layer of complexity to an already challenging area of research. Along with new research questions, new research methods are needed to study nontechnical aspects of software engineering. In many other disciplines, qualitative research methods have been developed and are commonly used to handle the complexity of issues involving human behavior. This paper presents several qualitative methods for data collection and analysis and describes them in terms of how they might be incorporated into empirical studies of software engineering, in particular how they might be combined with quantitative methods. To illustrate this use of qualitative methods, examples from real software engineering studies are used throughout.",10.1109/32.799955,1|3|5,,2,1|2,{},324,http://ieeexplore.ieee.org/abstract/document/799955/?reload=true
3ZRKL6Z1E8R65PJSS5UYMJYX1J2GSB,3EKVH9QMEZSCAQQXM2JLD0DJ5OP2DV,A3F9JBVNMQ4ZUV,97,20542,19,Qualitative Methods in Empirical Studies of Software Engineering,carolyn b. seaman,"71","While empirical studies in software engineering are beginning to gain recognition in the research community, this subarea is also entering a new level of maturity by beginning to address the human aspects of software development. This added focus has added a new layer of complexity to an already challenging area of research. Along with new research questions, new research methods are needed to study nontechnical aspects of software engineering. In many other disciplines, qualitative research methods have been developed and are commonly used to handle the complexity of issues involving human behavior. This paper presents several qualitative methods for data collection and analysis and describes them in terms of how they might be incorporated into empirical studies of software engineering, in particular how they might be combined with quantitative methods. To illustrate this use of qualitative methods, examples from real software engineering studies are used throughout.",https://pdfs.semanticscholar.org/9846/cb0b10aae4128bc27a82cf87b2a947a7c210.pdf,,1,3,1|2,{},1014,http://ieeexplore.ieee.org/abstract/document/799955/
3ZVPAMTJWNRU4AJFDGUTW9T1FHJGRN,3C6FJU71TRHOSDUQ1IG5W4IC63JUYI,A3F9JBVNMQ4ZUV,59,31807,28,A Methodology for Controlling the Size of a Test Suite,"mary jean harrold,rajiv gupta,mary lou soffa","73","This paper presents a technique to select a representative set of test cases from a test suite that provides the same coverage as the entire test suite. This selection is performed by identifying, and then eliminating, the redundant and obsolete test cases in the test suite. The representative set replaces the original test suite and thus, potentially produces a smaller test suite. The representative set can also be used to identify those test cases that should be rerun to test the program after it has been changed. Our technique is independent of the testing methodology and only requires an association between a testing requirement and the test cases that satisfy the requirement. We illustrate the technique using the data flow testing methodology. The reduction that is possible with our technique is illustrated by experimental results.",https://pdfs.semanticscholar.org/91a8/d659dc5a339abc58f4cccc76bd7101d344b9.pdf,1,1,1,1|2,{},709,http://dl.acm.org/citation.cfm?id=152391
3ZVPAMTJWNRU4AJFDGUTW9T1FHJGRN,3HRMW88U17E8IATWK8EAD27YH120MQ,A18LFH7XW61JO9,533,31807,28,A Methodology for Controlling the Size of a Test Suite,"mary jean harrold,rajiv gupta,mary lou soffa","73","This paper presents a technique to select a representative set of test cases from a test suite that provides the same coverage as the entire test suite. This selection is performed by identifying, and then eliminating, the redundant and obsolete test cases in the test suite. The representative set replaces the original test suite and thus, potentially produces a smaller test suite. The representative set can also be used to identify those test cases that should be rerun to test the program after it has been changed. Our technique is independent of the testing methodology and only requires an association between a testing requirement and the test cases that satisfy the requirement. We illustrate the technique using the data flow testing methodology. The reduction that is possible with our technique is illustrated by experimental results.",DOI: 10.1145/152388.152391,1,1,1,1|2,"Dear Requester,I like these hits and want to attempt more. Please comment on this hit and please provide any additional feedback.",709,http://dl.acm.org/citation.cfm?id=152391
3ZVPAMTJWNRU4AJFDGUTW9T1FHJGRN,3X0H8UUIT2C4OV7MXC3HW6F8AYFSWI,A3SAN0Z4EPHDYA,282,31807,28,A Methodology for Controlling the Size of a Test Suite,"mary jean harrold,rajiv gupta,mary lou soffa","73","This paper presents a technique to select a representative set of test cases from a test suite that provides the same coverage as the entire test suite. This selection is performed by identifying, and then eliminating, the redundant and obsolete test cases in the test suite. The representative set replaces the original test suite and thus, potentially produces a smaller test suite. The representative set can also be used to identify those test cases that should be rerun to test the program after it has been changed. Our technique is independent of the testing methodology and only requires an association between a testing requirement and the test cases that satisfy the requirement. We illustrate the technique using the data flow testing methodology. The reduction that is possible with our technique is illustrated by experimental results.",10.1145/152388.152391,1|4,1,1,1|2|3,{},151,http://dl.acm.org/citation.cfm?id=152391
3ZXNP4Z39R908JD1FTT34K79AMB7LL,3AWETUDC93GJOC9V3NTAR833I33IZU,AMGQ3YEAMC3Z2,106,31741,28,Discovering Models of Software Processes from EventBased Data,"jonathan e. cook,alexander l. wolf","50","Many software process methods and tools presuppose the existence of a formal model of a process. Unfortunately, developing a formal model for an on-going, complex process can be difficult, costly, and error prone. This presents a practical barrier to the adoption of process technologies, which would be lowered by automated assistance in creating formal models. To this end, we have developed a data analysis technique that we term process discovery. Under this technique, data describing process events are first captured from an on-going process and then used to generate a formal model of the behavior of that process. In this article we describe a Markov method that we developed specifically for process discovery, as well as describe two additional methods that we adopted from other domains and augmented for our purposes. The three methods range from the purely algorithmic to the purely statistical. We compare the methods and discuss their application in an industrial case study.",https://doi.org/10.1145/287000.287001,4,1,1,1|2,{},241,http://dl.acm.org/citation.cfm?id=287001
3ZXNP4Z39R908JD1FTT34K79AMB7LL,3MRNMEIQW6UIBCC5W81QSWCSBOSLDF,A3F9JBVNMQ4ZUV,93,31741,28,Discovering Models of Software Processes from EventBased Data,"jonathan e. cook,alexander l. wolf","50","Many software process methods and tools presuppose the existence of a formal model of a process. Unfortunately, developing a formal model for an on-going, complex process can be difficult, costly, and error prone. This presents a practical barrier to the adoption of process technologies, which would be lowered by automated assistance in creating formal models. To this end, we have developed a data analysis technique that we term process discovery. Under this technique, data describing process events are first captured from an on-going process and then used to generate a formal model of the behavior of that process. In this article we describe a Markov method that we developed specifically for process discovery, as well as describe two additional methods that we adopted from other domains and augmented for our purposes. The three methods range from the purely algorithmic to the purely statistical. We compare the methods and discuss their application in an industrial case study.",http://www.dtic.mil/dtic/tr/fulltext/u2/a446147.pdf,1|3,1,3,1|2,{},920,http://dl.acm.org/citation.cfm?id=287001
3ZXNP4Z39R908JD1FTT34K79AMB7LL,3OE22WJIGJCFJB34A8ZBJIFA74XUQU,A314XJY8V1YL12,254,31741,28,Discovering Models of Software Processes from EventBased Data,"jonathan e. cook,alexander l. wolf","50","Many software process methods and tools presuppose the existence of a formal model of a process. Unfortunately, developing a formal model for an on-going, complex process can be difficult, costly, and error prone. This presents a practical barrier to the adoption of process technologies, which would be lowered by automated assistance in creating formal models. To this end, we have developed a data analysis technique that we term process discovery. Under this technique, data describing process events are first captured from an on-going process and then used to generate a formal model of the behavior of that process. In this article we describe a Markov method that we developed specifically for process discovery, as well as describe two additional methods that we adopted from other domains and augmented for our purposes. The three methods range from the purely algorithmic to the purely statistical. We compare the methods and discuss their application in an industrial case study.",http://www.dtic.mil/dtic/tr/fulltext/u2/a446147.pdf,1,1,1,1|2|4,{},920,http://www.dtic.mil/dtic/tr/fulltext/u2/a446147.pdf